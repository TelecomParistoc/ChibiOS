
build/ch.elf:     format de fichier elf32-littlearm


Déassemblage de la section .text :

08000200 <Reset_Handler>:
 8000200:	b672      	cpsid	i
 8000202:	4826      	ldr	r0, [pc, #152]	; (800029c <endfiniloop+0x4>)
 8000204:	f380 8809 	msr	PSP, r0
 8000208:	2002      	movs	r0, #2
 800020a:	f380 8814 	msr	CONTROL, r0
 800020e:	f3bf 8f6f 	isb	sy
 8000212:	f003 f94d 	bl	80034b0 <__core_init>
 8000216:	f003 f873 	bl	8003300 <__early_init>
 800021a:	4821      	ldr	r0, [pc, #132]	; (80002a0 <endfiniloop+0x8>)
 800021c:	4921      	ldr	r1, [pc, #132]	; (80002a4 <endfiniloop+0xc>)
 800021e:	4a22      	ldr	r2, [pc, #136]	; (80002a8 <endfiniloop+0x10>)

08000220 <msloop>:
 8000220:	4291      	cmp	r1, r2
 8000222:	bf3c      	itt	cc
 8000224:	f841 0b04 	strcc.w	r0, [r1], #4
 8000228:	f7ff bffa 	bcc.w	8000220 <msloop>
 800022c:	491f      	ldr	r1, [pc, #124]	; (80002ac <endfiniloop+0x14>)
 800022e:	4a1b      	ldr	r2, [pc, #108]	; (800029c <endfiniloop+0x4>)

08000230 <psloop>:
 8000230:	4291      	cmp	r1, r2
 8000232:	bf3c      	itt	cc
 8000234:	f841 0b04 	strcc.w	r0, [r1], #4
 8000238:	f7ff bffa 	bcc.w	8000230 <psloop>
 800023c:	491c      	ldr	r1, [pc, #112]	; (80002b0 <endfiniloop+0x18>)
 800023e:	4a1d      	ldr	r2, [pc, #116]	; (80002b4 <endfiniloop+0x1c>)
 8000240:	4b1d      	ldr	r3, [pc, #116]	; (80002b8 <endfiniloop+0x20>)

08000242 <dloop>:
 8000242:	429a      	cmp	r2, r3
 8000244:	bf3e      	ittt	cc
 8000246:	f851 0b04 	ldrcc.w	r0, [r1], #4
 800024a:	f842 0b04 	strcc.w	r0, [r2], #4
 800024e:	f7ff bff8 	bcc.w	8000242 <dloop>
 8000252:	2000      	movs	r0, #0
 8000254:	4919      	ldr	r1, [pc, #100]	; (80002bc <endfiniloop+0x24>)
 8000256:	4a1a      	ldr	r2, [pc, #104]	; (80002c0 <endfiniloop+0x28>)

08000258 <bloop>:
 8000258:	4291      	cmp	r1, r2
 800025a:	bf3c      	itt	cc
 800025c:	f841 0b04 	strcc.w	r0, [r1], #4
 8000260:	f7ff bffa 	bcc.w	8000258 <bloop>
 8000264:	f003 f8e4 	bl	8003430 <__init_ram_areas>
 8000268:	f003 f91a 	bl	80034a0 <__late_init>
 800026c:	4c15      	ldr	r4, [pc, #84]	; (80002c4 <endfiniloop+0x2c>)
 800026e:	4d16      	ldr	r5, [pc, #88]	; (80002c8 <endfiniloop+0x30>)

08000270 <initloop>:
 8000270:	42ac      	cmp	r4, r5
 8000272:	f280 8005 	bge.w	8000280 <endinitloop>
 8000276:	f854 1b04 	ldr.w	r1, [r4], #4
 800027a:	4788      	blx	r1
 800027c:	f7ff bff8 	b.w	8000270 <initloop>

08000280 <endinitloop>:
 8000280:	f005 f9fe 	bl	8005680 <main>
 8000284:	4c11      	ldr	r4, [pc, #68]	; (80002cc <endfiniloop+0x34>)
 8000286:	4d12      	ldr	r5, [pc, #72]	; (80002d0 <endfiniloop+0x38>)

08000288 <finiloop>:
 8000288:	42ac      	cmp	r4, r5
 800028a:	f280 8005 	bge.w	8000298 <endfiniloop>
 800028e:	f854 1b04 	ldr.w	r1, [r4], #4
 8000292:	4788      	blx	r1
 8000294:	f7ff bff8 	b.w	8000288 <finiloop>

08000298 <endfiniloop>:
 8000298:	f003 b8fa 	b.w	8003490 <__default_exit>
 800029c:	20000800 	.word	0x20000800
 80002a0:	55555555 	.word	0x55555555
 80002a4:	20000000 	.word	0x20000000
 80002a8:	20000400 	.word	0x20000400
 80002ac:	20000400 	.word	0x20000400
 80002b0:	08006ae0 	.word	0x08006ae0
 80002b4:	20000800 	.word	0x20000800
 80002b8:	200008b8 	.word	0x200008b8
 80002bc:	200008b8 	.word	0x200008b8
 80002c0:	20001378 	.word	0x20001378
 80002c4:	08000200 	.word	0x08000200
 80002c8:	08000200 	.word	0x08000200
 80002cc:	08000200 	.word	0x08000200
 80002d0:	08000200 	.word	0x08000200
	...

080002e0 <_port_switch>:
 80002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e4:	f8c1 d00c 	str.w	sp, [r1, #12]
 80002e8:	68c3      	ldr	r3, [r0, #12]
 80002ea:	469d      	mov	sp, r3
 80002ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002f0 <_port_thread_start>:
 80002f0:	2300      	movs	r3, #0
 80002f2:	f383 8811 	msr	BASEPRI, r3
 80002f6:	4628      	mov	r0, r5
 80002f8:	47a0      	blx	r4
 80002fa:	2000      	movs	r0, #0
 80002fc:	f003 f860 	bl	80033c0 <chThdExit>

08000300 <_port_switch_from_isr>:
 8000300:	f003 f88e 	bl	8003420 <chSchDoReschedule>

08000304 <_port_exit_from_isr>:
 8000304:	df00      	svc	0
 8000306:	e7fe      	b.n	8000306 <_port_exit_from_isr+0x2>
	...

08000310 <mtx8_setup.8463>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000310:	f640 0110 	movw	r1, #2064	; 0x810
 8000314:	f640 02a4 	movw	r2, #2212	; 0x8a4
 8000318:	f640 0300 	movw	r3, #2048	; 0x800
 800031c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000320:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000324:	f2c2 0100 	movt	r1, #8192	; 0x2000
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8000328:	2000      	movs	r0, #0
 800032a:	6009      	str	r1, [r1, #0]
  tqp->p_prev = (thread_t *)tqp;
 800032c:	6049      	str	r1, [r1, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800032e:	6012      	str	r2, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000330:	6052      	str	r2, [r2, #4]
 8000332:	6090      	str	r0, [r2, #8]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000334:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000336:	605b      	str	r3, [r3, #4]
 8000338:	6098      	str	r0, [r3, #8]
 800033a:	4770      	bx	lr
 800033c:	f3af 8000 	nop.w

08000340 <queues2_setup.9477>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000340:	f640 0330 	movw	r3, #2096	; 0x830
 8000344:	f2c2 0300 	movt	r3, #8192	; 0x2000
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8000348:	f640 1298 	movw	r2, #2456	; 0x998
 800034c:	f2c2 0200 	movt	r2, #8192	; 0x2000
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8000350:	1d11      	adds	r1, r2, #4
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8000352:	60da      	str	r2, [r3, #12]
  oqp->q_rdptr   = bp;
 8000354:	619a      	str	r2, [r3, #24]
  oqp->q_wrptr   = bp;
 8000356:	615a      	str	r2, [r3, #20]
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8000358:	f243 42e1 	movw	r2, #13537	; 0x34e1
 800035c:	f6c0 0200 	movt	r2, #2048	; 0x800
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8000360:	2004      	movs	r0, #4
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8000362:	61da      	str	r2, [r3, #28]
  oqp->q_link    = link;
 8000364:	2200      	movs	r2, #0
 8000366:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000368:	605b      	str	r3, [r3, #4]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800036a:	6098      	str	r0, [r3, #8]
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 800036c:	6119      	str	r1, [r3, #16]
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 800036e:	621a      	str	r2, [r3, #32]
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	f3af 8000 	nop.w
 8000378:	f3af 8000 	nop.w
 800037c:	f3af 8000 	nop.w

08000380 <queues1_setup.9482>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000380:	f640 037c 	movw	r3, #2172	; 0x87c
 8000384:	f2c2 0300 	movt	r3, #8192	; 0x2000
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8000388:	f640 1298 	movw	r2, #2456	; 0x998
 800038c:	f2c2 0200 	movt	r2, #8192	; 0x2000
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8000390:	1d10      	adds	r0, r2, #4
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8000392:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
 8000394:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
 8000396:	615a      	str	r2, [r3, #20]
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8000398:	f243 42e1 	movw	r2, #13537	; 0x34e1
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800039c:	2100      	movs	r1, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 800039e:	f6c0 0200 	movt	r2, #2048	; 0x800
 80003a2:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80003a4:	605b      	str	r3, [r3, #4]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80003a6:	6099      	str	r1, [r3, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 80003a8:	6118      	str	r0, [r3, #16]
  iqp->q_notify  = infy;
 80003aa:	61da      	str	r2, [r3, #28]
  iqp->q_link    = link;
 80003ac:	6219      	str	r1, [r3, #32]
 80003ae:	4770      	bx	lr

080003b0 <mtx7_setup.8465>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80003b0:	f640 0210 	movw	r2, #2064	; 0x810
 80003b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80003b8:	f640 03a4 	movw	r3, #2212	; 0x8a4
 80003bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003c0:	6012      	str	r2, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 80003c2:	6052      	str	r2, [r2, #4]
 80003c4:	2200      	movs	r2, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80003c6:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80003c8:	605b      	str	r3, [r3, #4]
 80003ca:	609a      	str	r2, [r3, #8]
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <mtx6_setup.8467>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80003d0:	f640 0210 	movw	r2, #2064	; 0x810
 80003d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80003d8:	f640 03a4 	movw	r3, #2212	; 0x8a4
 80003dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003e0:	6012      	str	r2, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 80003e2:	6052      	str	r2, [r2, #4]
 80003e4:	2200      	movs	r2, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80003e6:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80003e8:	605b      	str	r3, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop

080003f0 <mtx5_setup.8469>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80003f0:	f640 03a4 	movw	r3, #2212	; 0x8a4
 80003f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003f8:	2200      	movs	r2, #0
 80003fa:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80003fc:	605b      	str	r3, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	f3af 8000 	nop.w
 8000408:	f3af 8000 	nop.w
 800040c:	f3af 8000 	nop.w

08000410 <mtx4_setup.8471>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000410:	f640 02a4 	movw	r2, #2212	; 0x8a4
 8000414:	f640 0300 	movw	r3, #2048	; 0x800
 8000418:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800041c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000420:	2100      	movs	r1, #0
 8000422:	6012      	str	r2, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000424:	6052      	str	r2, [r2, #4]
 8000426:	6091      	str	r1, [r2, #8]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000428:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 800042a:	605b      	str	r3, [r3, #4]
 800042c:	6099      	str	r1, [r3, #8]
 800042e:	4770      	bx	lr

08000430 <mtx1_setup.8473>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000430:	f640 03a4 	movw	r3, #2212	; 0x8a4
 8000434:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000438:	2200      	movs	r2, #0
 800043a:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 800043c:	605b      	str	r3, [r3, #4]
 800043e:	609a      	str	r2, [r3, #8]
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	f3af 8000 	nop.w
 8000448:	f3af 8000 	nop.w
 800044c:	f3af 8000 	nop.w

08000450 <bmk12_setup.9748>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000450:	f640 1374 	movw	r3, #2420	; 0x974
 8000454:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000458:	2200      	movs	r2, #0
 800045a:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 800045c:	605b      	str	r3, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	f3af 8000 	nop.w
 8000468:	f3af 8000 	nop.w
 800046c:	f3af 8000 	nop.w

08000470 <mbox1_setup.8790>:
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->mb_buffer = buf;
 8000470:	f640 0354 	movw	r3, #2132	; 0x854
 8000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000478:	f640 1298 	movw	r2, #2456	; 0x998
 800047c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 * Messages are posted/fetched from a mailbox in carefully designed sequences
 * in order to stimulate all the possible code paths inside the mailbox.<br>
 * The test expects to find a consistent mailbox status after each operation.
 */

static void mbox1_setup(void) {
 8000480:	b410      	push	{r4}
  mbp->mb_rdptr = buf;
  mbp->mb_wrptr = buf;
  mbp->mb_top = &buf[n];
 8000482:	f102 0414 	add.w	r4, r2, #20
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->mb_buffer = buf;
 8000486:	601a      	str	r2, [r3, #0]
  mbp->mb_rdptr = buf;
 8000488:	60da      	str	r2, [r3, #12]
  mbp->mb_wrptr = buf;
 800048a:	609a      	str	r2, [r3, #8]
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 800048c:	2205      	movs	r2, #5
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800048e:	f103 001c 	add.w	r0, r3, #28
 8000492:	f103 0110 	add.w	r1, r3, #16
 8000496:	625a      	str	r2, [r3, #36]	; 0x24
 8000498:	2200      	movs	r2, #0
  mbp->mb_top = &buf[n];
 800049a:	605c      	str	r4, [r3, #4]
 800049c:	61d8      	str	r0, [r3, #28]
  tqp->p_prev = (thread_t *)tqp;
 800049e:	6218      	str	r0, [r3, #32]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80004a0:	6119      	str	r1, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 80004a2:	6159      	str	r1, [r3, #20]
 80004a4:	619a      	str	r2, [r3, #24]

  chMBObjectInit(&mb1, (msg_t *)test.wa.T0, MB_SIZE);
}
 80004a6:	bc10      	pop	{r4}
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	f3af 8000 	nop.w

080004b0 <sem3_setup.8243>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80004b0:	f640 0324 	movw	r3, #2084	; 0x824
 80004b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004b8:	2200      	movs	r2, #0
 80004ba:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80004bc:	605b      	str	r3, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	f3af 8000 	nop.w
 80004c8:	f3af 8000 	nop.w
 80004cc:	f3af 8000 	nop.w

080004d0 <sem2_setup.8245>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80004d0:	f640 0324 	movw	r3, #2084	; 0x824
 80004d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004d8:	2200      	movs	r2, #0
 80004da:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80004dc:	605b      	str	r3, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	f3af 8000 	nop.w
 80004e8:	f3af 8000 	nop.w
 80004ec:	f3af 8000 	nop.w

080004f0 <sem1_setup.8247>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80004f0:	f640 0324 	movw	r3, #2084	; 0x824
 80004f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004f8:	2200      	movs	r2, #0
 80004fa:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80004fc:	605b      	str	r3, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	f3af 8000 	nop.w
 8000508:	f3af 8000 	nop.w
 800050c:	f3af 8000 	nop.w

08000510 <bmk11_setup.9752>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000510:	f640 1318 	movw	r3, #2328	; 0x918
 8000514:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000518:	2201      	movs	r2, #1
 800051a:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 800051c:	605b      	str	r3, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	f3af 8000 	nop.w
 8000528:	f3af 8000 	nop.w
 800052c:	f3af 8000 	nop.w

08000530 <bmk7_setup.9754>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000530:	f640 1318 	movw	r3, #2328	; 0x918
 8000534:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000538:	2200      	movs	r2, #0
 800053a:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 800053c:	605b      	str	r3, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	f3af 8000 	nop.w
 8000548:	f3af 8000 	nop.w
 800054c:	f3af 8000 	nop.w

08000550 <dyn2_setup.9304>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8000550:	f640 03f8 	movw	r3, #2296	; 0x8f8
 8000554:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000558:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 800055a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 800055e:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
 8000560:	6059      	str	r1, [r3, #4]
  mp->mp_provider = provider;
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	f3af 8000 	nop.w
 800056c:	f3af 8000 	nop.w

08000570 <pools1_setup.9164>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8000570:	f640 0318 	movw	r3, #2072	; 0x818
 8000574:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000578:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 800057a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 800057e:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
 8000580:	6059      	str	r1, [r3, #4]
  mp->mp_provider = provider;
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	f3af 8000 	nop.w
 800058c:	f3af 8000 	nop.w

08000590 <heap1_setup.9133>:
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8000590:	f640 03b8 	movw	r3, #2232	; 0x8b8
  heapp->h_free.h.u.next = hp;
 8000594:	f640 1298 	movw	r2, #2456	; 0x998
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8000598:	f2c2 0300 	movt	r3, #8192	; 0x2000
  heapp->h_free.h.u.next = hp;
 800059c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 * allocator.<br>
 * The test expects to find the heap back to the initial status after each
 * sequence.
 */

static void heap1_setup(void) {
 80005a0:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 80005a2:	2100      	movs	r1, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80005a4:	f103 0010 	add.w	r0, r3, #16
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 80005a8:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 80005ac:	6019      	str	r1, [r3, #0]
  heapp->h_free.h.u.next = hp;
 80005ae:	609a      	str	r2, [r3, #8]
  heapp->h_free.h.size = 0;
 80005b0:	60d9      	str	r1, [r3, #12]
  hp->h.u.next = NULL;
 80005b2:	6011      	str	r1, [r2, #0]
  hp->h.size = size - sizeof(union heap_header);
 80005b4:	6054      	str	r4, [r2, #4]
 80005b6:	6118      	str	r0, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 80005b8:	6158      	str	r0, [r3, #20]
 80005ba:	6199      	str	r1, [r3, #24]

  chHeapObjectInit(&test_heap, test.buffer, sizeof(union test_buffers));
}
 80005bc:	bc10      	pop	{r4}
 80005be:	4770      	bx	lr

080005c0 <tmo.9726>:
 * A virtual timer is set and immediately reset into a continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	f3af 8000 	nop.w
 80005c8:	f3af 8000 	nop.w
 80005cc:	f3af 8000 	nop.w

080005d0 <chCondSignal.constprop.44.4304>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondSignal(condition_variable_t *cp) {
 80005d0:	b508      	push	{r3, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80005d2:	2320      	movs	r3, #32
 80005d4:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <chCondSignal.constprop.44.4304+0x24>)
 80005da:	6818      	ldr	r0, [r3, #0]

  chDbgCheck(cp != NULL);

  chSysLock();
  if (queue_notempty(&cp->c_queue)) {
 80005dc:	4298      	cmp	r0, r3
 80005de:	d005      	beq.n	80005ec <chCondSignal.constprop.44.4304+0x1c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80005e0:	6802      	ldr	r2, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&cp->c_queue), MSG_OK);
 80005e2:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 80005e4:	6053      	str	r3, [r2, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	f004 fd4a 	bl	8005080 <chSchWakeupS>
 80005ec:	2300      	movs	r3, #0
 80005ee:	f383 8811 	msr	BASEPRI, r3
 80005f2:	bd08      	pop	{r3, pc}
 80005f4:	20000810 	.word	0x20000810
 80005f8:	f3af 8000 	nop.w
 80005fc:	f3af 8000 	nop.w

08000600 <mtx8_execute.8461>:
  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
}

static void mtx8_execute(void) {
 8000600:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8000602:	f241 13e0 	movw	r3, #4576	; 0x11e0
 8000606:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800060a:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800060c:	699b      	ldr	r3, [r3, #24]

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 800060e:	f640 1598 	movw	r5, #2456	; 0x998
 8000612:	689e      	ldr	r6, [r3, #8]
 8000614:	f645 50e0 	movw	r0, #24032	; 0x5de0
 8000618:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800061c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000620:	f241 3381 	movw	r3, #4993	; 0x1381
 8000624:	1c72      	adds	r2, r6, #1
 8000626:	9000      	str	r0, [sp, #0]
 8000628:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800062c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000630:	4628      	mov	r0, r5
 8000632:	f004 fd6d 	bl	8005110 <chThdCreateStatic>
 8000636:	f241 3430 	movw	r4, #4912	; 0x1330
 800063a:	f2c2 0400 	movt	r4, #8192	; 0x2000
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 800063e:	f44f 71a4 	mov.w	r1, #328	; 0x148
}

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8000642:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8000644:	f645 50e4 	movw	r0, #24036	; 0x5de4
 8000648:	f6c0 0000 	movt	r0, #2048	; 0x800
 800064c:	f640 3371 	movw	r3, #2929	; 0xb71
 8000650:	1cb2      	adds	r2, r6, #2
 8000652:	9000      	str	r0, [sp, #0]
 8000654:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000658:	1868      	adds	r0, r5, r1
 800065a:	f004 fd59 	bl	8005110 <chThdCreateStatic>
 800065e:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 8000660:	f645 50e8 	movw	r0, #24040	; 0x5de8
 8000664:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000668:	f643 03f1 	movw	r3, #14577	; 0x38f1
 800066c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000670:	1cf2      	adds	r2, r6, #3
 8000672:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000676:	9000      	str	r0, [sp, #0]
 8000678:	f505 7024 	add.w	r0, r5, #656	; 0x290
 800067c:	f004 fd48 	bl	8005110 <chThdCreateStatic>
 8000680:	60a0      	str	r0, [r4, #8]
  chCondSignal(&c1);
 8000682:	f7ff ffa5 	bl	80005d0 <chCondSignal.constprop.44.4304>
  chCondSignal(&c1);
 8000686:	f7ff ffa3 	bl	80005d0 <chCondSignal.constprop.44.4304>
  test_wait_threads();
 800068a:	f003 fc81 	bl	8003f90 <test_wait_threads>
  test_assert_sequence(1, "ABC");
 800068e:	f645 51ec 	movw	r1, #24044	; 0x5dec
 8000692:	2001      	movs	r0, #1
 8000694:	f6c0 0100 	movt	r1, #2048	; 0x800
}
 8000698:	b002      	add	sp, #8
 800069a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
  chCondSignal(&c1);
  chCondSignal(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABC");
 800069e:	f002 bfaf 	b.w	8003600 <_test_assert_sequence>
 80006a2:	bf00      	nop
 80006a4:	f3af 8000 	nop.w
 80006a8:	f3af 8000 	nop.w
 80006ac:	f3af 8000 	nop.w

080006b0 <sem1_execute.8264>:

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {
 80006b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80006b4:	4e4e      	ldr	r6, [pc, #312]	; (80007f0 <sem1_execute.8264+0x140>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80006b6:	4f4f      	ldr	r7, [pc, #316]	; (80007f4 <sem1_execute.8264+0x144>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80006b8:	69b2      	ldr	r2, [r6, #24]
 80006ba:	4b4f      	ldr	r3, [pc, #316]	; (80007f8 <sem1_execute.8264+0x148>)
 80006bc:	6892      	ldr	r2, [r2, #8]
 80006be:	484f      	ldr	r0, [pc, #316]	; (80007fc <sem1_execute.8264+0x14c>)
 80006c0:	4d4f      	ldr	r5, [pc, #316]	; (8000800 <sem1_execute.8264+0x150>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
  chSemSignal(&sem1);
 80006c2:	4c50      	ldr	r4, [pc, #320]	; (8000804 <sem1_execute.8264+0x154>)

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {
 80006c4:	b082      	sub	sp, #8

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80006c6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80006ca:	3205      	adds	r2, #5
 80006cc:	9700      	str	r7, [sp, #0]
 80006ce:	f004 fd1f 	bl	8005110 <chThdCreateStatic>
 80006d2:	69b3      	ldr	r3, [r6, #24]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80006d4:	689a      	ldr	r2, [r3, #8]
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80006d6:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80006d8:	484b      	ldr	r0, [pc, #300]	; (8000808 <sem1_execute.8264+0x158>)
 80006da:	4b47      	ldr	r3, [pc, #284]	; (80007f8 <sem1_execute.8264+0x148>)
 80006dc:	9000      	str	r0, [sp, #0]
 80006de:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80006e2:	3201      	adds	r2, #1
 80006e4:	4849      	ldr	r0, [pc, #292]	; (800080c <sem1_execute.8264+0x15c>)
 80006e6:	f004 fd13 	bl	8005110 <chThdCreateStatic>
 80006ea:	69b3      	ldr	r3, [r6, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 80006ec:	689a      	ldr	r2, [r3, #8]
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80006ee:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 80006f0:	4847      	ldr	r0, [pc, #284]	; (8000810 <sem1_execute.8264+0x160>)
 80006f2:	4b41      	ldr	r3, [pc, #260]	; (80007f8 <sem1_execute.8264+0x148>)
 80006f4:	9000      	str	r0, [sp, #0]
 80006f6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80006fa:	3203      	adds	r2, #3
 80006fc:	4845      	ldr	r0, [pc, #276]	; (8000814 <sem1_execute.8264+0x164>)
 80006fe:	f004 fd07 	bl	8005110 <chThdCreateStatic>
 8000702:	69b3      	ldr	r3, [r6, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8000704:	689a      	ldr	r2, [r3, #8]

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8000706:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8000708:	4843      	ldr	r0, [pc, #268]	; (8000818 <sem1_execute.8264+0x168>)
 800070a:	4b3b      	ldr	r3, [pc, #236]	; (80007f8 <sem1_execute.8264+0x148>)
 800070c:	9000      	str	r0, [sp, #0]
 800070e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000712:	3204      	adds	r2, #4
 8000714:	4841      	ldr	r0, [pc, #260]	; (800081c <sem1_execute.8264+0x16c>)
 8000716:	f004 fcfb 	bl	8005110 <chThdCreateStatic>
 800071a:	69b3      	ldr	r3, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 800071c:	689a      	ldr	r2, [r3, #8]
static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 800071e:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8000720:	483f      	ldr	r0, [pc, #252]	; (8000820 <sem1_execute.8264+0x170>)
 8000722:	4b35      	ldr	r3, [pc, #212]	; (80007f8 <sem1_execute.8264+0x148>)
 8000724:	9000      	str	r0, [sp, #0]
 8000726:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800072a:	3202      	adds	r2, #2
 800072c:	483d      	ldr	r0, [pc, #244]	; (8000824 <sem1_execute.8264+0x174>)
 800072e:	f004 fcef 	bl	8005110 <chThdCreateStatic>
 8000732:	6128      	str	r0, [r5, #16]
  chSemSignal(&sem1);
 8000734:	4620      	mov	r0, r4
 8000736:	f004 fcd3 	bl	80050e0 <chSemSignal>
  chSemSignal(&sem1);
 800073a:	4620      	mov	r0, r4
 800073c:	f004 fcd0 	bl	80050e0 <chSemSignal>
  chSemSignal(&sem1);
 8000740:	4620      	mov	r0, r4
 8000742:	f004 fccd 	bl	80050e0 <chSemSignal>
  chSemSignal(&sem1);
 8000746:	4620      	mov	r0, r4
 8000748:	f004 fcca 	bl	80050e0 <chSemSignal>
  chSemSignal(&sem1);
 800074c:	4620      	mov	r0, r4
 800074e:	f004 fcc7 	bl	80050e0 <chSemSignal>
  test_wait_threads();
 8000752:	f003 fc1d 	bl	8003f90 <test_wait_threads>
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
 8000756:	2001      	movs	r0, #1
 8000758:	4933      	ldr	r1, [pc, #204]	; (8000828 <sem1_execute.8264+0x178>)
 800075a:	f002 ff51 	bl	8003600 <_test_assert_sequence>
 800075e:	4680      	mov	r8, r0
 8000760:	b110      	cbz	r0, 8000768 <sem1_execute.8264+0xb8>
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
}
 8000762:	b002      	add	sp, #8
 8000764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000768:	69b2      	ldr	r2, [r6, #24]
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
#endif
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 800076a:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <sem1_execute.8264+0x148>)
 800076c:	6892      	ldr	r2, [r2, #8]
 800076e:	4823      	ldr	r0, [pc, #140]	; (80007fc <sem1_execute.8264+0x14c>)
 8000770:	9700      	str	r7, [sp, #0]
 8000772:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000776:	3205      	adds	r2, #5
 8000778:	f004 fcca 	bl	8005110 <chThdCreateStatic>
 800077c:	2320      	movs	r3, #32
 800077e:	6028      	str	r0, [r5, #0]
 8000780:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
    if (++sp->s_cnt <= (cnt_t)0) {
 8000784:	68a3      	ldr	r3, [r4, #8]
 8000786:	3301      	adds	r3, #1
 8000788:	2b00      	cmp	r3, #0
 800078a:	60a3      	str	r3, [r4, #8]
 800078c:	dd26      	ble.n	80007dc <sem1_execute.8264+0x12c>
 800078e:	68a3      	ldr	r3, [r4, #8]
 8000790:	4a1c      	ldr	r2, [pc, #112]	; (8000804 <sem1_execute.8264+0x154>)
 8000792:	3301      	adds	r3, #1
 8000794:	2b00      	cmp	r3, #0
 8000796:	60a3      	str	r3, [r4, #8]
 8000798:	dd17      	ble.n	80007ca <sem1_execute.8264+0x11a>
  chSysLock();
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
 800079a:	f004 fc39 	bl	8005010 <chSchRescheduleS>
 800079e:	2500      	movs	r5, #0
 80007a0:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_wait_threads();
 80007a4:	f003 fbf4 	bl	8003f90 <test_wait_threads>
 80007a8:	2320      	movs	r3, #32
 80007aa:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
 80007ae:	68a1      	ldr	r1, [r4, #8]
 80007b0:	2002      	movs	r0, #2
 80007b2:	1e4b      	subs	r3, r1, #1
 80007b4:	4259      	negs	r1, r3
 80007b6:	4159      	adcs	r1, r3
 80007b8:	f002 ff52 	bl	8003660 <_test_assert>
 80007bc:	b910      	cbnz	r0, 80007c4 <sem1_execute.8264+0x114>
 80007be:	f380 8811 	msr	BASEPRI, r0
 80007c2:	e7ce      	b.n	8000762 <sem1_execute.8264+0xb2>
 80007c4:	f385 8811 	msr	BASEPRI, r5
 80007c8:	e7cb      	b.n	8000762 <sem1_execute.8264+0xb2>
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80007ca:	6810      	ldr	r0, [r2, #0]

  tqp->p_next = tp->p_next;
 80007cc:	6803      	ldr	r3, [r0, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80007ce:	605a      	str	r2, [r3, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80007d0:	6013      	str	r3, [r2, #0]
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 80007d2:	f004 fd35 	bl	8005240 <chSchReadyI>
 80007d6:	2300      	movs	r3, #0
 80007d8:	6203      	str	r3, [r0, #32]
 80007da:	e7de      	b.n	800079a <sem1_execute.8264+0xea>
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80007dc:	6820      	ldr	r0, [r4, #0]

  tqp->p_next = tp->p_next;
 80007de:	6803      	ldr	r3, [r0, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80007e0:	605c      	str	r4, [r3, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80007e2:	6023      	str	r3, [r4, #0]
 80007e4:	f004 fd2c 	bl	8005240 <chSchReadyI>
 80007e8:	f8c0 8020 	str.w	r8, [r0, #32]
 80007ec:	e7cf      	b.n	800078e <sem1_execute.8264+0xde>
 80007ee:	bf00      	nop
 80007f0:	200011e0 	.word	0x200011e0
 80007f4:	08005de0 	.word	0x08005de0
 80007f8:	08003921 	.word	0x08003921
 80007fc:	20000998 	.word	0x20000998
 8000800:	20001330 	.word	0x20001330
 8000804:	20000824 	.word	0x20000824
 8000808:	08005de8 	.word	0x08005de8
 800080c:	20000ae0 	.word	0x20000ae0
 8000810:	08005de4 	.word	0x08005de4
 8000814:	20000c28 	.word	0x20000c28
 8000818:	08005df0 	.word	0x08005df0
 800081c:	20000d70 	.word	0x20000d70
 8000820:	08005df8 	.word	0x08005df8
 8000824:	20000eb8 	.word	0x20000eb8
 8000828:	08005df4 	.word	0x08005df4
 800082c:	f3af 8000 	nop.w

08000830 <chCondSignalI.constprop.43.4310>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <chCondSignalI.constprop.43.4310+0x18>)
 8000832:	6818      	ldr	r0, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
 8000834:	4298      	cmp	r0, r3
 8000836:	d006      	beq.n	8000846 <chCondSignalI.constprop.43.4310+0x16>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000838:	6802      	ldr	r2, [r0, #0]
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
 800083a:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 800083c:	6053      	str	r3, [r2, #4]
 800083e:	6201      	str	r1, [r0, #32]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000840:	601a      	str	r2, [r3, #0]
    (void) chSchReadyI(tp);
 8000842:	f004 bcfd 	b.w	8005240 <chSchReadyI>
 8000846:	4770      	bx	lr
 8000848:	20000810 	.word	0x20000810
 800084c:	f3af 8000 	nop.w

08000850 <mtx6_execute.8477>:
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx6_execute(void) {
 8000850:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8000852:	f241 13e0 	movw	r3, #4576	; 0x11e0
 8000856:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800085a:	b083      	sub	sp, #12
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800085c:	699b      	ldr	r3, [r3, #24]

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 800085e:	f640 1698 	movw	r6, #2456	; 0x998
 8000862:	689f      	ldr	r7, [r3, #8]
 8000864:	f640 3571 	movw	r5, #2929	; 0xb71
 8000868:	f645 51f8 	movw	r1, #24056	; 0x5df8
 800086c:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8000870:	f6c0 0500 	movt	r5, #2048	; 0x800
 8000874:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000878:	1c7a      	adds	r2, r7, #1
 800087a:	462b      	mov	r3, r5
 800087c:	9100      	str	r1, [sp, #0]
 800087e:	4630      	mov	r0, r6
 8000880:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000884:	f004 fc44 	bl	8005110 <chThdCreateStatic>
 8000888:	f241 3430 	movw	r4, #4912	; 0x1330
 800088c:	f2c2 0400 	movt	r4, #8192	; 0x2000
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8000890:	f645 51f0 	movw	r1, #24048	; 0x5df0
 8000894:	f6c0 0100 	movt	r1, #2048	; 0x800
}

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8000898:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 800089a:	1cba      	adds	r2, r7, #2
 800089c:	462b      	mov	r3, r5
 800089e:	9100      	str	r1, [sp, #0]
 80008a0:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 80008a4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80008a8:	f004 fc32 	bl	8005110 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 80008ac:	f645 51e4 	movw	r1, #24036	; 0x5de4
 80008b0:	f6c0 0100 	movt	r1, #2048	; 0x800

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 80008b4:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 80008b6:	1cfa      	adds	r2, r7, #3
 80008b8:	462b      	mov	r3, r5
 80008ba:	9100      	str	r1, [sp, #0]
 80008bc:	f506 7024 	add.w	r0, r6, #656	; 0x290
 80008c0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80008c4:	f004 fc24 	bl	8005110 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80008c8:	f645 51e8 	movw	r1, #24040	; 0x5de8
 80008cc:	f6c0 0100 	movt	r1, #2048	; 0x800
static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 80008d0:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80008d2:	1d3a      	adds	r2, r7, #4
 80008d4:	462b      	mov	r3, r5
 80008d6:	9100      	str	r1, [sp, #0]
 80008d8:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 80008dc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80008e0:	f004 fc16 	bl	8005110 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 80008e4:	f645 53e0 	movw	r3, #24032	; 0x5de0
 80008e8:	f6c0 0300 	movt	r3, #2048	; 0x800

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80008ec:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 80008f4:	462b      	mov	r3, r5
 80008f6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80008fa:	1d7a      	adds	r2, r7, #5
 80008fc:	f004 fc08 	bl	8005110 <chThdCreateStatic>
 8000900:	2320      	movs	r3, #32
 8000902:	6120      	str	r0, [r4, #16]
 8000904:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chCondSignalI(&c1);
 8000908:	f7ff ff92 	bl	8000830 <chCondSignalI.constprop.43.4310>
  chCondSignalI(&c1);
 800090c:	f7ff ff90 	bl	8000830 <chCondSignalI.constprop.43.4310>
  chCondSignalI(&c1);
 8000910:	f7ff ff8e 	bl	8000830 <chCondSignalI.constprop.43.4310>
  chCondSignalI(&c1);
 8000914:	f7ff ff8c 	bl	8000830 <chCondSignalI.constprop.43.4310>
  chCondSignalI(&c1);
 8000918:	f7ff ff8a 	bl	8000830 <chCondSignalI.constprop.43.4310>
  chSchRescheduleS();
 800091c:	f004 fb78 	bl	8005010 <chSchRescheduleS>
 8000920:	2300      	movs	r3, #0
 8000922:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_wait_threads();
 8000926:	f003 fb33 	bl	8003f90 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 800092a:	f645 51f4 	movw	r1, #24052	; 0x5df4
 800092e:	2001      	movs	r0, #1
 8000930:	f6c0 0100 	movt	r1, #2048	; 0x800
}
 8000934:	b003      	add	sp, #12
 8000936:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  chCondSignalI(&c1);
  chCondSignalI(&c1);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 800093a:	f002 be61 	b.w	8003600 <_test_assert_sequence>
 800093e:	bf00      	nop

08000940 <mtx7_execute.8475>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8000940:	b530      	push	{r4, r5, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8000942:	4b2c      	ldr	r3, [pc, #176]	; (80009f4 <mtx7_execute.8475+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8000944:	482c      	ldr	r0, [pc, #176]	; (80009f8 <mtx7_execute.8475+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8000946:	699a      	ldr	r2, [r3, #24]
 8000948:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <mtx7_execute.8475+0xbc>)
 800094a:	6895      	ldr	r5, [r2, #8]
 800094c:	4a2c      	ldr	r2, [pc, #176]	; (8000a00 <mtx7_execute.8475+0xc0>)
 800094e:	4c2d      	ldr	r4, [pc, #180]	; (8000a04 <mtx7_execute.8475+0xc4>)

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8000950:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8000952:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000956:	9200      	str	r2, [sp, #0]
 8000958:	1c6a      	adds	r2, r5, #1
 800095a:	f004 fbd9 	bl	8005110 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 800095e:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <mtx7_execute.8475+0xc8>)
}

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8000960:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8000962:	1caa      	adds	r2, r5, #2
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800096a:	4b24      	ldr	r3, [pc, #144]	; (80009fc <mtx7_execute.8475+0xbc>)
 800096c:	4827      	ldr	r0, [pc, #156]	; (8000a0c <mtx7_execute.8475+0xcc>)
 800096e:	f004 fbcf 	bl	8005110 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8000972:	4b27      	ldr	r3, [pc, #156]	; (8000a10 <mtx7_execute.8475+0xd0>)

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8000974:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8000976:	1cea      	adds	r2, r5, #3
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <mtx7_execute.8475+0xbc>)
 8000980:	4824      	ldr	r0, [pc, #144]	; (8000a14 <mtx7_execute.8475+0xd4>)
 8000982:	f004 fbc5 	bl	8005110 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8000986:	4b24      	ldr	r3, [pc, #144]	; (8000a18 <mtx7_execute.8475+0xd8>)
static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8000988:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 800098a:	1d2a      	adds	r2, r5, #4
 800098c:	9300      	str	r3, [sp, #0]
 800098e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000992:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <mtx7_execute.8475+0xbc>)
 8000994:	4821      	ldr	r0, [pc, #132]	; (8000a1c <mtx7_execute.8475+0xdc>)
 8000996:	f004 fbbb 	bl	8005110 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 800099a:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <mtx7_execute.8475+0xe0>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 800099c:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 800099e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	1d6a      	adds	r2, r5, #5
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <mtx7_execute.8475+0xbc>)
 80009a8:	481e      	ldr	r0, [pc, #120]	; (8000a24 <mtx7_execute.8475+0xe4>)
 80009aa:	f004 fbb1 	bl	8005110 <chThdCreateStatic>
 80009ae:	2320      	movs	r3, #32
 80009b0:	6120      	str	r0, [r4, #16]
 80009b2:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80009b6:	4c1c      	ldr	r4, [pc, #112]	; (8000a28 <mtx7_execute.8475+0xe8>)
 80009b8:	6823      	ldr	r3, [r4, #0]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 80009ba:	42a3      	cmp	r3, r4
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 80009bc:	bf18      	it	ne
 80009be:	f06f 0501 	mvnne.w	r5, #1
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 80009c2:	d009      	beq.n	80009d8 <mtx7_execute.8475+0x98>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80009c4:	681a      	ldr	r2, [r3, #0]
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 80009c6:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 80009c8:	6054      	str	r4, [r2, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80009ca:	6022      	str	r2, [r4, #0]
 80009cc:	f004 fc38 	bl	8005240 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80009d0:	6823      	ldr	r3, [r4, #0]
 80009d2:	6205      	str	r5, [r0, #32]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 80009d4:	42a3      	cmp	r3, r4
 80009d6:	d1f5      	bne.n	80009c4 <mtx7_execute.8475+0x84>
 */
void chCondBroadcast(condition_variable_t *cp) {

  chSysLock();
  chCondBroadcastI(cp);
  chSchRescheduleS();
 80009d8:	f004 fb1a 	bl	8005010 <chSchRescheduleS>
 80009dc:	2300      	movs	r3, #0
 80009de:	f383 8811 	msr	BASEPRI, r3
  chCondBroadcast(&c1);
  test_wait_threads();
 80009e2:	f003 fad5 	bl	8003f90 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 80009e6:	4911      	ldr	r1, [pc, #68]	; (8000a2c <mtx7_execute.8475+0xec>)
 80009e8:	2001      	movs	r0, #1
}
 80009ea:	b003      	add	sp, #12
 80009ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
  chCondBroadcast(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 80009f0:	f002 be06 	b.w	8003600 <_test_assert_sequence>
 80009f4:	200011e0 	.word	0x200011e0
 80009f8:	20000998 	.word	0x20000998
 80009fc:	08000b71 	.word	0x08000b71
 8000a00:	08005df8 	.word	0x08005df8
 8000a04:	20001330 	.word	0x20001330
 8000a08:	08005df0 	.word	0x08005df0
 8000a0c:	20000ae0 	.word	0x20000ae0
 8000a10:	08005de4 	.word	0x08005de4
 8000a14:	20000c28 	.word	0x20000c28
 8000a18:	08005de8 	.word	0x08005de8
 8000a1c:	20000d70 	.word	0x20000d70
 8000a20:	08005de0 	.word	0x08005de0
 8000a24:	20000eb8 	.word	0x20000eb8
 8000a28:	20000810 	.word	0x20000810
 8000a2c:	08005df4 	.word	0x08005df4

08000a30 <chSemSignalWait.constprop.47.4289>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 8000a30:	b510      	push	{r4, lr}
 8000a32:	2320      	movs	r3, #32
 8000a34:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((spw->s_cnt >= (cnt_t)0) && queue_isempty(&spw->s_queue)) ||
              ((spw->s_cnt < (cnt_t)0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
 8000a38:	4c14      	ldr	r4, [pc, #80]	; (8000a8c <chSemSignalWait.constprop.47.4289+0x5c>)
 8000a3a:	68a3      	ldr	r3, [r4, #8]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	60a3      	str	r3, [r4, #8]
 8000a42:	dd18      	ble.n	8000a76 <chSemSignalWait.constprop.47.4289+0x46>
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
 8000a44:	3b01      	subs	r3, #1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	60a3      	str	r3, [r4, #8]
 8000a4a:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <chSemSignalWait.constprop.47.4289+0x5c>)
 8000a4c:	db06      	blt.n	8000a5c <chSemSignalWait.constprop.47.4289+0x2c>
    ctp->p_u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->p_u.rdymsg;
  }
  else {
    chSchRescheduleS();
 8000a4e:	f004 fadf 	bl	8005010 <chSchRescheduleS>
    msg = MSG_OK;
 8000a52:	2000      	movs	r0, #0
 8000a54:	2300      	movs	r3, #0
 8000a56:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 8000a5a:	bd10      	pop	{r4, pc}
  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
    thread_t *ctp = currp;
 8000a5c:	490c      	ldr	r1, [pc, #48]	; (8000a90 <chSemSignalWait.constprop.47.4289+0x60>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8000a5e:	6853      	ldr	r3, [r2, #4]
 8000a60:	698c      	ldr	r4, [r1, #24]
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
 8000a62:	2005      	movs	r0, #5
 8000a64:	e884 000c 	stmia.w	r4, {r2, r3}
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
    thread_t *ctp = currp;
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtsemp = spw;
 8000a68:	6222      	str	r2, [r4, #32]
  tp->p_prev->p_next = tp;
 8000a6a:	601c      	str	r4, [r3, #0]
  tqp->p_prev = tp;
 8000a6c:	6054      	str	r4, [r2, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 8000a6e:	f004 fb8f 	bl	8005190 <chSchGoSleepS>
    msg = ctp->p_u.rdymsg;
 8000a72:	6a20      	ldr	r0, [r4, #32]
 8000a74:	e7ee      	b.n	8000a54 <chSemSignalWait.constprop.47.4289+0x24>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000a76:	6820      	ldr	r0, [r4, #0]

  tqp->p_next = tp->p_next;
 8000a78:	6803      	ldr	r3, [r0, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000a7a:	605c      	str	r4, [r3, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000a7c:	6023      	str	r3, [r4, #0]
              ((spw->s_cnt < (cnt_t)0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
 8000a7e:	f004 fbdf 	bl	8005240 <chSchReadyI>
 8000a82:	2200      	movs	r2, #0
 8000a84:	68a3      	ldr	r3, [r4, #8]
 8000a86:	6202      	str	r2, [r0, #32]
 8000a88:	e7dc      	b.n	8000a44 <chSemSignalWait.constprop.47.4289+0x14>
 8000a8a:	bf00      	nop
 8000a8c:	20000824 	.word	0x20000824
 8000a90:	200011e0 	.word	0x200011e0
 8000a94:	f3af 8000 	nop.w
 8000a98:	f3af 8000 	nop.w
 8000a9c:	f3af 8000 	nop.w

08000aa0 <sem3_execute.8268>:
  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
}

static void sem3_execute(void) {
 8000aa0:	b530      	push	{r4, r5, lr}
 8000aa2:	4a20      	ldr	r2, [pc, #128]	; (8000b24 <sem3_execute.8268+0x84>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8000aa4:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <sem3_execute.8268+0x88>)
 8000aa6:	6992      	ldr	r2, [r2, #24]
 8000aa8:	4820      	ldr	r0, [pc, #128]	; (8000b2c <sem3_execute.8268+0x8c>)
 8000aaa:	6892      	ldr	r2, [r2, #8]
 *
 * @notapi
 */
static inline bool queue_isempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (const thread_t *)tqp);
 8000aac:	4c20      	ldr	r4, [pc, #128]	; (8000b30 <sem3_execute.8268+0x90>)
  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
}

static void sem3_execute(void) {
 8000aae:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8000ab0:	2500      	movs	r5, #0
 8000ab2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000ab6:	3201      	adds	r2, #1
 8000ab8:	9500      	str	r5, [sp, #0]
 8000aba:	f004 fb29 	bl	8005110 <chThdCreateStatic>
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <sem3_execute.8268+0x94>)
 8000ac0:	6018      	str	r0, [r3, #0]
  chSemSignalWait(&sem1, &sem1);
 8000ac2:	f7ff ffb5 	bl	8000a30 <chSemSignalWait.constprop.47.4289>
 8000ac6:	6821      	ldr	r1, [r4, #0]
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
 8000ac8:	2001      	movs	r0, #1
 8000aca:	1b0b      	subs	r3, r1, r4
 8000acc:	4259      	negs	r1, r3
 8000ace:	4159      	adcs	r1, r3
 8000ad0:	f002 fdc6 	bl	8003660 <_test_assert>
 8000ad4:	b108      	cbz	r0, 8000ada <sem3_execute.8268+0x3a>
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
}
 8000ad6:	b003      	add	sp, #12
 8000ad8:	bd30      	pop	{r4, r5, pc}
static void sem3_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
  chSemSignalWait(&sem1, &sem1);
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");
 8000ada:	68a1      	ldr	r1, [r4, #8]
 8000adc:	2002      	movs	r0, #2
 8000ade:	ebb1 0c05 	subs.w	ip, r1, r5
 8000ae2:	f1dc 0100 	rsbs	r1, ip, #0
 8000ae6:	eb51 010c 	adcs.w	r1, r1, ip
 8000aea:	f002 fdb9 	bl	8003660 <_test_assert>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	d1f1      	bne.n	8000ad6 <sem3_execute.8268+0x36>

  chSemSignalWait(&sem1, &sem1);
 8000af2:	f7ff ff9d 	bl	8000a30 <chSemSignalWait.constprop.47.4289>
 8000af6:	6821      	ldr	r1, [r4, #0]
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
 8000af8:	2003      	movs	r0, #3
 8000afa:	ebb1 0e04 	subs.w	lr, r1, r4
 8000afe:	f1de 0100 	rsbs	r1, lr, #0
 8000b02:	eb51 010e 	adcs.w	r1, r1, lr
 8000b06:	f002 fdab 	bl	8003660 <_test_assert>
 8000b0a:	2800      	cmp	r0, #0
 8000b0c:	d1e3      	bne.n	8000ad6 <sem3_execute.8268+0x36>
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 8000b0e:	68a1      	ldr	r1, [r4, #8]
 8000b10:	2004      	movs	r0, #4
 8000b12:	1b4a      	subs	r2, r1, r5
 8000b14:	4251      	negs	r1, r2
 8000b16:	4151      	adcs	r1, r2
}
 8000b18:	b003      	add	sp, #12
 8000b1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 8000b1e:	f002 bd9f 	b.w	8003660 <_test_assert>
 8000b22:	bf00      	nop
 8000b24:	200011e0 	.word	0x200011e0
 8000b28:	08003571 	.word	0x08003571
 8000b2c:	20000998 	.word	0x20000998
 8000b30:	20000824 	.word	0x20000824
 8000b34:	20001330 	.word	0x20001330
 8000b38:	f3af 8000 	nop.w
 8000b3c:	f3af 8000 	nop.w

08000b40 <thread4.9738>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <thread4.9738+0x20>)
 * the thread is awakened as fast is possible by the tester thread.<br>
 * The Context Switch performance is calculated by measuring the number of
 * iterations after a second of continuous operations.
 */

static THD_FUNCTION(thread4, p) {
 8000b42:	b510      	push	{r4, lr}
 8000b44:	699c      	ldr	r4, [r3, #24]
 8000b46:	2320      	movs	r3, #32
 8000b48:	f383 8811 	msr	BASEPRI, r3
  thread_t *self = chThdGetSelfX();

  (void)p;
  chSysLock();
  do {
    chSchGoSleepS(CH_STATE_SUSPENDED);
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f004 fb1f 	bl	8005190 <chSchGoSleepS>
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
 8000b52:	6a23      	ldr	r3, [r4, #32]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d0f9      	beq.n	8000b4c <thread4.9738+0xc>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f383 8811 	msr	BASEPRI, r3
 8000b5e:	bd10      	pop	{r4, pc}
 8000b60:	200011e0 	.word	0x200011e0
 8000b64:	f3af 8000 	nop.w
 8000b68:	f3af 8000 	nop.w
 8000b6c:	f3af 8000 	nop.w

08000b70 <thread10.8446.4295>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread10, p) {
 8000b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b72:	4607      	mov	r7, r0

  chMtxLock(&m1);
 8000b74:	4815      	ldr	r0, [pc, #84]	; (8000bcc <thread10.8446.4295+0x5c>)
 8000b76:	f004 fca3 	bl	80054c0 <chMtxLock>
 8000b7a:	2320      	movs	r3, #32
 8000b7c:	f383 8811 	msr	BASEPRI, r3
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
  thread_t *ctp = currp;
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <thread10.8446.4295+0x60>)
 8000b82:	699c      	ldr	r4, [r3, #24]
 *
 * @sclass
 */
static inline mutex_t *chMtxGetNextMutexS(void) {

  return chThdGetSelfX()->p_mtxlist;
 8000b84:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  chDbgCheck(cp != NULL);
  chDbgAssert(ctp->p_mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 8000b86:	4630      	mov	r0, r6
 8000b88:	f004 fbe2 	bl	8005350 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  ctp->p_u.wtobjp = cp;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <thread10.8446.4295+0x64>)
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8000b8e:	461d      	mov	r5, r3
 8000b90:	6223      	str	r3, [r4, #32]
  do {
    cp = cp->p_next;
 8000b92:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8000b94:	42ab      	cmp	r3, r5
 8000b96:	d003      	beq.n	8000ba0 <thread10.8446.4295+0x30>
 8000b98:	6899      	ldr	r1, [r3, #8]
 8000b9a:	68a2      	ldr	r2, [r4, #8]
 8000b9c:	4291      	cmp	r1, r2
 8000b9e:	d2f8      	bcs.n	8000b92 <thread10.8446.4295+0x22>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000ba0:	685a      	ldr	r2, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8000ba2:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8000ba4:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8000ba6:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8000ba8:	605c      	str	r4, [r3, #4]
  queue_prio_insert(ctp, &cp->c_queue);
  chSchGoSleepS(CH_STATE_WTCOND);
 8000baa:	2007      	movs	r0, #7
 8000bac:	f004 faf0 	bl	8005190 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
  chMtxLockS(mp);
 8000bb0:	4630      	mov	r0, r6
 8000bb2:	f004 fc25 	bl	8005400 <chMtxLockS>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f383 8811 	msr	BASEPRI, r3
  chCondWait(&c1);
  test_emit_token(*(char *)p);
 8000bbc:	7838      	ldrb	r0, [r7, #0]
 8000bbe:	f002 fe4f 	bl	8003860 <test_emit_token>
  chMtxUnlock(&m1);
 8000bc2:	4802      	ldr	r0, [pc, #8]	; (8000bcc <thread10.8446.4295+0x5c>)
}
 8000bc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
static THD_FUNCTION(thread10, p) {

  chMtxLock(&m1);
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
 8000bc8:	f004 bbea 	b.w	80053a0 <chMtxUnlock>
 8000bcc:	200008a4 	.word	0x200008a4
 8000bd0:	200011e0 	.word	0x200011e0
 8000bd4:	20000810 	.word	0x20000810
 8000bd8:	f3af 8000 	nop.w
 8000bdc:	f3af 8000 	nop.w

08000be0 <thread8.9732>:
 * variable and yields.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static THD_FUNCTION(thread8, p) {
 8000be0:	b538      	push	{r3, r4, r5, lr}
 8000be2:	4d0a      	ldr	r5, [pc, #40]	; (8000c0c <thread8.9732+0x2c>)
 8000be4:	4604      	mov	r4, r0

  do {
    chThdYield();
 8000be6:	f004 f993 	bl	8004f10 <chThdYield>
    chThdYield();
 8000bea:	f004 f991 	bl	8004f10 <chThdYield>
    chThdYield();
 8000bee:	f004 f98f 	bl	8004f10 <chThdYield>
    chThdYield();
 8000bf2:	f004 f98d 	bl	8004f10 <chThdYield>
    (*(uint32_t *)p) += 4;
 8000bf6:	6822      	ldr	r2, [r4, #0]
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8000bf8:	69ab      	ldr	r3, [r5, #24]
 8000bfa:	3204      	adds	r2, #4
 8000bfc:	6022      	str	r2, [r4, #0]
 8000bfe:	7f5b      	ldrb	r3, [r3, #29]
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
 8000c00:	f003 0304 	and.w	r3, r3, #4
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d0ed      	beq.n	8000be6 <thread8.9732+0x6>
}
 8000c0a:	bd38      	pop	{r3, r4, r5, pc}
 8000c0c:	200011e0 	.word	0x200011e0

08000c10 <thread3.9735>:
 * continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static THD_FUNCTION(thread3, p) {
 8000c10:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8000c12:	4c06      	ldr	r4, [pc, #24]	; (8000c2c <thread3.9735+0x1c>)
 8000c14:	e002      	b.n	8000c1c <thread3.9735+0xc>

  (void)p;
  while (!chThdShouldTerminateX())
    chSemWait(&sem1);
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <thread3.9735+0x20>)
 8000c18:	f004 faf2 	bl	8005200 <chSemWait>
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8000c1c:	69a3      	ldr	r3, [r4, #24]
 8000c1e:	7f5b      	ldrb	r3, [r3, #29]
 */

static THD_FUNCTION(thread3, p) {

  (void)p;
  while (!chThdShouldTerminateX())
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0f5      	beq.n	8000c16 <thread3.9735+0x6>
 8000c2a:	bd10      	pop	{r4, pc}
 8000c2c:	200011e0 	.word	0x200011e0
 8000c30:	20000918 	.word	0x20000918
 8000c34:	f3af 8000 	nop.w
 8000c38:	f3af 8000 	nop.w
 8000c3c:	f3af 8000 	nop.w

08000c40 <bmk13_execute.9744>:
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {

  test_print("--- System: ");
 8000c40:	f645 50fc 	movw	r0, #24060	; 0x5dfc
 *
 * <h2>Description</h2>
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {
 8000c44:	b510      	push	{r4, lr}

  test_print("--- System: ");
 8000c46:	f6c0 0000 	movt	r0, #2048	; 0x800
  test_printn(sizeof(ch_system_t));
  test_println(" bytes");
 8000c4a:	f645 640c 	movw	r4, #24076	; 0x5e0c
 8000c4e:	f6c0 0400 	movt	r4, #2048	; 0x800
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {

  test_print("--- System: ");
 8000c52:	f002 fe95 	bl	8003980 <test_print>
  test_printn(sizeof(ch_system_t));
 8000c56:	f44f 70a8 	mov.w	r0, #336	; 0x150
 8000c5a:	f002 fea1 	bl	80039a0 <test_printn>
  test_println(" bytes");
 8000c5e:	4620      	mov	r0, r4
 8000c60:	f002 fe76 	bl	8003950 <test_println>
  test_print("--- Thread: ");
 8000c64:	f645 6014 	movw	r0, #24084	; 0x5e14
 8000c68:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000c6c:	f002 fe88 	bl	8003980 <test_print>
  test_printn(sizeof(thread_t));
 8000c70:	2044      	movs	r0, #68	; 0x44
 8000c72:	f002 fe95 	bl	80039a0 <test_printn>
  test_println(" bytes");
 8000c76:	4620      	mov	r0, r4
 8000c78:	f002 fe6a 	bl	8003950 <test_println>
  test_print("--- Timer : ");
 8000c7c:	f645 6024 	movw	r0, #24100	; 0x5e24
 8000c80:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000c84:	f002 fe7c 	bl	8003980 <test_print>
  test_printn(sizeof(virtual_timer_t));
 8000c88:	2014      	movs	r0, #20
 8000c8a:	f002 fe89 	bl	80039a0 <test_printn>
  test_println(" bytes");
 8000c8e:	4620      	mov	r0, r4
 8000c90:	f002 fe5e 	bl	8003950 <test_println>
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
  test_print("--- Semaph: ");
 8000c94:	f645 6034 	movw	r0, #24116	; 0x5e34
 8000c98:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000c9c:	f002 fe70 	bl	8003980 <test_print>
  test_printn(sizeof(semaphore_t));
 8000ca0:	200c      	movs	r0, #12
 8000ca2:	f002 fe7d 	bl	80039a0 <test_printn>
  test_println(" bytes");
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	f002 fe52 	bl	8003950 <test_println>
#endif
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
  test_print("--- EventS: ");
 8000cac:	f645 6044 	movw	r0, #24132	; 0x5e44
 8000cb0:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000cb4:	f002 fe64 	bl	8003980 <test_print>
  test_printn(sizeof(event_source_t));
 8000cb8:	2004      	movs	r0, #4
 8000cba:	f002 fe71 	bl	80039a0 <test_printn>
  test_println(" bytes");
 8000cbe:	4620      	mov	r0, r4
 8000cc0:	f002 fe46 	bl	8003950 <test_println>
  test_print("--- EventL: ");
 8000cc4:	f645 6054 	movw	r0, #24148	; 0x5e54
 8000cc8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000ccc:	f002 fe58 	bl	8003980 <test_print>
  test_printn(sizeof(event_listener_t));
 8000cd0:	2014      	movs	r0, #20
 8000cd2:	f002 fe65 	bl	80039a0 <test_printn>
  test_println(" bytes");
 8000cd6:	4620      	mov	r0, r4
 8000cd8:	f002 fe3a 	bl	8003950 <test_println>
#endif
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  test_print("--- Mutex : ");
 8000cdc:	f645 6064 	movw	r0, #24164	; 0x5e64
 8000ce0:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000ce4:	f002 fe4c 	bl	8003980 <test_print>
  test_printn(sizeof(mutex_t));
 8000ce8:	2010      	movs	r0, #16
 8000cea:	f002 fe59 	bl	80039a0 <test_printn>
  test_println(" bytes");
 8000cee:	4620      	mov	r0, r4
 8000cf0:	f002 fe2e 	bl	8003950 <test_println>
#endif
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
  test_print("--- CondV.: ");
 8000cf4:	f645 6074 	movw	r0, #24180	; 0x5e74
 8000cf8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000cfc:	f002 fe40 	bl	8003980 <test_print>
  test_printn(sizeof(condition_variable_t));
 8000d00:	2008      	movs	r0, #8
 8000d02:	f002 fe4d 	bl	80039a0 <test_printn>
  test_println(" bytes");
 8000d06:	4620      	mov	r0, r4
 8000d08:	f002 fe22 	bl	8003950 <test_println>
#endif
#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)
  test_print("--- Queue : ");
 8000d0c:	f645 6084 	movw	r0, #24196	; 0x5e84
 8000d10:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000d14:	f002 fe34 	bl	8003980 <test_print>
  test_printn(sizeof(io_queue_t));
 8000d18:	2024      	movs	r0, #36	; 0x24
 8000d1a:	f002 fe41 	bl	80039a0 <test_printn>
  test_println(" bytes");
 8000d1e:	4620      	mov	r0, r4
 8000d20:	f002 fe16 	bl	8003950 <test_println>
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
 8000d24:	f645 6094 	movw	r0, #24212	; 0x5e94
 8000d28:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000d2c:	f002 fe28 	bl	8003980 <test_print>
  test_printn(sizeof(mailbox_t));
 8000d30:	2028      	movs	r0, #40	; 0x28
 8000d32:	f002 fe35 	bl	80039a0 <test_printn>
  test_println(" bytes");
 8000d36:	4620      	mov	r0, r4
#endif
}
 8000d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_println(" bytes");
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
  test_printn(sizeof(mailbox_t));
  test_println(" bytes");
 8000d3c:	f002 be08 	b.w	8003950 <test_println>

08000d40 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8000d40:	b4f0      	push	{r4, r5, r6, r7}
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000d42:	4d1e      	ldr	r5, [pc, #120]	; (8000dbc <chVTDoSetI+0x7c>)
 8000d44:	462e      	mov	r6, r5
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000d46:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8000d4a:	f856 4f1c 	ldr.w	r4, [r6, #28]!
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8000d4e:	6103      	str	r3, [r0, #16]
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000d50:	2901      	cmp	r1, #1
 8000d52:	bf98      	it	ls
 8000d54:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000d56:	42b4      	cmp	r4, r6

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 8000d58:	60c2      	str	r2, [r0, #12]
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000d5c:	d021      	beq.n	8000da2 <chVTDoSetI+0x62>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.vt_next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.vt_lasttime + delay;
 8000d5e:	6aae      	ldr	r6, [r5, #40]	; 0x28

    if (delta < now - ch.vtlist.vt_lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
 8000d60:	68a2      	ldr	r2, [r4, #8]
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.vt_next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.vt_lasttime + delay;
 8000d62:	1b9b      	subs	r3, r3, r6

    if (delta < now - ch.vtlist.vt_lasttime) {
 8000d64:	18cb      	adds	r3, r1, r3
 8000d66:	d218      	bcs.n	8000d9a <chVTDoSetI+0x5a>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
      p = p->vt_next;
    }
    else if (delta < p->vt_delta) {
 8000d68:	4293      	cmp	r3, r2
     /* A small delay that will become the first element in the delta list
        and next deadline.*/
      port_timer_set_alarm(ch.vtlist.vt_lasttime + delta);
 8000d6a:	bf3c      	itt	cc
 8000d6c:	199e      	addcc	r6, r3, r6
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000d6e:	637e      	strcc	r6, [r7, #52]	; 0x34
  p = ch.vtlist.vt_next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delta) {
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d904      	bls.n	8000d7e <chVTDoSetI+0x3e>
    delta -= p->vt_delta;
    p = p->vt_next;
 8000d74:	6824      	ldr	r4, [r4, #0]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 8000d76:	1a9b      	subs	r3, r3, r2
  p = ch.vtlist.vt_next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delta) {
 8000d78:	68a2      	ldr	r2, [r4, #8]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d3fa      	bcc.n	8000d74 <chVTDoSetI+0x34>
  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
  p->vt_prev = vtp;
  vtp->vt_delta = delta
 8000d7e:	6083      	str	r3, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8000d80:	68a1      	ldr	r1, [r4, #8]
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8000d82:	6862      	ldr	r2, [r4, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8000d84:	6004      	str	r4, [r0, #0]
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8000d86:	1acb      	subs	r3, r1, r3
 8000d88:	60a3      	str	r3, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8000d8e:	6042      	str	r2, [r0, #4]
  vtp->vt_prev->vt_next = vtp;
 8000d90:	6010      	str	r0, [r2, #0]
  p->vt_prev = vtp;
 8000d92:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
  ch.vtlist.vt_delta = (systime_t)-1;
 8000d94:	626b      	str	r3, [r5, #36]	; 0x24
}
 8000d96:	bcf0      	pop	{r4, r5, r6, r7}
 8000d98:	4770      	bx	lr
    if (delta < now - ch.vtlist.vt_lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
      p = p->vt_next;
 8000d9a:	6824      	ldr	r4, [r4, #0]

    if (delta < now - ch.vtlist.vt_lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
 8000d9c:	1a9b      	subs	r3, r3, r2
 8000d9e:	68a2      	ldr	r2, [r4, #8]
 8000da0:	e7e6      	b.n	8000d70 <chVTDoSetI+0x30>
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 8000da2:	62ab      	str	r3, [r5, #40]	; 0x28
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8000da4:	18ca      	adds	r2, r1, r3
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  STM32_ST_TIM->SR     = 0;
 8000da6:	2300      	movs	r3, #0
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 8000da8:	61e8      	str	r0, [r5, #28]
      ch.vtlist.vt_prev = vtp;
 8000daa:	6228      	str	r0, [r5, #32]
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 8000dac:	6004      	str	r4, [r0, #0]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000dae:	6044      	str	r4, [r0, #4]
      vtp->vt_delta = delay;
 8000db0:	6081      	str	r1, [r0, #8]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000db2:	637a      	str	r2, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8000db4:	613b      	str	r3, [r7, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000db6:	2302      	movs	r3, #2
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	e7ec      	b.n	8000d96 <chVTDoSetI+0x56>
 8000dbc:	200011e0 	.word	0x200011e0

08000dc0 <chThdCreateFromHeap.constprop.51>:
 *                      the thread into the working space area.
 * @retval NULL         if the memory cannot be allocated.
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 8000dc0:	b570      	push	{r4, r5, r6, lr}
 8000dc2:	4606      	mov	r6, r0
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	460d      	mov	r5, r1
                              tprio_t prio, tfunc_t pf, void *arg) {
  void *wsp;
  thread_t *tp;

  wsp = chHeapAlloc(heapp, size);
 8000dc8:	480e      	ldr	r0, [pc, #56]	; (8000e04 <chThdCreateFromHeap.constprop.51+0x44>)
 8000dca:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000dce:	f004 fb87 	bl	80054e0 <chHeapAlloc>
  if (wsp == NULL) {
 8000dd2:	4604      	mov	r4, r0
 8000dd4:	b190      	cbz	r0, 8000dfc <chThdCreateFromHeap.constprop.51+0x3c>
 8000dd6:	2320      	movs	r3, #32
 8000dd8:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <chThdCreateFromHeap.constprop.51+0x48>)
 8000dde:	9500      	str	r5, [sp, #0]
 8000de0:	4632      	mov	r2, r6
 8000de2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000de6:	f004 f8bb 	bl	8004f60 <chThdCreateI>
  tp->p_flags = CH_FLAG_MODE_HEAP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	7743      	strb	r3, [r0, #29]
  chSchWakeupS(tp, MSG_OK);
 8000dee:	2100      	movs	r1, #0
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
 8000df0:	4604      	mov	r4, r0
  tp->p_flags = CH_FLAG_MODE_HEAP;
  chSchWakeupS(tp, MSG_OK);
 8000df2:	f004 f945 	bl	8005080 <chSchWakeupS>
 8000df6:	2300      	movs	r3, #0
 8000df8:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	b002      	add	sp, #8
 8000e00:	bd70      	pop	{r4, r5, r6, pc}
 8000e02:	bf00      	nop
 8000e04:	200008d8 	.word	0x200008d8
 8000e08:	08003881 	.word	0x08003881
 8000e0c:	f3af 8000 	nop.w

08000e10 <dyn1_execute.9306>:
static void dyn1_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn1_execute(void) {
 8000e10:	b570      	push	{r4, r5, r6, lr}
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8000e12:	4b2c      	ldr	r3, [pc, #176]	; (8000ec4 <dyn1_execute.9306+0xb4>)
  size_t n, sz;
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
 8000e14:	482c      	ldr	r0, [pc, #176]	; (8000ec8 <dyn1_execute.9306+0xb8>)
 8000e16:	699b      	ldr	r3, [r3, #24]
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8000e18:	4c2c      	ldr	r4, [pc, #176]	; (8000ecc <dyn1_execute.9306+0xbc>)
 8000e1a:	689d      	ldr	r5, [r3, #8]
static void dyn1_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn1_execute(void) {
 8000e1c:	b082      	sub	sp, #8
  size_t n, sz;
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
 8000e1e:	a901      	add	r1, sp, #4
 8000e20:	f002 fe9e 	bl	8003b60 <chHeapStatus>
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8000e24:	492a      	ldr	r1, [pc, #168]	; (8000ed0 <dyn1_execute.9306+0xc0>)
 8000e26:	1e68      	subs	r0, r5, #1
 8000e28:	f7ff ffca 	bl	8000dc0 <chThdCreateFromHeap.constprop.51>
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8000e2c:	4929      	ldr	r1, [pc, #164]	; (8000ed4 <dyn1_execute.9306+0xc4>)
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8000e2e:	6020      	str	r0, [r4, #0]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8000e30:	1ea8      	subs	r0, r5, #2
 8000e32:	f7ff ffc5 	bl	8000dc0 <chThdCreateFromHeap.constprop.51>
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 8000e36:	4669      	mov	r1, sp
  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8000e38:	6060      	str	r0, [r4, #4]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 8000e3a:	4823      	ldr	r0, [pc, #140]	; (8000ec8 <dyn1_execute.9306+0xb8>)
 8000e3c:	f002 fe90 	bl	8003b60 <chHeapStatus>
  p1 = chHeapAlloc(&heap1, n);
 8000e40:	9900      	ldr	r1, [sp, #0]
 8000e42:	4821      	ldr	r0, [pc, #132]	; (8000ec8 <dyn1_execute.9306+0xb8>)
 8000e44:	f004 fb4c 	bl	80054e0 <chHeapAlloc>
  threads[2] = chThdCreateFromHeap(&heap1,
 8000e48:	4923      	ldr	r1, [pc, #140]	; (8000ed8 <dyn1_execute.9306+0xc8>)
  threads[1] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
  p1 = chHeapAlloc(&heap1, n);
 8000e4a:	4606      	mov	r6, r0
  threads[2] = chThdCreateFromHeap(&heap1,
 8000e4c:	1ee8      	subs	r0, r5, #3
 8000e4e:	f7ff ffb7 	bl	8000dc0 <chThdCreateFromHeap.constprop.51>
 8000e52:	60a0      	str	r0, [r4, #8]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);
 8000e54:	4630      	mov	r0, r6
 8000e56:	f002 fea3 	bl	8003ba0 <chHeapFree>

  test_assert(1, (threads[0] != NULL) &&
 8000e5a:	6821      	ldr	r1, [r4, #0]
 8000e5c:	b129      	cbz	r1, 8000e6a <dyn1_execute.9306+0x5a>
 8000e5e:	6861      	ldr	r1, [r4, #4]
 8000e60:	b119      	cbz	r1, 8000e6a <dyn1_execute.9306+0x5a>
 8000e62:	68a1      	ldr	r1, [r4, #8]
 8000e64:	2900      	cmp	r1, #0
 8000e66:	d023      	beq.n	8000eb0 <dyn1_execute.9306+0xa0>
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f002 fbf8 	bl	8003660 <_test_assert>
 8000e70:	b108      	cbz	r0, 8000e76 <dyn1_execute.9306+0x66>
  test_assert_sequence(2, "AB");

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
  test_assert(4, n == sz, "heap size changed");
}
 8000e72:	b002      	add	sp, #8
 8000e74:	bd70      	pop	{r4, r5, r6, pc}
                 (threads[3] == NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 8000e76:	f003 f88b 	bl	8003f90 <test_wait_threads>
  test_assert_sequence(2, "AB");
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	4917      	ldr	r1, [pc, #92]	; (8000edc <dyn1_execute.9306+0xcc>)
 8000e7e:	f002 fbbf 	bl	8003600 <_test_assert_sequence>
 8000e82:	2800      	cmp	r0, #0
 8000e84:	d1f5      	bne.n	8000e72 <dyn1_execute.9306+0x62>

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
 8000e86:	4669      	mov	r1, sp
 8000e88:	480f      	ldr	r0, [pc, #60]	; (8000ec8 <dyn1_execute.9306+0xb8>)
 8000e8a:	f002 fe69 	bl	8003b60 <chHeapStatus>
 8000e8e:	3801      	subs	r0, #1
 8000e90:	4241      	negs	r1, r0
 8000e92:	4141      	adcs	r1, r0
 8000e94:	2003      	movs	r0, #3
 8000e96:	f002 fbe3 	bl	8003660 <_test_assert>
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	d1e9      	bne.n	8000e72 <dyn1_execute.9306+0x62>
  test_assert(4, n == sz, "heap size changed");
 8000e9e:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8000ea2:	2004      	movs	r0, #4
 8000ea4:	1aca      	subs	r2, r1, r3
 8000ea6:	4251      	negs	r1, r2
 8000ea8:	4151      	adcs	r1, r2
 8000eaa:	f002 fbd9 	bl	8003660 <_test_assert>
 8000eae:	e7e0      	b.n	8000e72 <dyn1_execute.9306+0x62>
  threads[2] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);

  test_assert(1, (threads[0] != NULL) &&
 8000eb0:	68e3      	ldr	r3, [r4, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1d9      	bne.n	8000e6a <dyn1_execute.9306+0x5a>
 8000eb6:	6921      	ldr	r1, [r4, #16]
 8000eb8:	f1d1 0101 	rsbs	r1, r1, #1
 8000ebc:	bf38      	it	cc
 8000ebe:	2100      	movcc	r1, #0
 8000ec0:	e7d3      	b.n	8000e6a <dyn1_execute.9306+0x5a>
 8000ec2:	bf00      	nop
 8000ec4:	200011e0 	.word	0x200011e0
 8000ec8:	200008d8 	.word	0x200008d8
 8000ecc:	20001330 	.word	0x20001330
 8000ed0:	08005de0 	.word	0x08005de0
 8000ed4:	08005de8 	.word	0x08005de8
 8000ed8:	08005de4 	.word	0x08005de4
 8000edc:	08005ea4 	.word	0x08005ea4

08000ee0 <chThdCreateFromMemoryPool.constprop.50>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8000ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8000ee2:	4c0f      	ldr	r4, [pc, #60]	; (8000f20 <chThdCreateFromMemoryPool.constprop.50+0x40>)
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	4606      	mov	r6, r0
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8000ee8:	4620      	mov	r0, r4
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8000eea:	460f      	mov	r7, r1
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8000eec:	f002 fe20 	bl	8003b30 <chPoolAlloc>
  if (wsp == NULL) {
 8000ef0:	4605      	mov	r5, r0
 8000ef2:	b190      	cbz	r0, 8000f1a <chThdCreateFromMemoryPool.constprop.50+0x3a>
 8000ef4:	2320      	movs	r3, #32
 8000ef6:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + mp->mp_object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <chThdCreateFromMemoryPool.constprop.50+0x44>)
 8000efc:	6861      	ldr	r1, [r4, #4]
 8000efe:	9700      	str	r7, [sp, #0]
 8000f00:	4632      	mov	r2, r6
 8000f02:	f004 f82d 	bl	8004f60 <chThdCreateI>
  tp->p_flags = CH_FLAG_MODE_MPOOL;
 8000f06:	2302      	movs	r3, #2
 8000f08:	7743      	strb	r3, [r0, #29]
  tp->p_mpool = mp;
 8000f0a:	6404      	str	r4, [r0, #64]	; 0x40
  chSchWakeupS(tp, MSG_OK);
 8000f0c:	2100      	movs	r1, #0
                  (uint8_t *)wsp + mp->mp_object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
 8000f0e:	4605      	mov	r5, r0
  tp->p_flags = CH_FLAG_MODE_MPOOL;
  tp->p_mpool = mp;
  chSchWakeupS(tp, MSG_OK);
 8000f10:	f004 f8b6 	bl	8005080 <chSchWakeupS>
 8000f14:	2300      	movs	r3, #0
 8000f16:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8000f1a:	4628      	mov	r0, r5
 8000f1c:	b003      	add	sp, #12
 8000f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f20:	200008f8 	.word	0x200008f8
 8000f24:	08003881 	.word	0x08003881
 8000f28:	f3af 8000 	nop.w
 8000f2c:	f3af 8000 	nop.w

08000f30 <chEvtGetAndClearEvents.constprop.37>:
 8000f30:	2320      	movs	r3, #32
 8000f32:	f383 8811 	msr	BASEPRI, r3
 */
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();
  m = currp->p_epending & events;
 8000f36:	f241 13e0 	movw	r3, #4576	; 0x11e0
 8000f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
  currp->p_epending &= ~events;
 8000f3e:	2200      	movs	r2, #0
 */
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();
  m = currp->p_epending & events;
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	6b58      	ldr	r0, [r3, #52]	; 0x34
  currp->p_epending &= ~events;
 8000f44:	635a      	str	r2, [r3, #52]	; 0x34
 8000f46:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  return m;
}
 8000f4a:	4770      	bx	lr
 8000f4c:	f3af 8000 	nop.w

08000f50 <evt1_setup.8906>:
 * the associated event handlers are invoked in LSb-first order.
 */

static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8000f50:	f7ff bfee 	b.w	8000f30 <chEvtGetAndClearEvents.constprop.37>
 8000f54:	f3af 8000 	nop.w
 8000f58:	f3af 8000 	nop.w
 8000f5c:	f3af 8000 	nop.w

08000f60 <evt2_setup.8904>:
 * the expected time and that there are no stuck event flags.
 */

static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8000f60:	f7ff bfe6 	b.w	8000f30 <chEvtGetAndClearEvents.constprop.37>
 8000f64:	f3af 8000 	nop.w
 8000f68:	f3af 8000 	nop.w
 8000f6c:	f3af 8000 	nop.w

08000f70 <evt3_setup.8902>:
 * After each test phase the test verifies that there are no stuck event flags.
 */

static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8000f70:	f7ff bfde 	b.w	8000f30 <chEvtGetAndClearEvents.constprop.37>
 8000f74:	f3af 8000 	nop.w
 8000f78:	f3af 8000 	nop.w
 8000f7c:	f3af 8000 	nop.w

08000f80 <chEvtWaitOne.constprop.33>:
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <chEvtWaitOne.constprop.33+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
 8000f82:	b510      	push	{r4, lr}
  thread_t *ctp = currp;
 8000f84:	699c      	ldr	r4, [r3, #24]
 8000f86:	2320      	movs	r3, #32
 8000f88:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 8000f8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8000f8e:	b933      	cbnz	r3, 8000f9e <chEvtWaitOne.constprop.33+0x1e>
    ctp->p_u.ewmask = events;
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295
 8000f94:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8000f96:	200a      	movs	r0, #10
 8000f98:	f004 f8fa 	bl	8005190 <chSchGoSleepS>
    m = ctp->p_epending & events;
 8000f9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  m ^= m & (m - (eventmask_t)1);
 8000f9e:	4258      	negs	r0, r3
 8000fa0:	4018      	ands	r0, r3
  ctp->p_epending &= ~m;
 8000fa2:	ea23 0300 	bic.w	r3, r3, r0
 8000fa6:	6363      	str	r3, [r4, #52]	; 0x34
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8000fae:	bd10      	pop	{r4, pc}
 8000fb0:	200011e0 	.word	0x200011e0
 8000fb4:	f3af 8000 	nop.w
 8000fb8:	f3af 8000 	nop.w
 8000fbc:	f3af 8000 	nop.w

08000fc0 <chEvtWaitAny.constprop.32>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <chEvtWaitAny.constprop.32+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 8000fc2:	b510      	push	{r4, lr}
  thread_t *ctp = currp;
 8000fc4:	699c      	ldr	r4, [r3, #24]
 8000fc6:	2320      	movs	r3, #32
 8000fc8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 8000fcc:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8000fce:	b930      	cbnz	r0, 8000fde <chEvtWaitAny.constprop.32+0x1e>
    ctp->p_u.ewmask = events;
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295
    chSchGoSleepS(CH_STATE_WTOREVT);
 8000fd4:	200a      	movs	r0, #10
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
  if (m == (eventmask_t)0) {
    ctp->p_u.ewmask = events;
 8000fd6:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8000fd8:	f004 f8da 	bl	8005190 <chSchGoSleepS>
    m = ctp->p_epending & events;
 8000fdc:	6b60      	ldr	r0, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 8000fde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000fe0:	ea23 0300 	bic.w	r3, r3, r0
 8000fe4:	6363      	str	r3, [r4, #52]	; 0x34
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8000fec:	bd10      	pop	{r4, pc}
 8000fee:	bf00      	nop
 8000ff0:	200011e0 	.word	0x200011e0
	...

08001000 <chMBPostI.constprop.24>:
 */
static inline cnt_t chSemGetCounterI(semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->s_cnt;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <chMBPostI.constprop.24+0x34>)
 8001002:	6a59      	ldr	r1, [r3, #36]	; 0x24
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
 8001004:	2900      	cmp	r1, #0
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 8001006:	b510      	push	{r4, lr}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
 8001008:	dd10      	ble.n	800102c <chMBPostI.constprop.24+0x2c>
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 800100a:	689a      	ldr	r2, [r3, #8]
  if (mbp->mb_wrptr >= mbp->mb_top) {
 800100c:	685c      	ldr	r4, [r3, #4]
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt--;
 800100e:	3901      	subs	r1, #1
 8001010:	6259      	str	r1, [r3, #36]	; 0x24
  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8001012:	f842 0b04 	str.w	r0, [r2], #4
  if (mbp->mb_wrptr >= mbp->mb_top) {
 8001016:	42a2      	cmp	r2, r4
  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8001018:	609a      	str	r2, [r3, #8]
  if (mbp->mb_wrptr >= mbp->mb_top) {
     mbp->mb_wrptr = mbp->mb_buffer;
 800101a:	bf28      	it	cs
 800101c:	681a      	ldrcs	r2, [r3, #0]
  }
  chSemSignalI(&mbp->mb_fullsem);
 800101e:	4806      	ldr	r0, [pc, #24]	; (8001038 <chMBPostI.constprop.24+0x38>)
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
  if (mbp->mb_wrptr >= mbp->mb_top) {
     mbp->mb_wrptr = mbp->mb_buffer;
 8001020:	bf28      	it	cs
 8001022:	609a      	strcs	r2, [r3, #8]
  }
  chSemSignalI(&mbp->mb_fullsem);
 8001024:	f004 faa4 	bl	8005570 <chSemSignalI>

  return MSG_OK;
 8001028:	2000      	movs	r0, #0
 800102a:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
     mbp->mb_wrptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_fullsem);

  return MSG_OK;
}
 8001030:	bd10      	pop	{r4, pc}
 8001032:	bf00      	nop
 8001034:	20000854 	.word	0x20000854
 8001038:	20000864 	.word	0x20000864
 800103c:	f3af 8000 	nop.w

08001040 <chMBPostAheadI.constprop.22>:
 */
static inline cnt_t chSemGetCounterI(semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->s_cnt;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <chMBPostAheadI.constprop.22+0x34>)
 8001042:	6a59      	ldr	r1, [r3, #36]	; 0x24
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
 8001044:	2900      	cmp	r1, #0
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8001046:	b510      	push	{r4, lr}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
 8001048:	dd10      	ble.n	800106c <chMBPostAheadI.constprop.22+0x2c>
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer) {
 800104a:	68da      	ldr	r2, [r3, #12]
 800104c:	681c      	ldr	r4, [r3, #0]
 800104e:	3a04      	subs	r2, #4
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt--;
 8001050:	3901      	subs	r1, #1
 8001052:	42a2      	cmp	r2, r4
 8001054:	6259      	str	r1, [r3, #36]	; 0x24
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	d202      	bcs.n	8001060 <chMBPostAheadI.constprop.22+0x20>
    mbp->mb_rdptr = mbp->mb_top - 1;
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	3a04      	subs	r2, #4
 800105e:	60da      	str	r2, [r3, #12]
  }
  *mbp->mb_rdptr = msg;
 8001060:	6010      	str	r0, [r2, #0]
  chSemSignalI(&mbp->mb_fullsem);
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <chMBPostAheadI.constprop.22+0x38>)
 8001064:	f004 fa84 	bl	8005570 <chSemSignalI>

  return MSG_OK;
 8001068:	2000      	movs	r0, #0
 800106a:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
  }
  *mbp->mb_rdptr = msg;
  chSemSignalI(&mbp->mb_fullsem);

  return MSG_OK;
}
 8001070:	bd10      	pop	{r4, pc}
 8001072:	bf00      	nop
 8001074:	20000854 	.word	0x20000854
 8001078:	20000864 	.word	0x20000864
 800107c:	f3af 8000 	nop.w

08001080 <chMBFetchI.constprop.20>:
 */
static inline cnt_t chSemGetCounterI(semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->s_cnt;
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <chMBFetchI.constprop.20+0x34>)
 8001082:	6999      	ldr	r1, [r3, #24]
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
 8001084:	2900      	cmp	r1, #0
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8001086:	b510      	push	{r4, lr}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
 8001088:	dd11      	ble.n	80010ae <chMBFetchI.constprop.20+0x2e>
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 800108a:	68da      	ldr	r2, [r3, #12]
  if (mbp->mb_rdptr >= mbp->mb_top) {
 800108c:	685c      	ldr	r4, [r3, #4]
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt--;
 800108e:	3901      	subs	r1, #1
 8001090:	6199      	str	r1, [r3, #24]

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8001092:	f852 1b04 	ldr.w	r1, [r2], #4
  if (mbp->mb_rdptr >= mbp->mb_top) {
 8001096:	42a2      	cmp	r2, r4

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8001098:	6001      	str	r1, [r0, #0]
 800109a:	60da      	str	r2, [r3, #12]
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
 800109c:	bf28      	it	cs
 800109e:	681a      	ldrcs	r2, [r3, #0]
  }
  chSemSignalI(&mbp->mb_emptysem);
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <chMBFetchI.constprop.20+0x38>)
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
 80010a2:	bf28      	it	cs
 80010a4:	60da      	strcs	r2, [r3, #12]
  }
  chSemSignalI(&mbp->mb_emptysem);
 80010a6:	f004 fa63 	bl	8005570 <chSemSignalI>

  return MSG_OK;
 80010aa:	2000      	movs	r0, #0
 80010ac:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 80010ae:	f04f 30ff 	mov.w	r0, #4294967295
    mbp->mb_rdptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_emptysem);

  return MSG_OK;
}
 80010b2:	bd10      	pop	{r4, pc}
 80010b4:	20000854 	.word	0x20000854
 80010b8:	20000870 	.word	0x20000870
 80010bc:	00000000 	.word	0x00000000

080010c0 <dyn1_setup.9300>:
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 80010c0:	f640 03d8 	movw	r3, #2264	; 0x8d8
  heapp->h_free.h.u.next = hp;
 80010c4:	f640 1298 	movw	r2, #2456	; 0x998
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 80010c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
  heapp->h_free.h.u.next = hp;
 80010cc:	f2c2 0200 	movt	r2, #8192	; 0x2000

  test_emit_token(*(char *)p);
}

#if CH_CFG_USE_HEAP || defined(__DOXYGEN__)
static void dyn1_setup(void) {
 80010d0:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 80010d2:	2100      	movs	r1, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80010d4:	f103 0010 	add.w	r0, r3, #16
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 80010d8:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 80010dc:	6019      	str	r1, [r3, #0]
  heapp->h_free.h.u.next = hp;
 80010de:	609a      	str	r2, [r3, #8]
  heapp->h_free.h.size = 0;
 80010e0:	60d9      	str	r1, [r3, #12]
  hp->h.u.next = NULL;
 80010e2:	6011      	str	r1, [r2, #0]
  hp->h.size = size - sizeof(union heap_header);
 80010e4:	6054      	str	r4, [r2, #4]
 80010e6:	6118      	str	r0, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 80010e8:	6158      	str	r0, [r3, #20]
 80010ea:	6199      	str	r1, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 80010ec:	bc10      	pop	{r4}
 80010ee:	4770      	bx	lr

080010f0 <dyn3_setup.9298>:
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 80010f0:	f640 03d8 	movw	r3, #2264	; 0x8d8
  heapp->h_free.h.u.next = hp;
 80010f4:	f640 1298 	movw	r2, #2456	; 0x998
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 80010f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
  heapp->h_free.h.u.next = hp;
 80010fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ftp = chRegNextThread(ftp);
  } while (ftp != NULL);
  return found;
}

static void dyn3_setup(void) {
 8001100:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8001102:	2100      	movs	r1, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001104:	f103 0010 	add.w	r0, r3, #16
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8001108:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 800110c:	6019      	str	r1, [r3, #0]
  heapp->h_free.h.u.next = hp;
 800110e:	609a      	str	r2, [r3, #8]
  heapp->h_free.h.size = 0;
 8001110:	60d9      	str	r1, [r3, #12]
  hp->h.u.next = NULL;
 8001112:	6011      	str	r1, [r2, #0]
  hp->h.size = size - sizeof(union heap_header);
 8001114:	6054      	str	r4, [r2, #4]
 8001116:	6118      	str	r0, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 8001118:	6158      	str	r0, [r3, #20]
 800111a:	6199      	str	r1, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 800111c:	bc10      	pop	{r4}
 800111e:	4770      	bx	lr

08001120 <thread2.9741>:

  chThdExit((msg_t)p);
}

#if CH_CFG_USE_MESSAGES || defined(__DOXYGEN__)
static THD_FUNCTION(thread2, p) {
 8001120:	b570      	push	{r4, r5, r6, lr}
 8001122:	2620      	movs	r6, #32
 8001124:	2500      	movs	r5, #0
  thread_t *tp;
  msg_t msg;

  (void)p;
  do {
    tp = chMsgWait();
 8001126:	f004 f84b 	bl	80051c0 <chMsgWait>
 *
 * @api
 */
static inline msg_t chMsgGet(thread_t *tp) {

  return tp->p_msg;
 800112a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800112c:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8001130:	4621      	mov	r1, r4
 8001132:	f003 ffa5 	bl	8005080 <chSchWakeupS>
 8001136:	f385 8811 	msr	BASEPRI, r5
    msg = chMsgGet(tp);
    chMsgRelease(tp, msg);
  } while (msg);
 800113a:	2c00      	cmp	r4, #0
 800113c:	d1f3      	bne.n	8001126 <thread2.9741+0x6>
}
 800113e:	bd70      	pop	{r4, r5, r6, pc}

08001140 <pools1_execute.9168>:
static void pools1_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void pools1_execute(void) {
 8001140:	b570      	push	{r4, r5, r6, lr}
 8001142:	4b31      	ldr	r3, [pc, #196]	; (8001208 <pools1_execute.9168+0xc8>)
 8001144:	4c31      	ldr	r4, [pc, #196]	; (800120c <pools1_execute.9168+0xcc>)
 8001146:	2205      	movs	r2, #5
 8001148:	2520      	movs	r5, #32
 800114a:	2000      	movs	r0, #0
 800114c:	f385 8811 	msr	BASEPRI, r5
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8001150:	6821      	ldr	r1, [r4, #0]
  mp->mp_next = php;
 8001152:	6023      	str	r3, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8001154:	6019      	str	r1, [r3, #0]
 8001156:	f380 8811 	msr	BASEPRI, r0
  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 800115a:	6861      	ldr	r1, [r4, #4]
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 800115c:	3a01      	subs	r2, #1
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 800115e:	440b      	add	r3, r1
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 8001160:	d1f4      	bne.n	800114c <pools1_execute.9168+0xc>
 8001162:	2505      	movs	r5, #5
  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");
 8001164:	4829      	ldr	r0, [pc, #164]	; (800120c <pools1_execute.9168+0xcc>)
 8001166:	f002 fce3 	bl	8003b30 <chPoolAlloc>
 800116a:	1c01      	adds	r1, r0, #0
 800116c:	bf18      	it	ne
 800116e:	2101      	movne	r1, #1
 8001170:	2001      	movs	r0, #1
 8001172:	f002 fa75 	bl	8003660 <_test_assert>
 8001176:	2800      	cmp	r0, #0
 8001178:	d134      	bne.n	80011e4 <pools1_execute.9168+0xa4>

  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
 800117a:	3d01      	subs	r5, #1
 800117c:	d1f2      	bne.n	8001164 <pools1_execute.9168+0x24>
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");
 800117e:	4823      	ldr	r0, [pc, #140]	; (800120c <pools1_execute.9168+0xcc>)
 8001180:	f002 fcd6 	bl	8003b30 <chPoolAlloc>
 8001184:	f1d0 0101 	rsbs	r1, r0, #1
 8001188:	bf38      	it	cc
 800118a:	2100      	movcc	r1, #0
 800118c:	2002      	movs	r0, #2
 800118e:	f002 fa67 	bl	8003660 <_test_assert>
 8001192:	bb38      	cbnz	r0, 80011e4 <pools1_execute.9168+0xa4>
 8001194:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <pools1_execute.9168+0xd0>)
 8001196:	2620      	movs	r6, #32
static void pools1_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void pools1_execute(void) {
 8001198:	f103 0014 	add.w	r0, r3, #20
  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);
 800119c:	f853 2f04 	ldr.w	r2, [r3, #4]!
 80011a0:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 80011a4:	6821      	ldr	r1, [r4, #0]
 80011a6:	6011      	str	r1, [r2, #0]
  mp->mp_next = php;
 80011a8:	6022      	str	r2, [r4, #0]
 80011aa:	f385 8811 	msr	BASEPRI, r5

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
 80011ae:	4283      	cmp	r3, r0
 80011b0:	d1f4      	bne.n	800119c <pools1_execute.9168+0x5c>
 80011b2:	2405      	movs	r4, #5
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");
 80011b4:	4d15      	ldr	r5, [pc, #84]	; (800120c <pools1_execute.9168+0xcc>)
 80011b6:	4628      	mov	r0, r5
 80011b8:	f002 fcba 	bl	8003b30 <chPoolAlloc>
 80011bc:	1c01      	adds	r1, r0, #0
 80011be:	bf18      	it	ne
 80011c0:	2101      	movne	r1, #1
 80011c2:	2003      	movs	r0, #3
 80011c4:	f002 fa4c 	bl	8003660 <_test_assert>
 80011c8:	b960      	cbnz	r0, 80011e4 <pools1_execute.9168+0xa4>
  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
 80011ca:	3c01      	subs	r4, #1
 80011cc:	d1f2      	bne.n	80011b4 <pools1_execute.9168+0x74>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");
 80011ce:	4628      	mov	r0, r5
 80011d0:	f002 fcae 	bl	8003b30 <chPoolAlloc>
 80011d4:	f1d0 0101 	rsbs	r1, r0, #1
 80011d8:	bf38      	it	cc
 80011da:	2100      	movcc	r1, #0
 80011dc:	2004      	movs	r0, #4
 80011de:	f002 fa3f 	bl	8003660 <_test_assert>
 80011e2:	b100      	cbz	r0, 80011e6 <pools1_execute.9168+0xa6>
 80011e4:	bd70      	pop	{r4, r5, r6, pc}
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
 80011e6:	2310      	movs	r3, #16
 80011e8:	606b      	str	r3, [r5, #4]
  mp->mp_provider = provider;
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <pools1_execute.9168+0xd4>)
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 80011ec:	602c      	str	r4, [r5, #0]

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 80011ee:	4628      	mov	r0, r5
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 80011f0:	60ab      	str	r3, [r5, #8]
 80011f2:	f002 fc9d 	bl	8003b30 <chPoolAlloc>
 80011f6:	f1d0 0101 	rsbs	r1, r0, #1
 80011fa:	bf38      	it	cc
 80011fc:	2100      	movcc	r1, #0
 80011fe:	2005      	movs	r0, #5
}
 8001200:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8001204:	f002 ba2c 	b.w	8003660 <_test_assert>
 8001208:	20000998 	.word	0x20000998
 800120c:	20000818 	.word	0x20000818
 8001210:	08005fcc 	.word	0x08005fcc
 8001214:	080034f1 	.word	0x080034f1
 8001218:	f3af 8000 	nop.w
 800121c:	f3af 8000 	nop.w

08001220 <dyn2_execute.9302>:
 8001220:	4a30      	ldr	r2, [pc, #192]	; (80012e4 <dyn2_execute.9302+0xc4>)
 8001222:	4931      	ldr	r1, [pc, #196]	; (80012e8 <dyn2_execute.9302+0xc8>)
 8001224:	6992      	ldr	r2, [r2, #24]
static void dyn2_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void dyn2_execute(void) {
 8001226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001228:	4b30      	ldr	r3, [pc, #192]	; (80012ec <dyn2_execute.9302+0xcc>)
 800122a:	6895      	ldr	r5, [r2, #8]
 800122c:	f103 0710 	add.w	r7, r3, #16
 8001230:	2620      	movs	r6, #32
 8001232:	2000      	movs	r0, #0
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);
 8001234:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8001238:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 800123c:	680c      	ldr	r4, [r1, #0]
 800123e:	6014      	str	r4, [r2, #0]
  mp->mp_next = php;
 8001240:	600a      	str	r2, [r1, #0]
 8001242:	f380 8811 	msr	BASEPRI, r0
static void dyn2_execute(void) {
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
 8001246:	42bb      	cmp	r3, r7
 8001248:	d1f4      	bne.n	8001234 <dyn2_execute.9302+0x14>
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 800124a:	4929      	ldr	r1, [pc, #164]	; (80012f0 <dyn2_execute.9302+0xd0>)
 800124c:	4c29      	ldr	r4, [pc, #164]	; (80012f4 <dyn2_execute.9302+0xd4>)
 800124e:	1e68      	subs	r0, r5, #1
 8001250:	f7ff fe46 	bl	8000ee0 <chThdCreateFromMemoryPool.constprop.50>
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8001254:	4928      	ldr	r1, [pc, #160]	; (80012f8 <dyn2_execute.9302+0xd8>)
  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 8001256:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8001258:	1ea8      	subs	r0, r5, #2
 800125a:	f7ff fe41 	bl	8000ee0 <chThdCreateFromMemoryPool.constprop.50>
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 800125e:	4927      	ldr	r1, [pc, #156]	; (80012fc <dyn2_execute.9302+0xdc>)
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8001260:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8001262:	1ee8      	subs	r0, r5, #3
 8001264:	f7ff fe3c 	bl	8000ee0 <chThdCreateFromMemoryPool.constprop.50>
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8001268:	4925      	ldr	r1, [pc, #148]	; (8001300 <dyn2_execute.9302+0xe0>)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 800126a:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 800126c:	1f28      	subs	r0, r5, #4
 800126e:	f7ff fe37 	bl	8000ee0 <chThdCreateFromMemoryPool.constprop.50>
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8001272:	4924      	ldr	r1, [pc, #144]	; (8001304 <dyn2_execute.9302+0xe4>)

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8001274:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8001276:	1f68      	subs	r0, r5, #5
 8001278:	f7ff fe32 	bl	8000ee0 <chThdCreateFromMemoryPool.constprop.50>

  test_assert(1, (threads[0] != NULL) &&
 800127c:	6821      	ldr	r1, [r4, #0]
  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 800127e:	6120      	str	r0, [r4, #16]

  test_assert(1, (threads[0] != NULL) &&
 8001280:	b149      	cbz	r1, 8001296 <dyn2_execute.9302+0x76>
 8001282:	6861      	ldr	r1, [r4, #4]
 8001284:	b139      	cbz	r1, 8001296 <dyn2_execute.9302+0x76>
 8001286:	68a1      	ldr	r1, [r4, #8]
 8001288:	b129      	cbz	r1, 8001296 <dyn2_execute.9302+0x76>
 800128a:	68e1      	ldr	r1, [r4, #12]
 800128c:	b119      	cbz	r1, 8001296 <dyn2_execute.9302+0x76>
 800128e:	f1d0 0101 	rsbs	r1, r0, #1
 8001292:	bf38      	it	cc
 8001294:	2100      	movcc	r1, #0
 8001296:	2001      	movs	r0, #1
 8001298:	f002 f9e2 	bl	8003660 <_test_assert>
 800129c:	b100      	cbz	r0, 80012a0 <dyn2_execute.9302+0x80>
 800129e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                 (threads[3] != NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 80012a0:	f002 fe76 	bl	8003f90 <test_wait_threads>
  test_assert_sequence(2, "ABCD");
 80012a4:	2002      	movs	r0, #2
 80012a6:	4918      	ldr	r1, [pc, #96]	; (8001308 <dyn2_execute.9302+0xe8>)
 80012a8:	f002 f9aa 	bl	8003600 <_test_assert_sequence>
 80012ac:	2800      	cmp	r0, #0
 80012ae:	d1f6      	bne.n	800129e <dyn2_execute.9302+0x7e>
 80012b0:	2404      	movs	r4, #4

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
 80012b2:	480d      	ldr	r0, [pc, #52]	; (80012e8 <dyn2_execute.9302+0xc8>)
 80012b4:	f002 fc3c 	bl	8003b30 <chPoolAlloc>
 80012b8:	1c01      	adds	r1, r0, #0
 80012ba:	bf18      	it	ne
 80012bc:	2101      	movne	r1, #1
 80012be:	2003      	movs	r0, #3
 80012c0:	f002 f9ce 	bl	8003660 <_test_assert>
 80012c4:	2800      	cmp	r0, #0
 80012c6:	d1ea      	bne.n	800129e <dyn2_execute.9302+0x7e>
  /* Claiming the memory from terminated threads. */
  test_wait_threads();
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
 80012c8:	3c01      	subs	r4, #1
 80012ca:	d1f2      	bne.n	80012b2 <dyn2_execute.9302+0x92>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 80012cc:	4806      	ldr	r0, [pc, #24]	; (80012e8 <dyn2_execute.9302+0xc8>)
 80012ce:	f002 fc2f 	bl	8003b30 <chPoolAlloc>
 80012d2:	f1d0 0101 	rsbs	r1, r0, #1
 80012d6:	bf38      	it	cc
 80012d8:	2100      	movcc	r1, #0
 80012da:	2004      	movs	r0, #4
}
 80012dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 80012e0:	f002 b9be 	b.w	8003660 <_test_assert>
 80012e4:	200011e0 	.word	0x200011e0
 80012e8:	200008f8 	.word	0x200008f8
 80012ec:	08005fcc 	.word	0x08005fcc
 80012f0:	08005de0 	.word	0x08005de0
 80012f4:	20001330 	.word	0x20001330
 80012f8:	08005de8 	.word	0x08005de8
 80012fc:	08005de4 	.word	0x08005de4
 8001300:	08005df0 	.word	0x08005df0
 8001304:	08005df8 	.word	0x08005df8
 8001308:	08005eb0 	.word	0x08005eb0
 800130c:	f3af 8000 	nop.w

08001310 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8001310:	4a1a      	ldr	r2, [pc, #104]	; (800137c <chVTDoResetI+0x6c>)
 8001312:	69d3      	ldr	r3, [r2, #28]
 8001314:	4283      	cmp	r3, r0
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8001316:	b410      	push	{r4}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8001318:	d00f      	beq.n	800133a <chVTDoResetI+0x2a>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 800131a:	6841      	ldr	r1, [r0, #4]
 800131c:	6803      	ldr	r3, [r0, #0]
 800131e:	600b      	str	r3, [r1, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8001320:	6803      	ldr	r3, [r0, #0]
    vtp->vt_func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8001322:	321c      	adds	r2, #28
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8001324:	6059      	str	r1, [r3, #4]
    vtp->vt_func = NULL;
 8001326:	2100      	movs	r1, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8001328:	4293      	cmp	r3, r2
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
    vtp->vt_func = NULL;
 800132a:	60c1      	str	r1, [r0, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 800132c:	d003      	beq.n	8001336 <chVTDoResetI+0x26>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	6881      	ldr	r1, [r0, #8]
 8001332:	1852      	adds	r2, r2, r1
 8001334:	609a      	str	r2, [r3, #8]
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8001336:	bc10      	pop	{r4}
 8001338:	4770      	bx	lr

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 800133a:	6819      	ldr	r1, [r3, #0]
 800133c:	4610      	mov	r0, r2
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 800133e:	2400      	movs	r4, #0

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8001340:	f840 1f1c 	str.w	r1, [r0, #28]!
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001344:	4281      	cmp	r1, r0
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8001346:	60dc      	str	r4, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8001348:	bf08      	it	eq
 800134a:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800134e:	6048      	str	r0, [r1, #4]
 8001350:	bf08      	it	eq
 8001352:	60dc      	streq	r4, [r3, #12]
  vtp->vt_func = NULL;

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001354:	d0ef      	beq.n	8001336 <chVTDoResetI+0x26>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001356:	688c      	ldr	r4, [r1, #8]
 8001358:	689b      	ldr	r3, [r3, #8]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 800135a:	6a90      	ldr	r0, [r2, #40]	; 0x28

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 800135c:	191b      	adds	r3, r3, r4
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800135e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001362:	608b      	str	r3, [r1, #8]
 8001364:	6a51      	ldr	r1, [r2, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001366:	1a08      	subs	r0, r1, r0

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8001368:	4283      	cmp	r3, r0
 800136a:	d9e4      	bls.n	8001336 <chVTDoResetI+0x26>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 800136c:	1a1b      	subs	r3, r3, r0

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 800136e:	2b01      	cmp	r3, #1
 8001370:	bf98      	it	ls
 8001372:	2302      	movls	r3, #2
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 8001374:	185b      	adds	r3, r3, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001376:	6353      	str	r3, [r2, #52]	; 0x34
 8001378:	e7dd      	b.n	8001336 <chVTDoResetI+0x26>
 800137a:	bf00      	nop
 800137c:	200011e0 	.word	0x200011e0

08001380 <thread11.8449>:
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static THD_FUNCTION(thread11, p) {
 8001380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001384:	4680      	mov	r8, r0

  chMtxLock(&m2);
 8001386:	481c      	ldr	r0, [pc, #112]	; (80013f8 <thread11.8449+0x78>)
 8001388:	f004 f89a 	bl	80054c0 <chMtxLock>
  chMtxLock(&m1);
 800138c:	481b      	ldr	r0, [pc, #108]	; (80013fc <thread11.8449+0x7c>)
 800138e:	f004 f897 	bl	80054c0 <chMtxLock>
 8001392:	2320      	movs	r3, #32
 8001394:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001398:	4e19      	ldr	r6, [pc, #100]	; (8001400 <thread11.8449+0x80>)
 800139a:	69b3      	ldr	r3, [r6, #24]
 800139c:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  chDbgCheck((cp != NULL) && (time != TIME_IMMEDIATE));
  chDbgAssert(currp->p_mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 800139e:	4638      	mov	r0, r7
 80013a0:	f003 ffd6 	bl	8005350 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->p_u.wtobjp = cp;
 80013a4:	4b17      	ldr	r3, [pc, #92]	; (8001404 <thread11.8449+0x84>)
 80013a6:	69b2      	ldr	r2, [r6, #24]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80013a8:	461d      	mov	r5, r3
 80013aa:	6213      	str	r3, [r2, #32]
  do {
    cp = cp->p_next;
 80013ac:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80013ae:	42ab      	cmp	r3, r5
 80013b0:	d003      	beq.n	80013ba <thread11.8449+0x3a>
 80013b2:	689c      	ldr	r4, [r3, #8]
 80013b4:	6891      	ldr	r1, [r2, #8]
 80013b6:	428c      	cmp	r4, r1
 80013b8:	d2f8      	bcs.n	80013ac <thread11.8449+0x2c>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80013ba:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80013bc:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 80013be:	6051      	str	r1, [r2, #4]
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 80013c0:	2007      	movs	r0, #7
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;
 80013c2:	605a      	str	r2, [r3, #4]
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80013c4:	600a      	str	r2, [r1, #0]
 80013c6:	f003 fee3 	bl	8005190 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 80013ca:	69b3      	ldr	r3, [r6, #24]
  queue_prio_insert(currp, &cp->c_queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, time);
  if (msg != MSG_TIMEOUT) {
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	3301      	adds	r3, #1
 80013d0:	d002      	beq.n	80013d8 <thread11.8449+0x58>
    chMtxLockS(mp);
 80013d2:	4638      	mov	r0, r7
 80013d4:	f004 f814 	bl	8005400 <chMtxLockS>
 80013d8:	2300      	movs	r3, #0
 80013da:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_CONDVARS_TIMEOUT || defined(__DOXYGEN__)
  chCondWaitTimeout(&c1, TIME_INFINITE);
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
 80013de:	f898 0000 	ldrb.w	r0, [r8]
 80013e2:	f002 fa3d 	bl	8003860 <test_emit_token>
  chMtxUnlock(&m1);
 80013e6:	4805      	ldr	r0, [pc, #20]	; (80013fc <thread11.8449+0x7c>)
 80013e8:	f003 ffda 	bl	80053a0 <chMtxUnlock>
  chMtxUnlock(&m2);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <thread11.8449+0x78>)
}
 80013ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
 80013f2:	f003 bfd5 	b.w	80053a0 <chMtxUnlock>
 80013f6:	bf00      	nop
 80013f8:	20000800 	.word	0x20000800
 80013fc:	200008a4 	.word	0x200008a4
 8001400:	200011e0 	.word	0x200011e0
 8001404:	20000810 	.word	0x20000810
 8001408:	f3af 8000 	nop.w
 800140c:	f3af 8000 	nop.w

08001410 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001410:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001412:	1c4b      	adds	r3, r1, #1
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001414:	b087      	sub	sp, #28
 8001416:	4605      	mov	r5, r0

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001418:	d011      	beq.n	800143e <chSchGoSleepTimeoutS+0x2e>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 800141a:	4c0b      	ldr	r4, [pc, #44]	; (8001448 <chSchGoSleepTimeoutS+0x38>)
 800141c:	4a0b      	ldr	r2, [pc, #44]	; (800144c <chSchGoSleepTimeoutS+0x3c>)
 800141e:	69a3      	ldr	r3, [r4, #24]
 8001420:	a801      	add	r0, sp, #4
 8001422:	f7ff fc8d 	bl	8000d40 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8001426:	4628      	mov	r0, r5
 8001428:	f003 feb2 	bl	8005190 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800142c:	9b04      	ldr	r3, [sp, #16]
 800142e:	b113      	cbz	r3, 8001436 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 8001430:	a801      	add	r0, sp, #4
 8001432:	f7ff ff6d 	bl	8001310 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8001436:	69a3      	ldr	r3, [r4, #24]
}
 8001438:	6a18      	ldr	r0, [r3, #32]
 800143a:	b007      	add	sp, #28
 800143c:	bd30      	pop	{r4, r5, pc}
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 800143e:	f003 fea7 	bl	8005190 <chSchGoSleepS>
 8001442:	4c01      	ldr	r4, [pc, #4]	; (8001448 <chSchGoSleepTimeoutS+0x38>)
 8001444:	e7f7      	b.n	8001436 <chSchGoSleepTimeoutS+0x26>
 8001446:	bf00      	nop
 8001448:	200011e0 	.word	0x200011e0
 800144c:	08004e11 	.word	0x08004e11

08001450 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8001450:	b508      	push	{r3, lr}
 8001452:	4601      	mov	r1, r0
 8001454:	2320      	movs	r3, #32
 8001456:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800145a:	2008      	movs	r0, #8
 800145c:	f7ff ffd8 	bl	8001410 <chSchGoSleepTimeoutS>
 8001460:	2300      	movs	r3, #0
 8001462:	f383 8811 	msr	BASEPRI, r3
 8001466:	bd08      	pop	{r3, pc}
 8001468:	f3af 8000 	nop.w
 800146c:	f3af 8000 	nop.w

08001470 <test_wait_tick>:
/**
 * @brief   Delays execution until next system time tick.
 *
 * @return              The system time.
 */
systime_t test_wait_tick(void) {
 8001470:	b508      	push	{r3, lr}

  chThdSleep(1);
 8001472:	2001      	movs	r0, #1
 8001474:	f7ff ffec 	bl	8001450 <chThdSleep>
 8001478:	2320      	movs	r3, #32
 800147a:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800147e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001482:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001484:	2300      	movs	r3, #0
 8001486:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 800148a:	bd08      	pop	{r3, pc}
 800148c:	f3af 8000 	nop.w

08001490 <thread2.8233>:
static void sem2_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread2, p) {
 8001490:	b508      	push	{r3, lr}

  (void)p;
  chThdSleepMilliseconds(50);
 8001492:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001496:	f7ff ffdb 	bl	8001450 <chThdSleep>
 800149a:	2320      	movs	r3, #32
 800149c:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chSemSignalI(&sem1); /* For coverage reasons */
 80014a0:	f640 0024 	movw	r0, #2084	; 0x824
 80014a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80014a8:	f004 f862 	bl	8005570 <chSemSignalI>
  chSchRescheduleS();
 80014ac:	f003 fdb0 	bl	8005010 <chSchRescheduleS>
 80014b0:	2300      	movs	r3, #0
 80014b2:	f383 8811 	msr	BASEPRI, r3
 80014b6:	bd08      	pop	{r3, pc}
 80014b8:	f3af 8000 	nop.w
 80014bc:	f3af 8000 	nop.w

080014c0 <mtx4_execute.8483>:
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
}

static void mtx4_execute(void) {
 80014c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80014c4:	4d8b      	ldr	r5, [pc, #556]	; (80016f4 <mtx4_execute.8483+0x234>)
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 80014c6:	4b8c      	ldr	r3, [pc, #560]	; (80016f8 <mtx4_execute.8483+0x238>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80014c8:	69aa      	ldr	r2, [r5, #24]
 80014ca:	488c      	ldr	r0, [pc, #560]	; (80016fc <mtx4_execute.8483+0x23c>)
 80014cc:	6894      	ldr	r4, [r2, #8]
 80014ce:	4a8c      	ldr	r2, [pc, #560]	; (8001700 <mtx4_execute.8483+0x240>)
 80014d0:	4e8c      	ldr	r6, [pc, #560]	; (8001704 <mtx4_execute.8483+0x244>)
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
}

static void mtx4_execute(void) {
 80014d2:	b082      	sub	sp, #8
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
 80014d4:	1c67      	adds	r7, r4, #1
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 80014d6:	9200      	str	r2, [sp, #0]
 80014d8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80014dc:	463a      	mov	r2, r7
 80014de:	f003 fe17 	bl	8005110 <chThdCreateStatic>
 80014e2:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 80014e4:	4888      	ldr	r0, [pc, #544]	; (8001708 <mtx4_execute.8483+0x248>)
 80014e6:	4b89      	ldr	r3, [pc, #548]	; (800170c <mtx4_execute.8483+0x24c>)
 80014e8:	9000      	str	r0, [sp, #0]
static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
 80014ea:	f104 0802 	add.w	r8, r4, #2
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 80014ee:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80014f2:	4642      	mov	r2, r8
 80014f4:	4886      	ldr	r0, [pc, #536]	; (8001710 <mtx4_execute.8483+0x250>)
 80014f6:	f003 fe0b 	bl	8005110 <chThdCreateStatic>
 80014fa:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 80014fc:	4885      	ldr	r0, [pc, #532]	; (8001714 <mtx4_execute.8483+0x254>)
 80014fe:	f003 ffdf 	bl	80054c0 <chMtxLock>
 8001502:	69ab      	ldr	r3, [r5, #24]
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
 8001504:	6899      	ldr	r1, [r3, #8]
 8001506:	2001      	movs	r0, #1
 8001508:	ebb4 0e01 	subs.w	lr, r4, r1
 800150c:	f1de 0100 	rsbs	r1, lr, #0
 8001510:	eb51 010e 	adcs.w	r1, r1, lr
 8001514:	f002 f8a4 	bl	8003660 <_test_assert>
 8001518:	b110      	cbz	r0, 8001520 <mtx4_execute.8483+0x60>
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
}
 800151a:	b002      	add	sp, #8
 800151c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
  chMtxLock(&m2);
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
  chThdSleepMilliseconds(100);
 8001520:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001524:	f7ff ff94 	bl	8001450 <chThdSleep>
 8001528:	69ab      	ldr	r3, [r5, #24]
  test_assert(2, chThdGetPriorityX() == p1, "wrong priority level");
 800152a:	6899      	ldr	r1, [r3, #8]
 800152c:	2002      	movs	r0, #2
 800152e:	1a7a      	subs	r2, r7, r1
 8001530:	4251      	negs	r1, r2
 8001532:	4151      	adcs	r1, r2
 8001534:	f002 f894 	bl	8003660 <_test_assert>
 8001538:	2800      	cmp	r0, #0
 800153a:	d1ee      	bne.n	800151a <mtx4_execute.8483+0x5a>
  chMtxLock(&m1);
 800153c:	4876      	ldr	r0, [pc, #472]	; (8001718 <mtx4_execute.8483+0x258>)
 800153e:	f003 ffbf 	bl	80054c0 <chMtxLock>
 8001542:	69ab      	ldr	r3, [r5, #24]
  test_assert(3, chThdGetPriorityX() == p1, "wrong priority level");
 8001544:	6899      	ldr	r1, [r3, #8]
 8001546:	2003      	movs	r0, #3
 8001548:	1a7b      	subs	r3, r7, r1
 800154a:	4259      	negs	r1, r3
 800154c:	4159      	adcs	r1, r3
 800154e:	f002 f887 	bl	8003660 <_test_assert>
 8001552:	2800      	cmp	r0, #0
 8001554:	d1e1      	bne.n	800151a <mtx4_execute.8483+0x5a>
  chThdSleepMilliseconds(100);
 8001556:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800155a:	f7ff ff79 	bl	8001450 <chThdSleep>
 800155e:	69ab      	ldr	r3, [r5, #24]
  test_assert(4, chThdGetPriorityX() == p2, "wrong priority level");
 8001560:	6899      	ldr	r1, [r3, #8]
 8001562:	2004      	movs	r0, #4
 8001564:	ebb8 0c01 	subs.w	ip, r8, r1
 8001568:	f1dc 0100 	rsbs	r1, ip, #0
 800156c:	eb51 010c 	adcs.w	r1, r1, ip
 8001570:	f002 f876 	bl	8003660 <_test_assert>
 8001574:	2800      	cmp	r0, #0
 8001576:	d1d0      	bne.n	800151a <mtx4_execute.8483+0x5a>
  chMtxUnlock(&m1);
 8001578:	4867      	ldr	r0, [pc, #412]	; (8001718 <mtx4_execute.8483+0x258>)
 800157a:	f003 ff11 	bl	80053a0 <chMtxUnlock>
 800157e:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == p1, "wrong priority level");
 8001580:	6899      	ldr	r1, [r3, #8]
 8001582:	2005      	movs	r0, #5
 8001584:	ebb7 0e01 	subs.w	lr, r7, r1
 8001588:	f1de 0100 	rsbs	r1, lr, #0
 800158c:	eb51 010e 	adcs.w	r1, r1, lr
 8001590:	f002 f866 	bl	8003660 <_test_assert>
 8001594:	2800      	cmp	r0, #0
 8001596:	d1c0      	bne.n	800151a <mtx4_execute.8483+0x5a>
  chThdSleepMilliseconds(100);
 8001598:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800159c:	f7ff ff58 	bl	8001450 <chThdSleep>
 80015a0:	69ab      	ldr	r3, [r5, #24]
  test_assert(6, chThdGetPriorityX() == p1, "wrong priority level");
 80015a2:	6899      	ldr	r1, [r3, #8]
 80015a4:	2006      	movs	r0, #6
 80015a6:	1a7a      	subs	r2, r7, r1
 80015a8:	4251      	negs	r1, r2
 80015aa:	4151      	adcs	r1, r2
 80015ac:	f002 f858 	bl	8003660 <_test_assert>
 80015b0:	2800      	cmp	r0, #0
 80015b2:	d1b2      	bne.n	800151a <mtx4_execute.8483+0x5a>
  chMtxUnlockAll();
 80015b4:	f003 fea4 	bl	8005300 <chMtxUnlockAll>
 80015b8:	69ab      	ldr	r3, [r5, #24]
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
 80015ba:	6899      	ldr	r1, [r3, #8]
 80015bc:	2007      	movs	r0, #7
 80015be:	1a63      	subs	r3, r4, r1
 80015c0:	4259      	negs	r1, r3
 80015c2:	4159      	adcs	r1, r3
 80015c4:	f002 f84c 	bl	8003660 <_test_assert>
 80015c8:	2800      	cmp	r0, #0
 80015ca:	d1a6      	bne.n	800151a <mtx4_execute.8483+0x5a>
  test_wait_threads();
 80015cc:	f002 fce0 	bl	8003f90 <test_wait_threads>

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 80015d0:	4a52      	ldr	r2, [pc, #328]	; (800171c <mtx4_execute.8483+0x25c>)
 80015d2:	4b49      	ldr	r3, [pc, #292]	; (80016f8 <mtx4_execute.8483+0x238>)
 80015d4:	9200      	str	r2, [sp, #0]
 80015d6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80015da:	463a      	mov	r2, r7
 80015dc:	4847      	ldr	r0, [pc, #284]	; (80016fc <mtx4_execute.8483+0x23c>)
 80015de:	f003 fd97 	bl	8005110 <chThdCreateStatic>
 80015e2:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 80015e4:	484e      	ldr	r0, [pc, #312]	; (8001720 <mtx4_execute.8483+0x260>)
 80015e6:	4b49      	ldr	r3, [pc, #292]	; (800170c <mtx4_execute.8483+0x24c>)
 80015e8:	9000      	str	r0, [sp, #0]
 80015ea:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80015ee:	4642      	mov	r2, r8
 80015f0:	4847      	ldr	r0, [pc, #284]	; (8001710 <mtx4_execute.8483+0x250>)
 80015f2:	f003 fd8d 	bl	8005110 <chThdCreateStatic>
 80015f6:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 80015f8:	4846      	ldr	r0, [pc, #280]	; (8001714 <mtx4_execute.8483+0x254>)
 80015fa:	f003 ff61 	bl	80054c0 <chMtxLock>
 80015fe:	69ab      	ldr	r3, [r5, #24]
  test_assert(8, chThdGetPriorityX() == p, "wrong priority level");
 8001600:	6899      	ldr	r1, [r3, #8]
 8001602:	2008      	movs	r0, #8
 8001604:	ebb4 0c01 	subs.w	ip, r4, r1
 8001608:	f1dc 0100 	rsbs	r1, ip, #0
 800160c:	eb51 010c 	adcs.w	r1, r1, ip
 8001610:	f002 f826 	bl	8003660 <_test_assert>
 8001614:	2800      	cmp	r0, #0
 8001616:	d180      	bne.n	800151a <mtx4_execute.8483+0x5a>
  chThdSleepMilliseconds(100);
 8001618:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800161c:	f7ff ff18 	bl	8001450 <chThdSleep>
 8001620:	69ab      	ldr	r3, [r5, #24]
  test_assert(9, chThdGetPriorityX() == p1, "wrong priority level");
 8001622:	6899      	ldr	r1, [r3, #8]
 8001624:	2009      	movs	r0, #9
 8001626:	ebb7 0e01 	subs.w	lr, r7, r1
 800162a:	f1de 0100 	rsbs	r1, lr, #0
 800162e:	eb51 010e 	adcs.w	r1, r1, lr
 8001632:	f002 f815 	bl	8003660 <_test_assert>
 8001636:	2800      	cmp	r0, #0
 8001638:	f47f af6f 	bne.w	800151a <mtx4_execute.8483+0x5a>
  chMtxLock(&m1);
 800163c:	4836      	ldr	r0, [pc, #216]	; (8001718 <mtx4_execute.8483+0x258>)
 800163e:	f003 ff3f 	bl	80054c0 <chMtxLock>
 8001642:	69ab      	ldr	r3, [r5, #24]
  test_assert(10, chThdGetPriorityX() == p1, "wrong priority level");
 8001644:	6899      	ldr	r1, [r3, #8]
 8001646:	200a      	movs	r0, #10
 8001648:	1a7a      	subs	r2, r7, r1
 800164a:	4251      	negs	r1, r2
 800164c:	4151      	adcs	r1, r2
 800164e:	f002 f807 	bl	8003660 <_test_assert>
 8001652:	2800      	cmp	r0, #0
 8001654:	f47f af61 	bne.w	800151a <mtx4_execute.8483+0x5a>
  chThdSleepMilliseconds(100);
 8001658:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800165c:	f7ff fef8 	bl	8001450 <chThdSleep>
 8001660:	69ab      	ldr	r3, [r5, #24]
  test_assert(11, chThdGetPriorityX() == p2, "wrong priority level");
 8001662:	6899      	ldr	r1, [r3, #8]
 8001664:	200b      	movs	r0, #11
 8001666:	ebb8 0301 	subs.w	r3, r8, r1
 800166a:	4259      	negs	r1, r3
 800166c:	4159      	adcs	r1, r3
 800166e:	f001 fff7 	bl	8003660 <_test_assert>
 8001672:	4606      	mov	r6, r0
 8001674:	2800      	cmp	r0, #0
 8001676:	f47f af50 	bne.w	800151a <mtx4_execute.8483+0x5a>
 800167a:	2320      	movs	r3, #32
 800167c:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chMtxUnlockS(&m1);
 8001680:	4825      	ldr	r0, [pc, #148]	; (8001718 <mtx4_execute.8483+0x258>)
 8001682:	f003 fe65 	bl	8005350 <chMtxUnlockS>
  chSchRescheduleS();
 8001686:	f003 fcc3 	bl	8005010 <chSchRescheduleS>
 800168a:	f386 8811 	msr	BASEPRI, r6
 800168e:	69ab      	ldr	r3, [r5, #24]
  chSysUnlock();
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
 8001690:	6899      	ldr	r1, [r3, #8]
 8001692:	200c      	movs	r0, #12
 8001694:	ebb7 0c01 	subs.w	ip, r7, r1
 8001698:	f1dc 0100 	rsbs	r1, ip, #0
 800169c:	eb51 010c 	adcs.w	r1, r1, ip
 80016a0:	f001 ffde 	bl	8003660 <_test_assert>
 80016a4:	2800      	cmp	r0, #0
 80016a6:	f47f af38 	bne.w	800151a <mtx4_execute.8483+0x5a>
  chThdSleepMilliseconds(100);
 80016aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ae:	f7ff fecf 	bl	8001450 <chThdSleep>
 80016b2:	69ab      	ldr	r3, [r5, #24]
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
 80016b4:	6899      	ldr	r1, [r3, #8]
 80016b6:	200d      	movs	r0, #13
 80016b8:	ebb7 0e01 	subs.w	lr, r7, r1
 80016bc:	f1de 0100 	rsbs	r1, lr, #0
 80016c0:	eb51 010e 	adcs.w	r1, r1, lr
 80016c4:	f001 ffcc 	bl	8003660 <_test_assert>
 80016c8:	2800      	cmp	r0, #0
 80016ca:	f47f af26 	bne.w	800151a <mtx4_execute.8483+0x5a>
  chMtxUnlockAll();
 80016ce:	f003 fe17 	bl	8005300 <chMtxUnlockAll>
 80016d2:	69ab      	ldr	r3, [r5, #24]
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
 80016d4:	6899      	ldr	r1, [r3, #8]
 80016d6:	200e      	movs	r0, #14
 80016d8:	1a62      	subs	r2, r4, r1
 80016da:	4251      	negs	r1, r2
 80016dc:	4151      	adcs	r1, r2
 80016de:	f001 ffbf 	bl	8003660 <_test_assert>
 80016e2:	2800      	cmp	r0, #0
 80016e4:	f47f af19 	bne.w	800151a <mtx4_execute.8483+0x5a>
  test_wait_threads();
}
 80016e8:	b002      	add	sp, #8
 80016ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
 80016ee:	f002 bc4f 	b.w	8003f90 <test_wait_threads>
 80016f2:	bf00      	nop
 80016f4:	200011e0 	.word	0x200011e0
 80016f8:	08001761 	.word	0x08001761
 80016fc:	20000998 	.word	0x20000998
 8001700:	08005de8 	.word	0x08005de8
 8001704:	20001330 	.word	0x20001330
 8001708:	08005de0 	.word	0x08005de0
 800170c:	08001731 	.word	0x08001731
 8001710:	20000ae0 	.word	0x20000ae0
 8001714:	20000800 	.word	0x20000800
 8001718:	200008a4 	.word	0x200008a4
 800171c:	08005df0 	.word	0x08005df0
 8001720:	08005de4 	.word	0x08005de4
 8001724:	f3af 8000 	nop.w
 8001728:	f3af 8000 	nop.w
 800172c:	f3af 8000 	nop.w

08001730 <thread4b.8455.4154>:
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
  chMtxUnlock(&m2);
}

static THD_FUNCTION(thread4b, p) {
 8001730:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
 8001732:	f640 04a4 	movw	r4, #2212	; 0x8a4
 8001736:	f2c2 0400 	movt	r4, #8192	; 0x2000
}

static THD_FUNCTION(thread4b, p) {

  (void)p;
  chThdSleepMilliseconds(150);
 800173a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800173e:	f7ff fe87 	bl	8001450 <chThdSleep>
  chMtxLock(&m1);
 8001742:	4620      	mov	r0, r4
 8001744:	f003 febc 	bl	80054c0 <chMtxLock>
  chMtxUnlock(&m1);
 8001748:	4620      	mov	r0, r4
}
 800174a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static THD_FUNCTION(thread4b, p) {

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
 800174e:	f003 be27 	b.w	80053a0 <chMtxUnlock>
 8001752:	bf00      	nop
 8001754:	f3af 8000 	nop.w
 8001758:	f3af 8000 	nop.w
 800175c:	f3af 8000 	nop.w

08001760 <thread4a.8458.4151>:

  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static THD_FUNCTION(thread4a, p) {
 8001760:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
 8001762:	f640 0400 	movw	r4, #2048	; 0x800
 8001766:	f2c2 0400 	movt	r4, #8192	; 0x2000
}

static THD_FUNCTION(thread4a, p) {

  (void)p;
  chThdSleepMilliseconds(50);
 800176a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800176e:	f7ff fe6f 	bl	8001450 <chThdSleep>
  chMtxLock(&m2);
 8001772:	4620      	mov	r0, r4
 8001774:	f003 fea4 	bl	80054c0 <chMtxLock>
  chMtxUnlock(&m2);
 8001778:	4620      	mov	r0, r4
}
 800177a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static THD_FUNCTION(thread4a, p) {

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
  chMtxUnlock(&m2);
 800177e:	f003 be0f 	b.w	80053a0 <chMtxUnlock>
 8001782:	bf00      	nop
 8001784:	f3af 8000 	nop.w
 8001788:	f3af 8000 	nop.w
 800178c:	f3af 8000 	nop.w

08001790 <thread1.8899>:
static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static THD_FUNCTION(thread1, p) {
 8001790:	b510      	push	{r4, lr}
 8001792:	4604      	mov	r4, r0

  chThdSleepMilliseconds(50);
 8001794:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001798:	f7ff fe5a 	bl	8001450 <chThdSleep>
 800179c:	2320      	movs	r3, #32
 800179e:	f383 8811 	msr	BASEPRI, r3
void chEvtSignal(thread_t *tp, eventmask_t events) {

  chDbgCheck(tp != NULL);

  chSysLock();
  chEvtSignalI(tp, events);
 80017a2:	2101      	movs	r1, #1
 80017a4:	4620      	mov	r0, r4
 80017a6:	f003 fd7b 	bl	80052a0 <chEvtSignalI>
  chSchRescheduleS();
 80017aa:	f003 fc31 	bl	8005010 <chSchRescheduleS>
 80017ae:	2300      	movs	r3, #0
 80017b0:	f383 8811 	msr	BASEPRI, r3
 80017b4:	bd10      	pop	{r4, pc}
 80017b6:	bf00      	nop
 80017b8:	f3af 8000 	nop.w
 80017bc:	f3af 8000 	nop.w

080017c0 <dyn3_execute.9296>:
 80017c0:	4b48      	ldr	r3, [pc, #288]	; (80018e4 <dyn3_execute.9296+0x124>)
static void dyn3_execute(void) {
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 80017c2:	4949      	ldr	r1, [pc, #292]	; (80018e8 <dyn3_execute.9296+0x128>)
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	6898      	ldr	r0, [r3, #8]
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 80017c8:	b510      	push	{r4, lr}
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 80017ca:	3801      	subs	r0, #1
 80017cc:	f7ff faf8 	bl	8000dc0 <chThdCreateFromHeap.constprop.51>
 80017d0:	4604      	mov	r4, r0
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 80017d2:	2001      	movs	r0, #1
 80017d4:	7fa1      	ldrb	r1, [r4, #30]
 80017d6:	ebb1 0e00 	subs.w	lr, r1, r0
 80017da:	f1de 0100 	rsbs	r1, lr, #0
 80017de:	eb51 010e 	adcs.w	r1, r1, lr
 80017e2:	f001 ff3d 	bl	8003660 <_test_assert>
 80017e6:	b100      	cbz	r0, 80017ea <dyn3_execute.9296+0x2a>
 80017e8:	bd10      	pop	{r4, pc}
 80017ea:	2320      	movs	r3, #32
 80017ec:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chThdAddRef(thread_t *tp) {

  chSysLock();
  chDbgAssert(tp->p_refs < (trefs_t)255, "too many references");
  tp->p_refs++;
 80017f0:	7fa3      	ldrb	r3, [r4, #30]
 80017f2:	3301      	adds	r3, #1
 80017f4:	77a3      	strb	r3, [r4, #30]
 80017f6:	f380 8811 	msr	BASEPRI, r0
  chThdAddRef(tp);
  test_assert(2, tp->p_refs == 2, "references increase failure");
 80017fa:	7fa1      	ldrb	r1, [r4, #30]
 80017fc:	2002      	movs	r0, #2
 80017fe:	1a0a      	subs	r2, r1, r0
 8001800:	4251      	negs	r1, r2
 8001802:	4151      	adcs	r1, r2
 8001804:	f001 ff2c 	bl	8003660 <_test_assert>
 8001808:	2800      	cmp	r0, #0
 800180a:	d1ed      	bne.n	80017e8 <dyn3_execute.9296+0x28>
  chThdRelease(tp);
 800180c:	4620      	mov	r0, r4
 800180e:	f002 fb37 	bl	8003e80 <chThdRelease>
  test_assert(3, tp->p_refs == 1, "references decrease failure");
 8001812:	7fa1      	ldrb	r1, [r4, #30]
 8001814:	2003      	movs	r0, #3
 8001816:	1e4b      	subs	r3, r1, #1
 8001818:	4259      	negs	r1, r3
 800181a:	4159      	adcs	r1, r3
 800181c:	f001 ff20 	bl	8003660 <_test_assert>
 8001820:	2800      	cmp	r0, #0
 8001822:	d1e1      	bne.n	80017e8 <dyn3_execute.9296+0x28>

  /* Verify the new threads count.*/
  test_assert(4, regfind(tp), "thread missing from registry");
 8001824:	4620      	mov	r0, r4
 8001826:	f002 fb63 	bl	8003ef0 <regfind.9292>
 800182a:	4601      	mov	r1, r0
 800182c:	2004      	movs	r0, #4
 800182e:	f001 ff17 	bl	8003660 <_test_assert>
 8001832:	2800      	cmp	r0, #0
 8001834:	d1d8      	bne.n	80017e8 <dyn3_execute.9296+0x28>
  test_assert(5, regfind(tp), "thread disappeared");
 8001836:	4620      	mov	r0, r4
 8001838:	f002 fb5a 	bl	8003ef0 <regfind.9292>
 800183c:	4601      	mov	r1, r0
 800183e:	2005      	movs	r0, #5
 8001840:	f001 ff0e 	bl	8003660 <_test_assert>
 8001844:	2800      	cmp	r0, #0
 8001846:	d1cf      	bne.n	80017e8 <dyn3_execute.9296+0x28>

  /* Detach and let the thread execute and terminate.*/
  chThdRelease(tp);
 8001848:	4620      	mov	r0, r4
 800184a:	f002 fb19 	bl	8003e80 <chThdRelease>
  test_assert(6, tp->p_refs == 0, "detach failure");
 800184e:	7fa1      	ldrb	r1, [r4, #30]
 8001850:	2006      	movs	r0, #6
 8001852:	f1d1 0101 	rsbs	r1, r1, #1
 8001856:	bf38      	it	cc
 8001858:	2100      	movcc	r1, #0
 800185a:	f001 ff01 	bl	8003660 <_test_assert>
 800185e:	2800      	cmp	r0, #0
 8001860:	d1c2      	bne.n	80017e8 <dyn3_execute.9296+0x28>
  test_assert(7, tp->p_state == CH_STATE_READY, "invalid state");
 8001862:	7f21      	ldrb	r1, [r4, #28]
 8001864:	2007      	movs	r0, #7
 8001866:	f1d1 0101 	rsbs	r1, r1, #1
 800186a:	bf38      	it	cc
 800186c:	2100      	movcc	r1, #0
 800186e:	f001 fef7 	bl	8003660 <_test_assert>
 8001872:	2800      	cmp	r0, #0
 8001874:	d1b8      	bne.n	80017e8 <dyn3_execute.9296+0x28>
  test_assert(8, regfind(tp), "thread disappeared");
 8001876:	4620      	mov	r0, r4
 8001878:	f002 fb3a 	bl	8003ef0 <regfind.9292>
 800187c:	4601      	mov	r1, r0
 800187e:	2008      	movs	r0, #8
 8001880:	f001 feee 	bl	8003660 <_test_assert>
 8001884:	2800      	cmp	r0, #0
 8001886:	d1af      	bne.n	80017e8 <dyn3_execute.9296+0x28>
  test_assert(9, regfind(tp), "thread disappeared");
 8001888:	4620      	mov	r0, r4
 800188a:	f002 fb31 	bl	8003ef0 <regfind.9292>
 800188e:	4601      	mov	r1, r0
 8001890:	2009      	movs	r0, #9
 8001892:	f001 fee5 	bl	8003660 <_test_assert>
 8001896:	2800      	cmp	r0, #0
 8001898:	d1a6      	bne.n	80017e8 <dyn3_execute.9296+0x28>
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
 800189a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800189e:	f7ff fdd7 	bl	8001450 <chThdSleep>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");
 80018a2:	7f21      	ldrb	r1, [r4, #28]
 80018a4:	200a      	movs	r0, #10
 80018a6:	f1b1 0c0f 	subs.w	ip, r1, #15
 80018aa:	f1dc 0100 	rsbs	r1, ip, #0
 80018ae:	eb51 010c 	adcs.w	r1, r1, ip
 80018b2:	f001 fed5 	bl	8003660 <_test_assert>
 80018b6:	2800      	cmp	r0, #0
 80018b8:	d196      	bne.n	80017e8 <dyn3_execute.9296+0x28>

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
 80018ba:	4620      	mov	r0, r4
 80018bc:	f002 fb18 	bl	8003ef0 <regfind.9292>
 80018c0:	4601      	mov	r1, r0
 80018c2:	200b      	movs	r0, #11
 80018c4:	f001 fecc 	bl	8003660 <_test_assert>
 80018c8:	2800      	cmp	r0, #0
 80018ca:	d18d      	bne.n	80017e8 <dyn3_execute.9296+0x28>
  test_assert(12, !regfind(tp), "thread still in registry");
 80018cc:	4620      	mov	r0, r4
 80018ce:	f002 fb0f 	bl	8003ef0 <regfind.9292>
 80018d2:	f080 0101 	eor.w	r1, r0, #1
 80018d6:	b2c9      	uxtb	r1, r1
 80018d8:	200c      	movs	r0, #12
}
 80018da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
 80018de:	f001 bebf 	b.w	8003660 <_test_assert>
 80018e2:	bf00      	nop
 80018e4:	200011e0 	.word	0x200011e0
 80018e8:	08005de0 	.word	0x08005de0
 80018ec:	f3af 8000 	nop.w

080018f0 <Thread1.10014>:

/*
 * Red LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 80018f0:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <Thread1.10014+0x30>)
 80018f4:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <Thread1.10014+0x34>)
 80018f6:	699b      	ldr	r3, [r3, #24]

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    palClearPad(GPIOB, GPIOB_LED_GREEN);
 80018f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80018fc:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8001900:	619a      	str	r2, [r3, #24]
 8001902:	f6c4 0400 	movt	r4, #18432	; 0x4800
 8001906:	462e      	mov	r6, r5
 8001908:	8366      	strh	r6, [r4, #26]
    chThdSleepMilliseconds(500);
 800190a:	f241 3088 	movw	r0, #5000	; 0x1388
 800190e:	f7ff fd9f 	bl	8001450 <chThdSleep>
    palSetPad(GPIOB, GPIOB_LED_GREEN);
 8001912:	8325      	strh	r5, [r4, #24]
    chThdSleepMilliseconds(500);
 8001914:	f241 3088 	movw	r0, #5000	; 0x1388
 8001918:	f7ff fd9a 	bl	8001450 <chThdSleep>
 800191c:	e7f4      	b.n	8001908 <Thread1.10014+0x18>
 800191e:	bf00      	nop
 8001920:	200011e0 	.word	0x200011e0
 8001924:	08005eb8 	.word	0x08005eb8
 8001928:	f3af 8000 	nop.w
 800192c:	f3af 8000 	nop.w

08001930 <chThdEnqueueTimeoutS.4343>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8001930:	b410      	push	{r4}
 8001932:	4602      	mov	r2, r0

  if (TIME_IMMEDIATE == timeout) {
 8001934:	b151      	cbz	r1, 800194c <chThdEnqueueTimeoutS.4343+0x1c>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <chThdEnqueueTimeoutS.4343+0x24>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8001938:	6844      	ldr	r4, [r0, #4]
 800193a:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800193c:	2004      	movs	r0, #4
 800193e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 8001942:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 8001944:	6053      	str	r3, [r2, #4]
}
 8001946:	bc10      	pop	{r4}
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001948:	f7ff bd62 	b.w	8001410 <chSchGoSleepTimeoutS>
}
 800194c:	f04f 30ff 	mov.w	r0, #4294967295
 8001950:	bc10      	pop	{r4}
 8001952:	4770      	bx	lr
 8001954:	200011e0 	.word	0x200011e0
 8001958:	f3af 8000 	nop.w
 800195c:	f3af 8000 	nop.w

08001960 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8001960:	b570      	push	{r4, r5, r6, lr}
 8001962:	2320      	movs	r3, #32
 8001964:	4604      	mov	r4, r0
 8001966:	460e      	mov	r6, r1
 8001968:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 800196c:	69c3      	ldr	r3, [r0, #28]
 800196e:	b103      	cbz	r3, 8001972 <chIQGetTimeout+0x12>
    iqp->q_notify(iqp);
 8001970:	4798      	blx	r3
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8001972:	68a5      	ldr	r5, [r4, #8]
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8001974:	4620      	mov	r0, r4
 8001976:	4631      	mov	r1, r6
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 8001978:	b935      	cbnz	r5, 8001988 <chIQGetTimeout+0x28>
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800197a:	f7ff ffd9 	bl	8001930 <chThdEnqueueTimeoutS.4343>
    if (msg < Q_OK) {
 800197e:	2800      	cmp	r0, #0
 8001980:	daf7      	bge.n	8001972 <chIQGetTimeout+0x12>
 8001982:	f385 8811 	msr	BASEPRI, r5
 8001986:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8001988:	68a1      	ldr	r1, [r4, #8]
  b = *iqp->q_rdptr++;
 800198a:	69a3      	ldr	r3, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
 800198c:	6922      	ldr	r2, [r4, #16]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800198e:	3901      	subs	r1, #1
 8001990:	60a1      	str	r1, [r4, #8]
  b = *iqp->q_rdptr++;
 8001992:	f813 0b01 	ldrb.w	r0, [r3], #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8001996:	4293      	cmp	r3, r2
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001998:	61a3      	str	r3, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800199a:	bf24      	itt	cs
 800199c:	68e3      	ldrcs	r3, [r4, #12]
 800199e:	61a3      	strcs	r3, [r4, #24]
 80019a0:	2300      	movs	r3, #0
 80019a2:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 80019a6:	bd70      	pop	{r4, r5, r6, pc}
 80019a8:	f3af 8000 	nop.w
 80019ac:	f3af 8000 	nop.w

080019b0 <gett.7205>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80019b0:	300c      	adds	r0, #12
 80019b2:	f7ff bfd5 	b.w	8001960 <chIQGetTimeout>
 80019b6:	bf00      	nop
 80019b8:	f3af 8000 	nop.w
 80019bc:	f3af 8000 	nop.w

080019c0 <get.7209>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80019c0:	300c      	adds	r0, #12
 80019c2:	f04f 31ff 	mov.w	r1, #4294967295
 80019c6:	f7ff bfcb 	b.w	8001960 <chIQGetTimeout>
 80019ca:	bf00      	nop
 80019cc:	f3af 8000 	nop.w

080019d0 <thread1.9470>:
}

static THD_FUNCTION(thread1, p) {

  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
 80019d0:	f640 007c 	movw	r0, #2172	; 0x87c
 80019d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80019d8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80019dc:	f7ff bfc0 	b.w	8001960 <chIQGetTimeout>

080019e0 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 80019e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019e4:	4604      	mov	r4, r0
 80019e6:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 80019e8:	f8d0 901c 	ldr.w	r9, [r0, #28]
 80019ec:	f04f 0b20 	mov.w	fp, #32
 80019f0:	f38b 8811 	msr	BASEPRI, fp
  size_t r = 0;
 80019f4:	2600      	movs	r6, #0
 *                      .
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
 80019f6:	f101 0801 	add.w	r8, r1, #1
 80019fa:	eb01 0a02 	add.w	sl, r1, r2

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 80019fe:	f1b9 0f00 	cmp.w	r9, #0
 8001a02:	d001      	beq.n	8001a08 <chIQReadTimeout+0x28>
      nfy(iqp);
 8001a04:	4620      	mov	r0, r4
 8001a06:	47c8      	blx	r9
 8001a08:	68a7      	ldr	r7, [r4, #8]
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	4629      	mov	r1, r5
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 8001a0e:	b947      	cbnz	r7, 8001a22 <chIQReadTimeout+0x42>
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 8001a10:	f7ff ff8e 	bl	8001930 <chThdEnqueueTimeoutS.4343>
 8001a14:	2800      	cmp	r0, #0
 8001a16:	d0f7      	beq.n	8001a08 <chIQReadTimeout+0x28>
 8001a18:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 8001a1c:	4630      	mov	r0, r6
 8001a1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8001a22:	68a2      	ldr	r2, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8001a24:	69a3      	ldr	r3, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8001a26:	3a01      	subs	r2, #1
 8001a28:	60a2      	str	r2, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8001a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001a2e:	f808 2c01 	strb.w	r2, [r8, #-1]
    if (iqp->q_rdptr >= iqp->q_top) {
 8001a32:	6922      	ldr	r2, [r4, #16]
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8001a34:	61a3      	str	r3, [r4, #24]
    if (iqp->q_rdptr >= iqp->q_top) {
 8001a36:	4293      	cmp	r3, r2
      iqp->q_rdptr = iqp->q_buffer;
 8001a38:	bf24      	itt	cs
 8001a3a:	68e3      	ldrcs	r3, [r4, #12]
 8001a3c:	61a3      	strcs	r3, [r4, #24]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f383 8811 	msr	BASEPRI, r3
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 8001a44:	3601      	adds	r6, #1
    if (--n == 0U) {
 8001a46:	45d0      	cmp	r8, sl
 8001a48:	d0e8      	beq.n	8001a1c <chIQReadTimeout+0x3c>
 8001a4a:	f38b 8811 	msr	BASEPRI, fp
 8001a4e:	f108 0801 	add.w	r8, r8, #1
 8001a52:	e7d4      	b.n	80019fe <chIQReadTimeout+0x1e>
 8001a54:	f3af 8000 	nop.w
 8001a58:	f3af 8000 	nop.w
 8001a5c:	f3af 8000 	nop.w

08001a60 <readt.7182>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8001a60:	300c      	adds	r0, #12
 8001a62:	f7ff bfbd 	b.w	80019e0 <chIQReadTimeout>
 8001a66:	bf00      	nop
 8001a68:	f3af 8000 	nop.w
 8001a6c:	f3af 8000 	nop.w

08001a70 <read.7189>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8001a70:	300c      	adds	r0, #12
 8001a72:	f04f 33ff 	mov.w	r3, #4294967295
 8001a76:	f7ff bfb3 	b.w	80019e0 <chIQReadTimeout>
 8001a7a:	bf00      	nop
 8001a7c:	f3af 8000 	nop.w

08001a80 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8001a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a82:	4604      	mov	r4, r0
 8001a84:	460f      	mov	r7, r1
 8001a86:	4616      	mov	r6, r2
 8001a88:	2320      	movs	r3, #32
 8001a8a:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8001a8e:	68a5      	ldr	r5, [r4, #8]

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8001a90:	4620      	mov	r0, r4
 8001a92:	4631      	mov	r1, r6
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 8001a94:	b935      	cbnz	r5, 8001aa4 <chOQPutTimeout+0x24>
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8001a96:	f7ff ff4b 	bl	8001930 <chThdEnqueueTimeoutS.4343>
    if (msg < Q_OK) {
 8001a9a:	2800      	cmp	r0, #0
 8001a9c:	daf7      	bge.n	8001a8e <chOQPutTimeout+0xe>
 8001a9e:	f385 8811 	msr	BASEPRI, r5
 8001aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8001aa4:	68a2      	ldr	r2, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001aa6:	6963      	ldr	r3, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8001aa8:	3a01      	subs	r2, #1
 8001aaa:	60a2      	str	r2, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001aac:	f803 7b01 	strb.w	r7, [r3], #1
  if (oqp->q_wrptr >= oqp->q_top) {
 8001ab0:	6922      	ldr	r2, [r4, #16]
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8001ab2:	6163      	str	r3, [r4, #20]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001ab4:	4293      	cmp	r3, r2
    oqp->q_wrptr = oqp->q_buffer;
 8001ab6:	bf24      	itt	cs
 8001ab8:	68e3      	ldrcs	r3, [r4, #12]
 8001aba:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 8001abc:	69e3      	ldr	r3, [r4, #28]
 8001abe:	b10b      	cbz	r3, 8001ac4 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	4798      	blx	r3
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 8001aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001acc:	f3af 8000 	nop.w

08001ad0 <putt.7212>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001ad0:	3030      	adds	r0, #48	; 0x30
 8001ad2:	f7ff bfd5 	b.w	8001a80 <chOQPutTimeout>
 8001ad6:	bf00      	nop
 8001ad8:	f3af 8000 	nop.w
 8001adc:	f3af 8000 	nop.w

08001ae0 <put.7217>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001ae0:	3030      	adds	r0, #48	; 0x30
 8001ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae6:	f7ff bfcb 	b.w	8001a80 <chOQPutTimeout>
 8001aea:	bf00      	nop
 8001aec:	f3af 8000 	nop.w

08001af0 <thread2.9467>:
}

static THD_FUNCTION(thread2, p) {

  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
 8001af0:	f640 0030 	movw	r0, #2096	; 0x830
 8001af4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001af8:	2100      	movs	r1, #0
 8001afa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001afe:	f7ff bfbf 	b.w	8001a80 <chOQPutTimeout>
 8001b02:	bf00      	nop
 8001b04:	f3af 8000 	nop.w
 8001b08:	f3af 8000 	nop.w
 8001b0c:	f3af 8000 	nop.w

08001b10 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8001b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b14:	4604      	mov	r4, r0
 8001b16:	b083      	sub	sp, #12
 8001b18:	460f      	mov	r7, r1
 8001b1a:	4615      	mov	r5, r2
 8001b1c:	469b      	mov	fp, r3
  qnotify_t nfy = oqp->q_notify;
 8001b1e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001b22:	f04f 0a20 	mov.w	sl, #32
 8001b26:	f38a 8811 	msr	BASEPRI, sl
  size_t w = 0;
 8001b2a:	2600      	movs	r6, #0
 8001b2c:	46b1      	mov	r9, r6
 8001b2e:	68a3      	ldr	r3, [r4, #8]
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8001b30:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8001b32:	b1e3      	cbz	r3, 8001b6e <chOQWriteTimeout+0x5e>
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8001b34:	68a2      	ldr	r2, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001b36:	6963      	ldr	r3, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8001b38:	3a01      	subs	r2, #1
 8001b3a:	60a2      	str	r2, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001b3c:	f817 2b01 	ldrb.w	r2, [r7], #1
 8001b40:	f803 2b01 	strb.w	r2, [r3], #1
    if (oqp->q_wrptr >= oqp->q_top) {
 8001b44:	6922      	ldr	r2, [r4, #16]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001b46:	6163      	str	r3, [r4, #20]
    if (oqp->q_wrptr >= oqp->q_top) {
 8001b48:	4293      	cmp	r3, r2
      oqp->q_wrptr = oqp->q_buffer;
 8001b4a:	bf24      	itt	cs
 8001b4c:	68e3      	ldrcs	r3, [r4, #12]
 8001b4e:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 8001b50:	f1b8 0f00 	cmp.w	r8, #0
 8001b54:	d000      	beq.n	8001b58 <chOQWriteTimeout+0x48>
      nfy(oqp);
 8001b56:	47c0      	blx	r8
 8001b58:	f389 8811 	msr	BASEPRI, r9
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 8001b5c:	3601      	adds	r6, #1
    if (--n == 0U) {
 8001b5e:	3d01      	subs	r5, #1
 8001b60:	d00f      	beq.n	8001b82 <chOQWriteTimeout+0x72>
 8001b62:	f38a 8811 	msr	BASEPRI, sl
 8001b66:	68a3      	ldr	r3, [r4, #8]
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8001b68:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1e2      	bne.n	8001b34 <chOQWriteTimeout+0x24>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8001b6e:	4620      	mov	r0, r4
 8001b70:	4659      	mov	r1, fp
 8001b72:	9301      	str	r3, [sp, #4]
 8001b74:	f7ff fedc 	bl	8001930 <chThdEnqueueTimeoutS.4343>
 8001b78:	9b01      	ldr	r3, [sp, #4]
 8001b7a:	2800      	cmp	r0, #0
 8001b7c:	d0d7      	beq.n	8001b2e <chOQWriteTimeout+0x1e>
 8001b7e:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 8001b82:	4630      	mov	r0, r6
 8001b84:	b003      	add	sp, #12
 8001b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b8a:	bf00      	nop
 8001b8c:	f3af 8000 	nop.w

08001b90 <writet.7194>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8001b90:	3030      	adds	r0, #48	; 0x30
 8001b92:	f7ff bfbd 	b.w	8001b10 <chOQWriteTimeout>
 8001b96:	bf00      	nop
 8001b98:	f3af 8000 	nop.w
 8001b9c:	f3af 8000 	nop.w

08001ba0 <write.7200>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8001ba0:	3030      	adds	r0, #48	; 0x30
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba6:	f7ff bfb3 	b.w	8001b10 <chOQWriteTimeout>
 8001baa:	bf00      	nop
 8001bac:	f3af 8000 	nop.w

08001bb0 <chSemWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8001bb0:	4603      	mov	r3, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
 8001bb2:	6880      	ldr	r0, [r0, #8]
 8001bb4:	1e42      	subs	r2, r0, #1
 8001bb6:	2a00      	cmp	r2, #0
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8001bb8:	b410      	push	{r4}
 8001bba:	460c      	mov	r4, r1
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	db02      	blt.n	8001bc6 <chSemWaitTimeoutS+0x16>
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
 8001bc0:	2000      	movs	r0, #0
}
 8001bc2:	bc10      	pop	{r4}
 8001bc4:	4770      	bx	lr
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
 8001bc6:	b159      	cbz	r1, 8001be0 <chSemWaitTimeoutS+0x30>
      sp->s_cnt++;

      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
 8001bc8:	4a07      	ldr	r2, [pc, #28]	; (8001be8 <chSemWaitTimeoutS+0x38>)
 8001bca:	6992      	ldr	r2, [r2, #24]
 8001bcc:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8001bce:	6858      	ldr	r0, [r3, #4]
  cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 8001bd0:	6013      	str	r3, [r2, #0]
  tp->p_prev = tqp->p_prev;
 8001bd2:	6050      	str	r0, [r2, #4]
  tp->p_prev->p_next = tp;
 8001bd4:	6002      	str	r2, [r0, #0]
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8001bd6:	2005      	movs	r0, #5
  tqp->p_prev = tp;
 8001bd8:	605a      	str	r2, [r3, #4]
  }

  return MSG_OK;
}
 8001bda:	bc10      	pop	{r4}
      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8001bdc:	f7ff bc18 	b.w	8001410 <chSchGoSleepTimeoutS>
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
 8001be0:	6098      	str	r0, [r3, #8]

      return MSG_TIMEOUT;
 8001be2:	f04f 30ff 	mov.w	r0, #4294967295
 8001be6:	e7ec      	b.n	8001bc2 <chSemWaitTimeoutS+0x12>
 8001be8:	200011e0 	.word	0x200011e0
 8001bec:	f3af 8000 	nop.w

08001bf0 <chMBFetch.constprop.21>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBFetch(mailbox_t *mbp, msg_t *msgp, systime_t timeout) {
 8001bf0:	b538      	push	{r3, r4, r5, lr}
 8001bf2:	4605      	mov	r5, r0
 8001bf4:	2320      	movs	r3, #32
 8001bf6:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
 8001bfa:	480d      	ldr	r0, [pc, #52]	; (8001c30 <chMBFetch.constprop.21+0x40>)
 8001bfc:	f7ff ffd8 	bl	8001bb0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8001c00:	4604      	mov	r4, r0
 8001c02:	b980      	cbnz	r0, 8001c26 <chMBFetch.constprop.21+0x36>
    *msgp = *mbp->mb_rdptr++;
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <chMBFetch.constprop.21+0x44>)
 8001c06:	68da      	ldr	r2, [r3, #12]
    if (mbp->mb_rdptr >= mbp->mb_top) {
 8001c08:	6859      	ldr	r1, [r3, #4]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8001c0a:	f852 0b04 	ldr.w	r0, [r2], #4
    if (mbp->mb_rdptr >= mbp->mb_top) {
 8001c0e:	428a      	cmp	r2, r1
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8001c10:	6028      	str	r0, [r5, #0]
 8001c12:	60da      	str	r2, [r3, #12]
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
 8001c14:	bf28      	it	cs
 8001c16:	681a      	ldrcs	r2, [r3, #0]
    }
    chSemSignalI(&mbp->mb_emptysem);
 8001c18:	4807      	ldr	r0, [pc, #28]	; (8001c38 <chMBFetch.constprop.21+0x48>)

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
 8001c1a:	bf28      	it	cs
 8001c1c:	60da      	strcs	r2, [r3, #12]
    }
    chSemSignalI(&mbp->mb_emptysem);
 8001c1e:	f003 fca7 	bl	8005570 <chSemSignalI>
    chSchRescheduleS();
 8001c22:	f003 f9f5 	bl	8005010 <chSchRescheduleS>
 8001c26:	2300      	movs	r3, #0
 8001c28:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBFetchS(mbp, msgp, timeout);
  chSysUnlock();

  return rdymsg;
}
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	bd38      	pop	{r3, r4, r5, pc}
 8001c30:	20000864 	.word	0x20000864
 8001c34:	20000854 	.word	0x20000854
 8001c38:	20000870 	.word	0x20000870
 8001c3c:	00000000 	.word	0x00000000

08001c40 <test_start_timer.constprop.8>:
/**
 * @brief   Starts the test timer.
 *
 * @param[in] ms        time in milliseconds
 */
void test_start_timer(unsigned ms) {
 8001c40:	b508      	push	{r3, lr}

  systime_t duration = MS2ST(ms);
  test_timer_done = FALSE;
 8001c42:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <test_start_timer.constprop.8+0x30>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	2320      	movs	r3, #32
 8001c4a:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {

  chDbgCheckClassI();

  return (bool)(vtp->vt_func != NULL);
 8001c4e:	4809      	ldr	r0, [pc, #36]	; (8001c74 <test_start_timer.constprop.8+0x34>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8001c50:	68c3      	ldr	r3, [r0, #12]
 8001c52:	b10b      	cbz	r3, 8001c58 <test_start_timer.constprop.8+0x18>
    chVTDoResetI(vtp);
 8001c54:	f7ff fb5c 	bl	8001310 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8001c58:	2300      	movs	r3, #0
 8001c5a:	4806      	ldr	r0, [pc, #24]	; (8001c74 <test_start_timer.constprop.8+0x34>)
 8001c5c:	4a06      	ldr	r2, [pc, #24]	; (8001c78 <test_start_timer.constprop.8+0x38>)
 8001c5e:	f242 7110 	movw	r1, #10000	; 0x2710
 8001c62:	f7ff f86d 	bl	8000d40 <chVTDoSetI>
 8001c66:	2300      	movs	r3, #0
 8001c68:	f383 8811 	msr	BASEPRI, r3
 8001c6c:	bd08      	pop	{r3, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000924 	.word	0x20000924
 8001c74:	20000904 	.word	0x20000904
 8001c78:	08003501 	.word	0x08003501
 8001c7c:	f3af 8000 	nop.w

08001c80 <bmk6_execute.9763>:
 * terminate.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk6_execute(void) {
 8001c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c82:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <bmk6_execute.9763+0x4c>)
 8001c84:	4f12      	ldr	r7, [pc, #72]	; (8001cd0 <bmk6_execute.9763+0x50>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	b083      	sub	sp, #12

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 8001c8a:	689e      	ldr	r6, [r3, #8]
  test_wait_tick();
 8001c8c:	f7ff fbf0 	bl	8001470 <test_wait_tick>
  test_start_timer(1000);
 8001c90:	f7ff ffd6 	bl	8001c40 <test_start_timer.constprop.8>
 * a second of continuous operations.
 */

static void bmk6_execute(void) {

  uint32_t n = 0;
 8001c94:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 8001c96:	3601      	adds	r6, #1
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 8001c98:	4625      	mov	r5, r4
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <bmk6_execute.9763+0x54>)
 8001c9c:	9500      	str	r5, [sp, #0]
 8001c9e:	480e      	ldr	r0, [pc, #56]	; (8001cd8 <bmk6_execute.9763+0x58>)
 8001ca0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001ca4:	4632      	mov	r2, r6
 8001ca6:	f003 fa33 	bl	8005110 <chThdCreateStatic>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8001caa:	783b      	ldrb	r3, [r7, #0]
  tprio_t prio = chThdGetPriorityX() + 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
    n++;
 8001cac:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f3      	beq.n	8001c9a <bmk6_execute.9763+0x1a>
  test_print("--- Score : ");
 8001cb2:	480a      	ldr	r0, [pc, #40]	; (8001cdc <bmk6_execute.9763+0x5c>)
 8001cb4:	f001 fe64 	bl	8003980 <test_print>
  test_printn(n);
 8001cb8:	4620      	mov	r0, r4
 8001cba:	f001 fe71 	bl	80039a0 <test_printn>
  test_println(" threads/S");
 8001cbe:	4808      	ldr	r0, [pc, #32]	; (8001ce0 <bmk6_execute.9763+0x60>)
}
 8001cc0:	b003      	add	sp, #12
 8001cc2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 8001cc6:	f001 be43 	b.w	8003950 <test_println>
 8001cca:	bf00      	nop
 8001ccc:	200011e0 	.word	0x200011e0
 8001cd0:	20000924 	.word	0x20000924
 8001cd4:	08003411 	.word	0x08003411
 8001cd8:	20000998 	.word	0x20000998
 8001cdc:	08005ed0 	.word	0x08005ed0
 8001ce0:	08005ee0 	.word	0x08005ee0
 8001ce4:	f3af 8000 	nop.w
 8001ce8:	f3af 8000 	nop.w
 8001cec:	f3af 8000 	nop.w

08001cf0 <msg1_execute.8572>:
  chMsgSend(p, 'A');
  chMsgSend(p, 'B');
  chMsgSend(p, 'C');
}

static void msg1_execute(void) {
 8001cf0:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001cf2:	f241 13e0 	movw	r3, #4576	; 0x11e0
 8001cf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	699b      	ldr	r3, [r3, #24]
  msg_t msg;

  /*
   * Testing the whole messages loop.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	f640 1098 	movw	r0, #2456	; 0x998
 8001d06:	f243 5351 	movw	r3, #13649	; 0x3551
 8001d0a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001d0e:	3201      	adds	r2, #1
 8001d10:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001d14:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001d18:	f003 f9fa 	bl	8005110 <chThdCreateStatic>
 8001d1c:	f241 3330 	movw	r3, #4912	; 0x1330
 8001d20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d24:	2420      	movs	r4, #32
 8001d26:	6018      	str	r0, [r3, #0]
                                 thread, chThdGetSelfX());
  tp = chMsgWait();
 8001d28:	f003 fa4a 	bl	80051c0 <chMsgWait>
 *
 * @api
 */
static inline msg_t chMsgGet(thread_t *tp) {

  return tp->p_msg;
 8001d2c:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8001d2e:	f384 8811 	msr	BASEPRI, r4
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8001d32:	4631      	mov	r1, r6
 8001d34:	f003 f9a4 	bl	8005080 <chSchWakeupS>
 8001d38:	2500      	movs	r5, #0
 8001d3a:	f385 8811 	msr	BASEPRI, r5
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8001d3e:	b2f0      	uxtb	r0, r6
 8001d40:	f001 fd8e 	bl	8003860 <test_emit_token>
  tp = chMsgWait();
 8001d44:	f003 fa3c 	bl	80051c0 <chMsgWait>
 *
 * @api
 */
static inline msg_t chMsgGet(thread_t *tp) {

  return tp->p_msg;
 8001d48:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8001d4a:	f384 8811 	msr	BASEPRI, r4
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8001d4e:	4631      	mov	r1, r6
 8001d50:	f003 f996 	bl	8005080 <chSchWakeupS>
 8001d54:	f385 8811 	msr	BASEPRI, r5
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8001d58:	b2f0      	uxtb	r0, r6
 8001d5a:	f001 fd81 	bl	8003860 <test_emit_token>
  tp = chMsgWait();
 8001d5e:	f003 fa2f 	bl	80051c0 <chMsgWait>
 *
 * @api
 */
static inline msg_t chMsgGet(thread_t *tp) {

  return tp->p_msg;
 8001d62:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8001d64:	f384 8811 	msr	BASEPRI, r4
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8001d68:	4631      	mov	r1, r6
 8001d6a:	f003 f989 	bl	8005080 <chSchWakeupS>
 8001d6e:	f385 8811 	msr	BASEPRI, r5
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8001d72:	b2f0      	uxtb	r0, r6
 8001d74:	f001 fd74 	bl	8003860 <test_emit_token>
  test_assert_sequence(1, "ABC");
 8001d78:	f645 51ec 	movw	r1, #24044	; 0x5dec
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f6c0 0100 	movt	r1, #2048	; 0x800
}
 8001d82:	b002      	add	sp, #8
 8001d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  test_emit_token(msg);
  tp = chMsgWait();
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
  test_assert_sequence(1, "ABC");
 8001d88:	f001 bc3a 	b.w	8003600 <_test_assert_sequence>
 8001d8c:	f3af 8000 	nop.w

08001d90 <bmk4_execute.9771>:
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
  chSysUnlock();
}

static void bmk4_execute(void) {
 8001d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001d94:	4a24      	ldr	r2, [pc, #144]	; (8001e28 <bmk4_execute.9771+0x98>)
  thread_t *tp;
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8001d96:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <bmk4_execute.9771+0x9c>)
 8001d98:	6992      	ldr	r2, [r2, #24]
 8001d9a:	4825      	ldr	r0, [pc, #148]	; (8001e30 <bmk4_execute.9771+0xa0>)
 8001d9c:	6892      	ldr	r2, [r2, #8]
 8001d9e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8001e40 <bmk4_execute.9771+0xb0>
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
  chSysUnlock();
}

static void bmk4_execute(void) {
 8001da2:	b082      	sub	sp, #8
  thread_t *tp;
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8001da4:	2500      	movs	r5, #0
 8001da6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001daa:	3201      	adds	r2, #1
 8001dac:	9500      	str	r5, [sp, #0]
 8001dae:	f003 f9af 	bl	8005110 <chThdCreateStatic>
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <bmk4_execute.9771+0xa4>)
 8001db4:	4604      	mov	r4, r0
 8001db6:	6018      	str	r0, [r3, #0]
                                      thread4, NULL);
  n = 0;
  test_wait_tick();
 8001db8:	f7ff fb5a 	bl	8001470 <test_wait_tick>
  test_start_timer(1000);
 8001dbc:	f7ff ff40 	bl	8001c40 <test_start_timer.constprop.8>
 8001dc0:	2720      	movs	r7, #32
  do {
    chSysLock();
    chSchWakeupS(tp, MSG_OK);
 8001dc2:	462e      	mov	r6, r5
 8001dc4:	f387 8811 	msr	BASEPRI, r7
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4620      	mov	r0, r4
 8001dcc:	f003 f958 	bl	8005080 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	f003 f954 	bl	8005080 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8001dd8:	4620      	mov	r0, r4
 8001dda:	2100      	movs	r1, #0
 8001ddc:	f003 f950 	bl	8005080 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8001de0:	4620      	mov	r0, r4
 8001de2:	2100      	movs	r1, #0
 8001de4:	f003 f94c 	bl	8005080 <chSchWakeupS>
 8001de8:	f386 8811 	msr	BASEPRI, r6
    chSysUnlock();
    n += 4;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8001dec:	f898 3000 	ldrb.w	r3, [r8]
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSysUnlock();
    n += 4;
 8001df0:	3504      	adds	r5, #4
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0e6      	beq.n	8001dc4 <bmk4_execute.9771+0x34>
 8001df6:	2320      	movs	r3, #32
 8001df8:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chSchWakeupS(tp, MSG_TIMEOUT);
 8001dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001e00:	4620      	mov	r0, r4
 8001e02:	f003 f93d 	bl	8005080 <chSchWakeupS>
 8001e06:	2300      	movs	r3, #0
 8001e08:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  test_wait_threads();
 8001e0c:	f002 f8c0 	bl	8003f90 <test_wait_threads>
  test_print("--- Score : ");
 8001e10:	4809      	ldr	r0, [pc, #36]	; (8001e38 <bmk4_execute.9771+0xa8>)
 8001e12:	f001 fdb5 	bl	8003980 <test_print>
  test_printn(n * 2);
 8001e16:	0068      	lsls	r0, r5, #1
 8001e18:	f001 fdc2 	bl	80039a0 <test_printn>
  test_println(" ctxswc/S");
 8001e1c:	4807      	ldr	r0, [pc, #28]	; (8001e3c <bmk4_execute.9771+0xac>)
}
 8001e1e:	b002      	add	sp, #8
 8001e20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  chSysUnlock();

  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" ctxswc/S");
 8001e24:	f001 bd94 	b.w	8003950 <test_println>
 8001e28:	200011e0 	.word	0x200011e0
 8001e2c:	08000b41 	.word	0x08000b41
 8001e30:	20000998 	.word	0x20000998
 8001e34:	20001330 	.word	0x20001330
 8001e38:	08005ed0 	.word	0x08005ed0
 8001e3c:	08005eec 	.word	0x08005eec
 8001e40:	20000924 	.word	0x20000924
 8001e44:	f3af 8000 	nop.w
 8001e48:	f3af 8000 	nop.w
 8001e4c:	f3af 8000 	nop.w

08001e50 <sem2_execute.8272>:
  chSysUnlock();
}

static void sem2_execute(void) {
 8001e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e54:	2520      	movs	r5, #32
 8001e56:	b082      	sub	sp, #8
 8001e58:	f385 8811 	msr	BASEPRI, r5
  msg_t msg;

  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
 8001e5c:	4c56      	ldr	r4, [pc, #344]	; (8001fb8 <sem2_execute.8272+0x168>)
 */
msg_t chSemWaitTimeout(semaphore_t *sp, systime_t time) {
  msg_t msg;

  chSysLock();
  msg = chSemWaitTimeoutS(sp, time);
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4620      	mov	r0, r4
 8001e62:	f7ff fea5 	bl	8001bb0 <chSemWaitTimeoutS>
 8001e66:	2300      	movs	r3, #0
 8001e68:	4601      	mov	r1, r0
 8001e6a:	f383 8811 	msr	BASEPRI, r3
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f1b1 33ff 	subs.w	r3, r1, #4294967295
 8001e74:	4259      	negs	r1, r3
 8001e76:	4159      	adcs	r1, r3
 8001e78:	f001 fbf2 	bl	8003660 <_test_assert>
 8001e7c:	b110      	cbz	r0, 8001e84 <sem2_execute.8272+0x34>
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
}
 8001e7e:	b002      	add	sp, #8
 8001e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @notapi
 */
static inline bool queue_isempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (const thread_t *)tqp);
 8001e84:	6821      	ldr	r1, [r4, #0]
  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
  test_assert(2, queue_isempty(&sem1.s_queue), "queue not empty");
 8001e86:	2002      	movs	r0, #2
 8001e88:	ebb1 0c04 	subs.w	ip, r1, r4
 8001e8c:	f1dc 0100 	rsbs	r1, ip, #0
 8001e90:	eb51 010c 	adcs.w	r1, r1, ip
 8001e94:	f001 fbe4 	bl	8003660 <_test_assert>
 8001e98:	2800      	cmp	r0, #0
 8001e9a:	d1f0      	bne.n	8001e7e <sem2_execute.8272+0x2e>
  test_assert(3, sem1.s_cnt == 0, "counter not zero");
 8001e9c:	68a1      	ldr	r1, [r4, #8]
 8001e9e:	2003      	movs	r0, #3
 8001ea0:	f1d1 0101 	rsbs	r1, r1, #1
 8001ea4:	bf38      	it	cc
 8001ea6:	2100      	movcc	r1, #0
 8001ea8:	f001 fbda 	bl	8003660 <_test_assert>
 8001eac:	4606      	mov	r6, r0
 8001eae:	2800      	cmp	r0, #0
 8001eb0:	d1e5      	bne.n	8001e7e <sem2_execute.8272+0x2e>
 8001eb2:	4a42      	ldr	r2, [pc, #264]	; (8001fbc <sem2_execute.8272+0x16c>)

  /*
   * Testing not timeout condition.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8001eb4:	4b42      	ldr	r3, [pc, #264]	; (8001fc0 <sem2_execute.8272+0x170>)
 8001eb6:	6992      	ldr	r2, [r2, #24]
 8001eb8:	4842      	ldr	r0, [pc, #264]	; (8001fc4 <sem2_execute.8272+0x174>)
 8001eba:	6892      	ldr	r2, [r2, #8]
 8001ebc:	9600      	str	r6, [sp, #0]
 8001ebe:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001ec2:	3a01      	subs	r2, #1
 8001ec4:	f003 f924 	bl	8005110 <chThdCreateStatic>
 8001ec8:	4b3f      	ldr	r3, [pc, #252]	; (8001fc8 <sem2_execute.8272+0x178>)
 8001eca:	6018      	str	r0, [r3, #0]
 8001ecc:	f385 8811 	msr	BASEPRI, r5
 8001ed0:	f241 3188 	movw	r1, #5000	; 0x1388
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	f7ff fe6b 	bl	8001bb0 <chSemWaitTimeoutS>
 8001eda:	4607      	mov	r7, r0
 8001edc:	f386 8811 	msr	BASEPRI, r6
                                 thread2, 0);
  msg = chSemWaitTimeout(&sem1, MS2ST(500));
  test_wait_threads();
 8001ee0:	f002 f856 	bl	8003f90 <test_wait_threads>
  test_assert(4, msg == MSG_OK, "wrong wake-up message");
 8001ee4:	2004      	movs	r0, #4
 8001ee6:	f1d7 0101 	rsbs	r1, r7, #1
 8001eea:	bf38      	it	cc
 8001eec:	2100      	movcc	r1, #0
 8001eee:	f001 fbb7 	bl	8003660 <_test_assert>
 8001ef2:	2800      	cmp	r0, #0
 8001ef4:	d1c3      	bne.n	8001e7e <sem2_execute.8272+0x2e>
 8001ef6:	6821      	ldr	r1, [r4, #0]
  test_assert(5, queue_isempty(&sem1.s_queue), "queue not empty");
 8001ef8:	2005      	movs	r0, #5
 8001efa:	ebb1 0e04 	subs.w	lr, r1, r4
 8001efe:	f1de 0100 	rsbs	r1, lr, #0
 8001f02:	eb51 010e 	adcs.w	r1, r1, lr
 8001f06:	f001 fbab 	bl	8003660 <_test_assert>
 8001f0a:	2800      	cmp	r0, #0
 8001f0c:	d1b7      	bne.n	8001e7e <sem2_execute.8272+0x2e>
  test_assert(6, sem1.s_cnt == 0, "counter not zero");
 8001f0e:	68a1      	ldr	r1, [r4, #8]
 8001f10:	2006      	movs	r0, #6
 8001f12:	f1d1 0101 	rsbs	r1, r1, #1
 8001f16:	bf38      	it	cc
 8001f18:	2100      	movcc	r1, #0
 8001f1a:	f001 fba1 	bl	8003660 <_test_assert>
 8001f1e:	4680      	mov	r8, r0
 8001f20:	2800      	cmp	r0, #0
 8001f22:	d1ac      	bne.n	8001e7e <sem2_execute.8272+0x2e>

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
 8001f24:	f7ff faa4 	bl	8001470 <test_wait_tick>
 8001f28:	f385 8811 	msr	BASEPRI, r5
 8001f2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f30:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8001f32:	f388 8811 	msr	BASEPRI, r8
 8001f36:	2641      	movs	r6, #65	; 0x41
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 8001f38:	4630      	mov	r0, r6
 8001f3a:	f001 fc91 	bl	8003860 <test_emit_token>
 8001f3e:	f385 8811 	msr	BASEPRI, r5
 8001f42:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001f46:	481c      	ldr	r0, [pc, #112]	; (8001fb8 <sem2_execute.8272+0x168>)
 8001f48:	f7ff fe32 	bl	8001bb0 <chSemWaitTimeoutS>
 8001f4c:	4601      	mov	r1, r0
 8001f4e:	f388 8811 	msr	BASEPRI, r8
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 8001f52:	2007      	movs	r0, #7
 8001f54:	f1b1 32ff 	subs.w	r2, r1, #4294967295
 8001f58:	4251      	negs	r1, r2
 8001f5a:	4151      	adcs	r1, r2
 8001f5c:	f001 fb80 	bl	8003660 <_test_assert>
 8001f60:	2800      	cmp	r0, #0
 8001f62:	d18c      	bne.n	8001e7e <sem2_execute.8272+0x2e>
 8001f64:	6821      	ldr	r1, [r4, #0]
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 8001f66:	2008      	movs	r0, #8
 8001f68:	1b0b      	subs	r3, r1, r4
 8001f6a:	4259      	negs	r1, r3
 8001f6c:	4159      	adcs	r1, r3
 8001f6e:	f001 fb77 	bl	8003660 <_test_assert>
 8001f72:	2800      	cmp	r0, #0
 8001f74:	d183      	bne.n	8001e7e <sem2_execute.8272+0x2e>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 8001f76:	68a1      	ldr	r1, [r4, #8]
 8001f78:	2009      	movs	r0, #9
 8001f7a:	f1d1 0101 	rsbs	r1, r1, #1
 8001f7e:	bf38      	it	cc
 8001f80:	2100      	movcc	r1, #0
 8001f82:	f001 fb6d 	bl	8003660 <_test_assert>
 8001f86:	3601      	adds	r6, #1
 8001f88:	b2f6      	uxtb	r6, r6
 8001f8a:	2800      	cmp	r0, #0
 8001f8c:	f47f af77 	bne.w	8001e7e <sem2_execute.8272+0x2e>
  /*
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
 8001f90:	2e46      	cmp	r6, #70	; 0x46
 8001f92:	d1d1      	bne.n	8001f38 <sem2_execute.8272+0xe8>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
 8001f94:	200a      	movs	r0, #10
 8001f96:	490d      	ldr	r1, [pc, #52]	; (8001fcc <sem2_execute.8272+0x17c>)
 8001f98:	f001 fb32 	bl	8003600 <_test_assert_sequence>
 8001f9c:	2800      	cmp	r0, #0
 8001f9e:	f47f af6e 	bne.w	8001e7e <sem2_execute.8272+0x2e>
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 8001fa2:	200b      	movs	r0, #11
 8001fa4:	f607 11c4 	addw	r1, r7, #2500	; 0x9c4
 8001fa8:	f607 12d8 	addw	r2, r7, #2520	; 0x9d8
}
 8001fac:	b002      	add	sp, #8
 8001fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 8001fb2:	f001 bb05 	b.w	80035c0 <_test_assert_time_window>
 8001fb6:	bf00      	nop
 8001fb8:	20000824 	.word	0x20000824
 8001fbc:	200011e0 	.word	0x200011e0
 8001fc0:	08001491 	.word	0x08001491
 8001fc4:	20000998 	.word	0x20000998
 8001fc8:	20001330 	.word	0x20001330
 8001fcc:	08005df4 	.word	0x08005df4

08001fd0 <vtcb.9574.4096>:
 *
 * <h2>Description</h2>
 * The critical zones API is invoked for coverage.
 */

static void vtcb(void *p) {
 8001fd0:	b508      	push	{r3, lr}
 8001fd2:	2320      	movs	r3, #32
 8001fd4:	f383 8811 	msr	BASEPRI, r3
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f382 8811 	msr	BASEPRI, r2
 8001fde:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001fe2:	f3ef 8311 	mrs	r3, BASEPRI
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 8001fe6:	b91b      	cbnz	r3, 8001ff0 <vtcb.9574.4096+0x20>
 8001fe8:	f003 fb32 	bl	8005650 <chSysGetStatusAndLockX.part.1.4303>
 8001fec:	f003 f838 	bl	8005060 <chSysRestoreStatusX.part.2.4306>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f383 8811 	msr	BASEPRI, r3
 8001ff6:	bd08      	pop	{r3, pc}
 8001ff8:	f3af 8000 	nop.w
 8001ffc:	f3af 8000 	nop.w

08002000 <sys1_execute.9602>:
  sts = chSysGetStatusAndLockX();
  chSysRestoreStatusX(sts);
  chSysUnlockFromISR();
}

static void sys1_execute(void) {
 8002000:	b510      	push	{r4, lr}
 8002002:	b086      	sub	sp, #24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002004:	f3ef 8311 	mrs	r3, BASEPRI
 8002008:	b91b      	cbnz	r3, 8002012 <sys1_execute.9602+0x12>
 800200a:	f003 fb21 	bl	8005650 <chSysGetStatusAndLockX.part.1.4303>
 800200e:	f003 f827 	bl	8005060 <chSysRestoreStatusX.part.2.4306>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002012:	2320      	movs	r3, #32
 8002014:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002018:	f3ef 8311 	mrs	r3, BASEPRI
 800201c:	b91b      	cbnz	r3, 8002026 <sys1_execute.9602+0x26>
 800201e:	f003 fb17 	bl	8005650 <chSysGetStatusAndLockX.part.1.4303>
 8002022:	f003 f81d 	bl	8005060 <chSysRestoreStatusX.part.2.4306>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002026:	2300      	movs	r3, #0
 8002028:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800202c:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 8002030:	b913      	cbnz	r3, 8002038 <sys1_execute.9602+0x38>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002032:	2320      	movs	r3, #32
 8002034:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002038:	f3ef 8311 	mrs	r3, BASEPRI
 800203c:	b913      	cbnz	r3, 8002044 <sys1_execute.9602+0x44>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800203e:	2320      	movs	r3, #32
 8002040:	f383 8811 	msr	BASEPRI, r3
 8002044:	2300      	movs	r3, #0
 8002046:	f383 8811 	msr	BASEPRI, r3
 800204a:	2220      	movs	r2, #32
 800204c:	f382 8811 	msr	BASEPRI, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002050:	f3ef 8211 	mrs	r2, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 8002054:	b10a      	cbz	r2, 800205a <sys1_execute.9602+0x5a>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002056:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800205a:	f3ef 8311 	mrs	r3, BASEPRI
 800205e:	b113      	cbz	r3, 8002066 <sys1_execute.9602+0x66>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002060:	2300      	movs	r3, #0
 8002062:	f383 8811 	msr	BASEPRI, r3
 *
 * @init
 */
static inline void chVTObjectInit(virtual_timer_t *vtp) {

  vtp->vt_func = NULL;
 8002066:	2300      	movs	r3, #0
 8002068:	9304      	str	r3, [sp, #16]
 800206a:	2320      	movs	r3, #32
 800206c:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8002070:	9b04      	ldr	r3, [sp, #16]
  chSysUnconditionalUnlock();
  chSysUnconditionalUnlock();

  /*/Testing from ISR context using a virtual timer.*/
  chVTObjectInit(&vt);
  chVTSet(&vt, 1, vtcb, NULL);
 8002072:	ac01      	add	r4, sp, #4
 8002074:	b113      	cbz	r3, 800207c <sys1_execute.9602+0x7c>
    chVTDoResetI(vtp);
 8002076:	4620      	mov	r0, r4
 8002078:	f7ff f94a 	bl	8001310 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 800207c:	4620      	mov	r0, r4
 800207e:	2101      	movs	r1, #1
 8002080:	4a0b      	ldr	r2, [pc, #44]	; (80020b0 <sys1_execute.9602+0xb0>)
 8002082:	2300      	movs	r3, #0
 8002084:	f7fe fe5c 	bl	8000d40 <chVTDoSetI>
 8002088:	2400      	movs	r4, #0
 800208a:	f384 8811 	msr	BASEPRI, r4
  chThdSleep(10);
 800208e:	200a      	movs	r0, #10
 8002090:	f7ff f9de 	bl	8001450 <chThdSleep>
 8002094:	2320      	movs	r3, #32
 8002096:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {

  chDbgCheckClassI();

  return (bool)(vtp->vt_func != NULL);
 800209a:	9904      	ldr	r1, [sp, #16]
 800209c:	f384 8811 	msr	BASEPRI, r4

  test_assert(1, chVTIsArmed(&vt) == false, "timer still armed");
 80020a0:	2001      	movs	r0, #1
 80020a2:	1b0a      	subs	r2, r1, r4
 80020a4:	4251      	negs	r1, r2
 80020a6:	4151      	adcs	r1, r2
 80020a8:	f001 fada 	bl	8003660 <_test_assert>
}
 80020ac:	b006      	add	sp, #24
 80020ae:	bd10      	pop	{r4, pc}
 80020b0:	08001fd1 	.word	0x08001fd1
 80020b4:	f3af 8000 	nop.w
 80020b8:	f3af 8000 	nop.w
 80020bc:	f3af 8000 	nop.w

080020c0 <bmk10_execute.9756>:
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
 80020c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;

  test_wait_tick();
 80020c2:	f7ff f9d5 	bl	8001470 <test_wait_tick>
  test_start_timer(1000);
 80020c6:	f7ff fdbb 	bl	8001c40 <test_start_timer.constprop.8>

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;
 80020ca:	2400      	movs	r4, #0
 80020cc:	4f14      	ldr	r7, [pc, #80]	; (8002120 <bmk10_execute.9756+0x60>)
 80020ce:	2620      	movs	r6, #32

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chVTDoSetI(&vt1, 1, tmo, NULL);
 80020d0:	4625      	mov	r5, r4
 80020d2:	f386 8811 	msr	BASEPRI, r6
 80020d6:	2101      	movs	r1, #1
 80020d8:	2300      	movs	r3, #0
 80020da:	4812      	ldr	r0, [pc, #72]	; (8002124 <bmk10_execute.9756+0x64>)
 80020dc:	4a12      	ldr	r2, [pc, #72]	; (8002128 <bmk10_execute.9756+0x68>)
 80020de:	f7fe fe2f 	bl	8000d40 <chVTDoSetI>
    chVTDoSetI(&vt2, 10000, tmo, NULL);
 80020e2:	f242 7110 	movw	r1, #10000	; 0x2710
 80020e6:	4a10      	ldr	r2, [pc, #64]	; (8002128 <bmk10_execute.9756+0x68>)
 80020e8:	4810      	ldr	r0, [pc, #64]	; (800212c <bmk10_execute.9756+0x6c>)
 80020ea:	2300      	movs	r3, #0
 80020ec:	f7fe fe28 	bl	8000d40 <chVTDoSetI>
    chVTDoResetI(&vt1);
 80020f0:	480c      	ldr	r0, [pc, #48]	; (8002124 <bmk10_execute.9756+0x64>)
 80020f2:	f7ff f90d 	bl	8001310 <chVTDoResetI>
    chVTDoResetI(&vt2);
 80020f6:	480d      	ldr	r0, [pc, #52]	; (800212c <bmk10_execute.9756+0x6c>)
 80020f8:	f7ff f90a 	bl	8001310 <chVTDoResetI>
 80020fc:	f385 8811 	msr	BASEPRI, r5
    chSysUnlock();
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002100:	783b      	ldrb	r3, [r7, #0]
    chVTDoSetI(&vt1, 1, tmo, NULL);
    chVTDoSetI(&vt2, 10000, tmo, NULL);
    chVTDoResetI(&vt1);
    chVTDoResetI(&vt2);
    chSysUnlock();
    n++;
 8002102:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0e4      	beq.n	80020d2 <bmk10_execute.9756+0x12>
  test_print("--- Score : ");
 8002108:	4809      	ldr	r0, [pc, #36]	; (8002130 <bmk10_execute.9756+0x70>)
 800210a:	f001 fc39 	bl	8003980 <test_print>
  test_printn(n * 2);
 800210e:	0060      	lsls	r0, r4, #1
 8002110:	f001 fc46 	bl	80039a0 <test_printn>
  test_println(" timers/S");
 8002114:	4807      	ldr	r0, [pc, #28]	; (8002134 <bmk10_execute.9756+0x74>)
}
 8002116:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" timers/S");
 800211a:	f001 bc19 	b.w	8003950 <test_println>
 800211e:	bf00      	nop
 8002120:	20000924 	.word	0x20000924
 8002124:	20000928 	.word	0x20000928
 8002128:	080005c1 	.word	0x080005c1
 800212c:	20000960 	.word	0x20000960
 8002130:	08005ed0 	.word	0x08005ed0
 8002134:	08005ef8 	.word	0x08005ef8
 8002138:	f3af 8000 	nop.w
 800213c:	f3af 8000 	nop.w

08002140 <evt1_execute.8918>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
static ROMCONST evhandler_t evhndl[] = {h1, h2, h3};

static void evt1_execute(void) {
 8002140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8002144:	4c33      	ldr	r4, [pc, #204]	; (8002214 <evt1_execute.8918+0xd4>)
 8002146:	6024      	str	r4, [r4, #0]
 8002148:	b08a      	sub	sp, #40	; 0x28
 800214a:	2120      	movs	r1, #32
 800214c:	f381 8811 	msr	BASEPRI, r1
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8002150:	6823      	ldr	r3, [r4, #0]
  esp->es_next     = elp;
  elp->el_listener = currp;
 8002152:	4a31      	ldr	r2, [pc, #196]	; (8002218 <evt1_execute.8918+0xd8>)
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8002154:	ad0a      	add	r5, sp, #40	; 0x28
  esp->es_next     = elp;
  elp->el_listener = currp;
 8002156:	6996      	ldr	r6, [r2, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8002158:	f845 3d28 	str.w	r3, [r5, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 800215c:	2701      	movs	r7, #1

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 800215e:	6025      	str	r5, [r4, #0]
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 8002160:	2300      	movs	r3, #0
  elp->el_wflags   = wflags;
 8002162:	f04f 30ff 	mov.w	r0, #4294967295
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8002166:	9601      	str	r6, [sp, #4]
  elp->el_events   = events;
 8002168:	9702      	str	r7, [sp, #8]
  elp->el_flags    = (eventflags_t)0;
 800216a:	9303      	str	r3, [sp, #12]
  elp->el_wflags   = wflags;
 800216c:	9004      	str	r0, [sp, #16]
 800216e:	f383 8811 	msr	BASEPRI, r3
 8002172:	f381 8811 	msr	BASEPRI, r1
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8002176:	6821      	ldr	r1, [r4, #0]
  esp->es_next     = elp;
  elp->el_listener = currp;
 8002178:	6992      	ldr	r2, [r2, #24]
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 800217a:	9308      	str	r3, [sp, #32]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 800217c:	ae0a      	add	r6, sp, #40	; 0x28
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 800217e:	f04f 0802 	mov.w	r8, #2
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8002182:	f846 1d14 	str.w	r1, [r6, #-20]!
  esp->es_next     = elp;
 8002186:	6026      	str	r6, [r4, #0]
  elp->el_listener = currp;
 8002188:	9206      	str	r2, [sp, #24]
  elp->el_events   = events;
 800218a:	f8cd 801c 	str.w	r8, [sp, #28]
  elp->el_flags    = (eventflags_t)0;
  elp->el_wflags   = wflags;
 800218e:	9009      	str	r0, [sp, #36]	; 0x24
 8002190:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline bool chEvtIsListeningI(event_source_t *esp) {

  return (bool)(esp != (event_source_t *)esp->es_next);
 8002194:	6821      	ldr	r1, [r4, #0]
   * Testing chEvtRegisterMask() and chEvtUnregister().
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
 8002196:	1b09      	subs	r1, r1, r4
 8002198:	bf18      	it	ne
 800219a:	2101      	movne	r1, #1
 800219c:	4638      	mov	r0, r7
 800219e:	f001 fa5f 	bl	8003660 <_test_assert>
 80021a2:	b110      	cbz	r0, 80021aa <evt1_execute.8918+0x6a>
  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
}
 80021a4:	b00a      	add	sp, #40	; 0x28
 80021a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
  chEvtUnregister(&es1, &el1);
 80021aa:	4620      	mov	r0, r4
 80021ac:	4669      	mov	r1, sp
 80021ae:	f002 fe67 	bl	8004e80 <chEvtUnregister>
 80021b2:	6821      	ldr	r1, [r4, #0]
  test_assert(2, chEvtIsListeningI(&es1), "no listener");
 80021b4:	1b09      	subs	r1, r1, r4
 80021b6:	bf18      	it	ne
 80021b8:	2101      	movne	r1, #1
 80021ba:	4640      	mov	r0, r8
 80021bc:	f001 fa50 	bl	8003660 <_test_assert>
 80021c0:	2800      	cmp	r0, #0
 80021c2:	d1ef      	bne.n	80021a4 <evt1_execute.8918+0x64>
  chEvtUnregister(&es1, &el2);
 80021c4:	4620      	mov	r0, r4
 80021c6:	4631      	mov	r1, r6
 80021c8:	f002 fe5a 	bl	8004e80 <chEvtUnregister>
  test_assert(3, !chEvtIsListeningI(&es1), "stuck listener");
 80021cc:	6821      	ldr	r1, [r4, #0]
 80021ce:	2003      	movs	r0, #3
 80021d0:	ebb1 0e04 	subs.w	lr, r1, r4
 80021d4:	f1de 0100 	rsbs	r1, lr, #0
 80021d8:	eb51 010e 	adcs.w	r1, r1, lr
 80021dc:	f001 fa40 	bl	8003660 <_test_assert>
 80021e0:	2800      	cmp	r0, #0
 80021e2:	d1df      	bne.n	80021a4 <evt1_execute.8918+0x64>
  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
 80021e4:	4e0d      	ldr	r6, [pc, #52]	; (800221c <evt1_execute.8918+0xdc>)
 80021e6:	4604      	mov	r4, r0
 80021e8:	2507      	movs	r5, #7
 80021ea:	e001      	b.n	80021f0 <evt1_execute.8918+0xb0>
    }
    eid++;
 80021ec:	3401      	adds	r4, #1
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
 80021ee:	b165      	cbz	r5, 800220a <evt1_execute.8918+0xca>
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 80021f0:	fa25 f304 	lsr.w	r3, r5, r4
 80021f4:	07d9      	lsls	r1, r3, #31
 80021f6:	d5f9      	bpl.n	80021ec <evt1_execute.8918+0xac>
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 80021f8:	fa07 f204 	lsl.w	r2, r7, r4
      handlers[eid](eid);
 80021fc:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8002200:	4620      	mov	r0, r4

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8002202:	ea25 0502 	bic.w	r5, r5, r2
      handlers[eid](eid);
 8002206:	4798      	blx	r3
 8002208:	e7f0      	b.n	80021ec <evt1_execute.8918+0xac>

  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
 800220a:	2004      	movs	r0, #4
 800220c:	4904      	ldr	r1, [pc, #16]	; (8002220 <evt1_execute.8918+0xe0>)
 800220e:	f001 f9f7 	bl	8003600 <_test_assert_sequence>
 8002212:	e7c7      	b.n	80021a4 <evt1_execute.8918+0x64>
 8002214:	200008b4 	.word	0x200008b4
 8002218:	200011e0 	.word	0x200011e0
 800221c:	08005ec0 	.word	0x08005ec0
 8002220:	08005dec 	.word	0x08005dec
 8002224:	f3af 8000 	nop.w
 8002228:	f3af 8000 	nop.w
 800222c:	f3af 8000 	nop.w

08002230 <thd4_execute.7992>:
 * <h2>Description</h2>
 * Delay APIs and associated macros are tested, the invoking thread is verified
 * to wake up at the exact expected time.
 */

static void thd4_execute(void) {
 8002230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  systime_t time;

  test_wait_tick();
 8002232:	f7ff f91d 	bl	8001470 <test_wait_tick>
 8002236:	2620      	movs	r6, #32
 8002238:	f386 8811 	msr	BASEPRI, r6
 800223c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8002240:	2300      	movs	r3, #0
 8002242:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8002244:	f383 8811 	msr	BASEPRI, r3

  /* Timeouts in microseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMicroseconds(100000);
 8002248:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800224c:	f7ff f900 	bl	8001450 <chThdSleep>
  test_assert_time_window(1,
 8002250:	2001      	movs	r0, #1
 8002252:	f504 717a 	add.w	r1, r4, #1000	; 0x3e8
 8002256:	f204 32eb 	addw	r2, r4, #1003	; 0x3eb
 800225a:	f001 f9b1 	bl	80035c0 <_test_assert_time_window>
 800225e:	b100      	cbz	r0, 8002262 <thd4_execute.7992+0x32>
 8002260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002262:	f386 8811 	msr	BASEPRI, r6
 8002266:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8002268:	f380 8811 	msr	BASEPRI, r0
                          time + US2ST(100000),
                          time + US2ST(100000) + CH_CFG_ST_TIMEDELTA + 1);

  /* Timeouts in milliseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMilliseconds(100);
 800226c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002270:	f7ff f8ee 	bl	8001450 <chThdSleep>
  test_assert_time_window(2,
 8002274:	2002      	movs	r0, #2
 8002276:	f504 717a 	add.w	r1, r4, #1000	; 0x3e8
 800227a:	f204 32eb 	addw	r2, r4, #1003	; 0x3eb
 800227e:	f001 f99f 	bl	80035c0 <_test_assert_time_window>
 8002282:	2800      	cmp	r0, #0
 8002284:	d1ec      	bne.n	8002260 <thd4_execute.7992+0x30>
 8002286:	f386 8811 	msr	BASEPRI, r6
 800228a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800228c:	f380 8811 	msr	BASEPRI, r0
                          time + MS2ST(100),
                          time + MS2ST(100) + CH_CFG_ST_TIMEDELTA + 1);

  /* Timeouts in seconds.*/
  time = chVTGetSystemTime();
  chThdSleepSeconds(1);
 8002290:	f242 7010 	movw	r0, #10000	; 0x2710
 8002294:	f7ff f8dc 	bl	8001450 <chThdSleep>
  test_assert_time_window(3,
 8002298:	f504 521c 	add.w	r2, r4, #9984	; 0x2700
 800229c:	f102 0110 	add.w	r1, r2, #16
 80022a0:	2003      	movs	r0, #3
 80022a2:	3213      	adds	r2, #19
 80022a4:	f001 f98c 	bl	80035c0 <_test_assert_time_window>
 80022a8:	2800      	cmp	r0, #0
 80022aa:	d1d9      	bne.n	8002260 <thd4_execute.7992+0x30>
 80022ac:	f386 8811 	msr	BASEPRI, r6
 80022b0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80022b2:	f380 8811 	msr	BASEPRI, r0
                          time + S2ST(1),
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA + 1);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
 80022b6:	f507 747a 	add.w	r4, r7, #1000	; 0x3e8
 80022ba:	f386 8811 	msr	BASEPRI, r6
 80022be:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
void chThdSleepUntil(systime_t time) {

  chSysLock();
  time -= chVTGetSystemTimeX();
  if (time > (systime_t)0) {
 80022c0:	1a61      	subs	r1, r4, r1
 80022c2:	d10a      	bne.n	80022da <thd4_execute.7992+0xaa>
 80022c4:	2300      	movs	r3, #0
 80022c6:	f383 8811 	msr	BASEPRI, r3
  chThdSleepUntil(time);
  test_assert_time_window(4,
 80022ca:	2004      	movs	r0, #4
 80022cc:	4621      	mov	r1, r4
 80022ce:	f207 32eb 	addw	r2, r7, #1003	; 0x3eb
                          time,
                          time + CH_CFG_ST_TIMEDELTA + 1);
}
 80022d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA + 1);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
  chThdSleepUntil(time);
  test_assert_time_window(4,
 80022d6:	f001 b973 	b.w	80035c0 <_test_assert_time_window>
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 80022da:	2008      	movs	r0, #8
 80022dc:	f7ff f898 	bl	8001410 <chSchGoSleepTimeoutS>
 80022e0:	e7f0      	b.n	80022c4 <thd4_execute.7992+0x94>
 80022e2:	bf00      	nop
 80022e4:	f3af 8000 	nop.w
 80022e8:	f3af 8000 	nop.w
 80022ec:	f3af 8000 	nop.w

080022f0 <bmk12_execute.9746>:
static void bmk12_setup(void) {

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
 80022f0:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 80022f2:	f7ff f8bd 	bl	8001470 <test_wait_tick>
  test_start_timer(1000);
 80022f6:	f7ff fca3 	bl	8001c40 <test_start_timer.constprop.8>
 80022fa:	4d14      	ldr	r5, [pc, #80]	; (800234c <bmk12_execute.9746+0x5c>)

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
  uint32_t n = 0;
 80022fc:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chMtxLock(&mtx1);
 80022fe:	4814      	ldr	r0, [pc, #80]	; (8002350 <bmk12_execute.9746+0x60>)
 8002300:	f003 f8de 	bl	80054c0 <chMtxLock>
    chMtxUnlock(&mtx1);
 8002304:	4812      	ldr	r0, [pc, #72]	; (8002350 <bmk12_execute.9746+0x60>)
 8002306:	f003 f84b 	bl	80053a0 <chMtxUnlock>
    chMtxLock(&mtx1);
 800230a:	4811      	ldr	r0, [pc, #68]	; (8002350 <bmk12_execute.9746+0x60>)
 800230c:	f003 f8d8 	bl	80054c0 <chMtxLock>
    chMtxUnlock(&mtx1);
 8002310:	480f      	ldr	r0, [pc, #60]	; (8002350 <bmk12_execute.9746+0x60>)
 8002312:	f003 f845 	bl	80053a0 <chMtxUnlock>
    chMtxLock(&mtx1);
 8002316:	480e      	ldr	r0, [pc, #56]	; (8002350 <bmk12_execute.9746+0x60>)
 8002318:	f003 f8d2 	bl	80054c0 <chMtxLock>
    chMtxUnlock(&mtx1);
 800231c:	480c      	ldr	r0, [pc, #48]	; (8002350 <bmk12_execute.9746+0x60>)
 800231e:	f003 f83f 	bl	80053a0 <chMtxUnlock>
    chMtxLock(&mtx1);
 8002322:	480b      	ldr	r0, [pc, #44]	; (8002350 <bmk12_execute.9746+0x60>)
 8002324:	f003 f8cc 	bl	80054c0 <chMtxLock>
    chMtxUnlock(&mtx1);
 8002328:	4809      	ldr	r0, [pc, #36]	; (8002350 <bmk12_execute.9746+0x60>)
 800232a:	f003 f839 	bl	80053a0 <chMtxUnlock>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800232e:	782b      	ldrb	r3, [r5, #0]
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    n++;
 8002330:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0e3      	beq.n	80022fe <bmk12_execute.9746+0xe>
  test_print("--- Score : ");
 8002336:	4807      	ldr	r0, [pc, #28]	; (8002354 <bmk12_execute.9746+0x64>)
 8002338:	f001 fb22 	bl	8003980 <test_print>
  test_printn(n * 4);
 800233c:	00a0      	lsls	r0, r4, #2
 800233e:	f001 fb2f 	bl	80039a0 <test_printn>
  test_println(" lock+unlock/S");
 8002342:	4805      	ldr	r0, [pc, #20]	; (8002358 <bmk12_execute.9746+0x68>)
}
 8002344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" lock+unlock/S");
 8002348:	f001 bb02 	b.w	8003950 <test_println>
 800234c:	20000924 	.word	0x20000924
 8002350:	20000974 	.word	0x20000974
 8002354:	08005ed0 	.word	0x08005ed0
 8002358:	08005f04 	.word	0x08005f04
 800235c:	f3af 8000 	nop.w

08002360 <bmk11_execute.9750>:
static void bmk11_setup(void) {

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
 8002360:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 8002362:	f7ff f885 	bl	8001470 <test_wait_tick>
  test_start_timer(1000);
 8002366:	f7ff fc6b 	bl	8001c40 <test_start_timer.constprop.8>
 800236a:	4d14      	ldr	r5, [pc, #80]	; (80023bc <bmk11_execute.9750+0x5c>)

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
  uint32_t n = 0;
 800236c:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemWait(&sem1);
 800236e:	4814      	ldr	r0, [pc, #80]	; (80023c0 <bmk11_execute.9750+0x60>)
 8002370:	f002 ff46 	bl	8005200 <chSemWait>
    chSemSignal(&sem1);
 8002374:	4812      	ldr	r0, [pc, #72]	; (80023c0 <bmk11_execute.9750+0x60>)
 8002376:	f002 feb3 	bl	80050e0 <chSemSignal>
    chSemWait(&sem1);
 800237a:	4811      	ldr	r0, [pc, #68]	; (80023c0 <bmk11_execute.9750+0x60>)
 800237c:	f002 ff40 	bl	8005200 <chSemWait>
    chSemSignal(&sem1);
 8002380:	480f      	ldr	r0, [pc, #60]	; (80023c0 <bmk11_execute.9750+0x60>)
 8002382:	f002 fead 	bl	80050e0 <chSemSignal>
    chSemWait(&sem1);
 8002386:	480e      	ldr	r0, [pc, #56]	; (80023c0 <bmk11_execute.9750+0x60>)
 8002388:	f002 ff3a 	bl	8005200 <chSemWait>
    chSemSignal(&sem1);
 800238c:	480c      	ldr	r0, [pc, #48]	; (80023c0 <bmk11_execute.9750+0x60>)
 800238e:	f002 fea7 	bl	80050e0 <chSemSignal>
    chSemWait(&sem1);
 8002392:	480b      	ldr	r0, [pc, #44]	; (80023c0 <bmk11_execute.9750+0x60>)
 8002394:	f002 ff34 	bl	8005200 <chSemWait>
    chSemSignal(&sem1);
 8002398:	4809      	ldr	r0, [pc, #36]	; (80023c0 <bmk11_execute.9750+0x60>)
 800239a:	f002 fea1 	bl	80050e0 <chSemSignal>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800239e:	782b      	ldrb	r3, [r5, #0]
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    n++;
 80023a0:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0e3      	beq.n	800236e <bmk11_execute.9750+0xe>
  test_print("--- Score : ");
 80023a6:	4807      	ldr	r0, [pc, #28]	; (80023c4 <bmk11_execute.9750+0x64>)
 80023a8:	f001 faea 	bl	8003980 <test_print>
  test_printn(n * 4);
 80023ac:	00a0      	lsls	r0, r4, #2
 80023ae:	f001 faf7 	bl	80039a0 <test_printn>
  test_println(" wait+signal/S");
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <bmk11_execute.9750+0x68>)
}
 80023b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" wait+signal/S");
 80023b8:	f001 baca 	b.w	8003950 <test_println>
 80023bc:	20000924 	.word	0x20000924
 80023c0:	20000918 	.word	0x20000918
 80023c4:	08005ed0 	.word	0x08005ed0
 80023c8:	08005f14 	.word	0x08005f14
 80023cc:	f3af 8000 	nop.w

080023d0 <bmk8_execute.9765>:
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
}

static void bmk8_execute(void) {
 80023d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80023d4:	f241 18e0 	movw	r8, #4576	; 0x11e0
 80023d8:	b084      	sub	sp, #16
  uint32_t n;

  n = 0;
 80023da:	ac04      	add	r4, sp, #16
 80023dc:	f2c2 0800 	movt	r8, #8192	; 0x2000
 80023e0:	2300      	movs	r3, #0
 80023e2:	f844 3d04 	str.w	r3, [r4, #-4]!
  test_wait_tick();
 80023e6:	f7ff f843 	bl	8001470 <test_wait_tick>
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80023ea:	f8d8 3018 	ldr.w	r3, [r8, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80023ee:	f640 1698 	movw	r6, #2456	; 0x998
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	9400      	str	r4, [sp, #0]
 80023f6:	f640 37e1 	movw	r7, #3041	; 0xbe1
 80023fa:	f2c2 0600 	movt	r6, #8192	; 0x2000
 80023fe:	f6c0 0700 	movt	r7, #2048	; 0x800
 8002402:	3a01      	subs	r2, #1
 8002404:	463b      	mov	r3, r7
 8002406:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800240a:	4630      	mov	r0, r6
 800240c:	f002 fe80 	bl	8005110 <chThdCreateStatic>
 8002410:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8002414:	f241 3530 	movw	r5, #4912	; 0x1330
 8002418:	f2c2 0500 	movt	r5, #8192	; 0x2000
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800241c:	689a      	ldr	r2, [r3, #8]
  uint32_t n;

  n = 0;
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800241e:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8002420:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002424:	3a01      	subs	r2, #1
 8002426:	463b      	mov	r3, r7
 8002428:	1870      	adds	r0, r6, r1
 800242a:	9400      	str	r4, [sp, #0]
 800242c:	f002 fe70 	bl	8005110 <chThdCreateStatic>
 8002430:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8002434:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	9400      	str	r4, [sp, #0]
 800243a:	3a01      	subs	r2, #1
 800243c:	463b      	mov	r3, r7
 800243e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002442:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8002446:	f002 fe63 	bl	8005110 <chThdCreateStatic>
 800244a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800244e:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	9400      	str	r4, [sp, #0]
 8002454:	3a01      	subs	r2, #1
 8002456:	463b      	mov	r3, r7
 8002458:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800245c:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8002460:	f002 fe56 	bl	8005110 <chThdCreateStatic>
 8002464:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8002468:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	9400      	str	r4, [sp, #0]
 800246e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002472:	3a01      	subs	r2, #1
 8002474:	463b      	mov	r3, r7
 8002476:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 800247a:	f002 fe49 	bl	8005110 <chThdCreateStatic>
 800247e:	6128      	str	r0, [r5, #16]

  chThdSleepSeconds(1);
 8002480:	f242 7010 	movw	r0, #10000	; 0x2710
 8002484:	f7fe ffe4 	bl	8001450 <chThdSleep>
  test_terminate_threads();
 8002488:	f001 f882 	bl	8003590 <test_terminate_threads>
  test_wait_threads();
 800248c:	f001 fd80 	bl	8003f90 <test_wait_threads>

  test_print("--- Score : ");
 8002490:	f645 60d0 	movw	r0, #24272	; 0x5ed0
 8002494:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002498:	f001 fa72 	bl	8003980 <test_print>
  test_printn(n);
 800249c:	9803      	ldr	r0, [sp, #12]
 800249e:	f001 fa7f 	bl	80039a0 <test_printn>
  test_println(" ctxswc/S");
 80024a2:	f645 60ec 	movw	r0, #24300	; 0x5eec
 80024a6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80024aa:	f001 fa51 	bl	8003950 <test_println>
}
 80024ae:	b004      	add	sp, #16
 80024b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024b4:	f3af 8000 	nop.w
 80024b8:	f3af 8000 	nop.w
 80024bc:	f3af 8000 	nop.w

080024c0 <bmk7_execute.9767>:
static void bmk7_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static void bmk7_execute(void) {
 80024c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80024c4:	4e3a      	ldr	r6, [pc, #232]	; (80025b0 <bmk7_execute.9767+0xf0>)
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 80024c6:	4b3b      	ldr	r3, [pc, #236]	; (80025b4 <bmk7_execute.9767+0xf4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80024c8:	69b2      	ldr	r2, [r6, #24]
 80024ca:	483b      	ldr	r0, [pc, #236]	; (80025b8 <bmk7_execute.9767+0xf8>)
 80024cc:	6892      	ldr	r2, [r2, #8]
 80024ce:	4d3b      	ldr	r5, [pc, #236]	; (80025bc <bmk7_execute.9767+0xfc>)
 80024d0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80025e0 <bmk7_execute.9767+0x120>
static void bmk7_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static void bmk7_execute(void) {
 80024d4:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 80024d6:	2400      	movs	r4, #0
 80024d8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80024dc:	3205      	adds	r2, #5
 80024de:	9400      	str	r4, [sp, #0]
 80024e0:	f002 fe16 	bl	8005110 <chThdCreateStatic>
 80024e4:	69b3      	ldr	r3, [r6, #24]
 80024e6:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	4835      	ldr	r0, [pc, #212]	; (80025c0 <bmk7_execute.9767+0x100>)
 80024ec:	4b31      	ldr	r3, [pc, #196]	; (80025b4 <bmk7_execute.9767+0xf4>)
 80024ee:	9400      	str	r4, [sp, #0]
 80024f0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80024f4:	3204      	adds	r2, #4
 80024f6:	f002 fe0b 	bl	8005110 <chThdCreateStatic>
 80024fa:	69b3      	ldr	r3, [r6, #24]
 80024fc:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	4830      	ldr	r0, [pc, #192]	; (80025c4 <bmk7_execute.9767+0x104>)
 8002502:	4b2c      	ldr	r3, [pc, #176]	; (80025b4 <bmk7_execute.9767+0xf4>)
 8002504:	9400      	str	r4, [sp, #0]
 8002506:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800250a:	3203      	adds	r2, #3
 800250c:	f002 fe00 	bl	8005110 <chThdCreateStatic>
 8002510:	69b3      	ldr	r3, [r6, #24]
 8002512:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	482c      	ldr	r0, [pc, #176]	; (80025c8 <bmk7_execute.9767+0x108>)
 8002518:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <bmk7_execute.9767+0xf4>)
 800251a:	9400      	str	r4, [sp, #0]
 800251c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002520:	3202      	adds	r2, #2
 8002522:	f002 fdf5 	bl	8005110 <chThdCreateStatic>
 8002526:	69b2      	ldr	r2, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, thread3, NULL);
 8002528:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <bmk7_execute.9767+0xf4>)
 800252a:	6892      	ldr	r2, [r2, #8]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 800252c:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, thread3, NULL);
 800252e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002532:	3201      	adds	r2, #1
 8002534:	9400      	str	r4, [sp, #0]
 8002536:	4825      	ldr	r0, [pc, #148]	; (80025cc <bmk7_execute.9767+0x10c>)
 8002538:	f002 fdea 	bl	8005110 <chThdCreateStatic>
 800253c:	6128      	str	r0, [r5, #16]

  n = 0;
  test_wait_tick();
 800253e:	f7fe ff97 	bl	8001470 <test_wait_tick>
  test_start_timer(1000);
 8002542:	f7ff fb7d 	bl	8001c40 <test_start_timer.constprop.8>
 8002546:	2720      	movs	r7, #32
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8002548:	4626      	mov	r6, r4
 800254a:	f387 8811 	msr	BASEPRI, r7
 800254e:	4820      	ldr	r0, [pc, #128]	; (80025d0 <bmk7_execute.9767+0x110>)
 8002550:	2100      	movs	r1, #0
 8002552:	f003 f81d 	bl	8005590 <chSemResetI>
 8002556:	2500      	movs	r5, #0
  chSchRescheduleS();
 8002558:	f002 fd5a 	bl	8005010 <chSchRescheduleS>
 800255c:	f386 8811 	msr	BASEPRI, r6
    chSemReset(&sem1, 0);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002560:	f898 3000 	ldrb.w	r3, [r8]
  n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemReset(&sem1, 0);
    n++;
 8002564:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0ef      	beq.n	800254a <bmk7_execute.9767+0x8a>
  test_terminate_threads();
 800256a:	f001 f811 	bl	8003590 <test_terminate_threads>
 800256e:	2320      	movs	r3, #32
 8002570:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8002574:	4816      	ldr	r0, [pc, #88]	; (80025d0 <bmk7_execute.9767+0x110>)
 8002576:	4629      	mov	r1, r5
 8002578:	f003 f80a 	bl	8005590 <chSemResetI>
  chSchRescheduleS();
 800257c:	f002 fd48 	bl	8005010 <chSchRescheduleS>
 8002580:	f385 8811 	msr	BASEPRI, r5
  chSemReset(&sem1, 0);
  test_wait_threads();
 8002584:	f001 fd04 	bl	8003f90 <test_wait_threads>

  test_print("--- Score : ");
 8002588:	4812      	ldr	r0, [pc, #72]	; (80025d4 <bmk7_execute.9767+0x114>)
 800258a:	f001 f9f9 	bl	8003980 <test_print>
  test_printn(n);
 800258e:	4620      	mov	r0, r4
 8002590:	f001 fa06 	bl	80039a0 <test_printn>
  test_print(" reschedules/S, ");
 8002594:	4810      	ldr	r0, [pc, #64]	; (80025d8 <bmk7_execute.9767+0x118>)
 8002596:	f001 f9f3 	bl	8003980 <test_print>
  test_printn(n * 6);
 800259a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800259e:	0040      	lsls	r0, r0, #1
 80025a0:	f001 f9fe 	bl	80039a0 <test_printn>
  test_println(" ctxswc/S");
 80025a4:	480d      	ldr	r0, [pc, #52]	; (80025dc <bmk7_execute.9767+0x11c>)
}
 80025a6:	b002      	add	sp, #8
 80025a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  test_print("--- Score : ");
  test_printn(n);
  test_print(" reschedules/S, ");
  test_printn(n * 6);
  test_println(" ctxswc/S");
 80025ac:	f001 b9d0 	b.w	8003950 <test_println>
 80025b0:	200011e0 	.word	0x200011e0
 80025b4:	08000c11 	.word	0x08000c11
 80025b8:	20000998 	.word	0x20000998
 80025bc:	20001330 	.word	0x20001330
 80025c0:	20000ae0 	.word	0x20000ae0
 80025c4:	20000c28 	.word	0x20000c28
 80025c8:	20000d70 	.word	0x20000d70
 80025cc:	20000eb8 	.word	0x20000eb8
 80025d0:	20000918 	.word	0x20000918
 80025d4:	08005ed0 	.word	0x08005ed0
 80025d8:	08005f24 	.word	0x08005f24
 80025dc:	08005eec 	.word	0x08005eec
 80025e0:	20000924 	.word	0x20000924
 80025e4:	f3af 8000 	nop.w
 80025e8:	f3af 8000 	nop.w
 80025ec:	f3af 8000 	nop.w

080025f0 <bmk5_execute.9769>:
 * in each iteration.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk5_execute(void) {
 80025f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025f2:	4b13      	ldr	r3, [pc, #76]	; (8002640 <bmk5_execute.9769+0x50>)
 80025f4:	4f13      	ldr	r7, [pc, #76]	; (8002644 <bmk5_execute.9769+0x54>)
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	b083      	sub	sp, #12

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 80025fa:	689e      	ldr	r6, [r3, #8]
  test_wait_tick();
 80025fc:	f7fe ff38 	bl	8001470 <test_wait_tick>
  test_start_timer(1000);
 8002600:	f7ff fb1e 	bl	8001c40 <test_start_timer.constprop.8>
 * a second of continuous operations.
 */

static void bmk5_execute(void) {

  uint32_t n = 0;
 8002604:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 8002606:	3e01      	subs	r6, #1
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 8002608:	4625      	mov	r5, r4
 800260a:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <bmk5_execute.9769+0x58>)
 800260c:	9500      	str	r5, [sp, #0]
 800260e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002612:	4632      	mov	r2, r6
 8002614:	480d      	ldr	r0, [pc, #52]	; (800264c <bmk5_execute.9769+0x5c>)
 8002616:	f002 fd7b 	bl	8005110 <chThdCreateStatic>
 800261a:	f001 fc99 	bl	8003f50 <chThdWait>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800261e:	783b      	ldrb	r3, [r7, #0]
  tprio_t prio = chThdGetPriorityX() - 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
    n++;
 8002620:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f1      	beq.n	800260a <bmk5_execute.9769+0x1a>
  test_print("--- Score : ");
 8002626:	480a      	ldr	r0, [pc, #40]	; (8002650 <bmk5_execute.9769+0x60>)
 8002628:	f001 f9aa 	bl	8003980 <test_print>
  test_printn(n);
 800262c:	4620      	mov	r0, r4
 800262e:	f001 f9b7 	bl	80039a0 <test_printn>
  test_println(" threads/S");
 8002632:	4808      	ldr	r0, [pc, #32]	; (8002654 <bmk5_execute.9769+0x64>)
}
 8002634:	b003      	add	sp, #12
 8002636:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 800263a:	f001 b989 	b.w	8003950 <test_println>
 800263e:	bf00      	nop
 8002640:	200011e0 	.word	0x200011e0
 8002644:	20000924 	.word	0x20000924
 8002648:	08003411 	.word	0x08003411
 800264c:	20000998 	.word	0x20000998
 8002650:	08005ed0 	.word	0x08005ed0
 8002654:	08005ee0 	.word	0x08005ee0
 8002658:	f3af 8000 	nop.w
 800265c:	f3af 8000 	nop.w

08002660 <msg_loop_test.9773.4272>:
}

#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {
 8002660:	b570      	push	{r4, r5, r6, lr}
 8002662:	4605      	mov	r5, r0

  uint32_t n = 0;
  test_wait_tick();
 8002664:	f7fe ff04 	bl	8001470 <test_wait_tick>
  test_start_timer(1000);
 8002668:	f7ff faea 	bl	8001c40 <test_start_timer.constprop.8>
 800266c:	4e07      	ldr	r6, [pc, #28]	; (800268c <msg_loop_test.9773.4272+0x2c>)
#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {

  uint32_t n = 0;
 800266e:	2400      	movs	r4, #0
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
 8002670:	4628      	mov	r0, r5
 8002672:	2101      	movs	r1, #1
 8002674:	f002 fdf4 	bl	8005260 <chMsgSend>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002678:	7833      	ldrb	r3, [r6, #0]
  uint32_t n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
    n++;
 800267a:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0f7      	beq.n	8002670 <msg_loop_test.9773.4272+0x10>
  (void)chMsgSend(tp, 0);
 8002680:	4628      	mov	r0, r5
 8002682:	2100      	movs	r1, #0
 8002684:	f002 fdec 	bl	8005260 <chMsgSend>
  return n;
}
 8002688:	4620      	mov	r0, r4
 800268a:	bd70      	pop	{r4, r5, r6, pc}
 800268c:	20000924 	.word	0x20000924

08002690 <bmk1_execute.9780>:
 * A message server thread is created with a lower priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk1_execute(void) {
 8002690:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002692:	f241 13e0 	movw	r3, #4576	; 0x11e0
 8002696:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800269a:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800269c:	699b      	ldr	r3, [r3, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread2, NULL);
 800269e:	2000      	movs	r0, #0
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	9000      	str	r0, [sp, #0]
 80026a4:	f241 1321 	movw	r3, #4385	; 0x1121
 80026a8:	f640 1098 	movw	r0, #2456	; 0x998
 80026ac:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80026b0:	3a01      	subs	r2, #1
 80026b2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80026b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80026ba:	f002 fd29 	bl	8005110 <chThdCreateStatic>
 80026be:	f241 3330 	movw	r3, #4912	; 0x1330
 80026c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026c6:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 80026c8:	f7ff ffca 	bl	8002660 <msg_loop_test.9773.4272>
 80026cc:	4604      	mov	r4, r0
  test_wait_threads();
 80026ce:	f001 fc5f 	bl	8003f90 <test_wait_threads>
  test_print("--- Score : ");
 80026d2:	f645 60d0 	movw	r0, #24272	; 0x5ed0
 80026d6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80026da:	f001 f951 	bl	8003980 <test_print>
  test_printn(n);
 80026de:	4620      	mov	r0, r4
 80026e0:	f001 f95e 	bl	80039a0 <test_printn>
  test_print(" msgs/S, ");
 80026e4:	f645 7038 	movw	r0, #24376	; 0x5f38
 80026e8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80026ec:	f001 f948 	bl	8003980 <test_print>
  test_printn(n << 1);
 80026f0:	0060      	lsls	r0, r4, #1
 80026f2:	f001 f955 	bl	80039a0 <test_printn>
  test_println(" ctxswc/S");
 80026f6:	f645 60ec 	movw	r0, #24300	; 0x5eec
 80026fa:	f6c0 0000 	movt	r0, #2048	; 0x800
}
 80026fe:	b002      	add	sp, #8
 8002700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8002704:	f001 b924 	b.w	8003950 <test_println>
 8002708:	f3af 8000 	nop.w
 800270c:	f3af 8000 	nop.w

08002710 <bmk2_execute.9778>:
 * A message server thread is created with an higher priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk2_execute(void) {
 8002710:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002712:	f241 13e0 	movw	r3, #4576	; 0x11e0
 8002716:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800271a:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800271c:	699b      	ldr	r3, [r3, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 800271e:	2000      	movs	r0, #0
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	9000      	str	r0, [sp, #0]
 8002724:	f241 1321 	movw	r3, #4385	; 0x1121
 8002728:	f640 1098 	movw	r0, #2456	; 0x998
 800272c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002730:	3201      	adds	r2, #1
 8002732:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002736:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800273a:	f002 fce9 	bl	8005110 <chThdCreateStatic>
 800273e:	f241 3330 	movw	r3, #4912	; 0x1330
 8002742:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002746:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 8002748:	f7ff ff8a 	bl	8002660 <msg_loop_test.9773.4272>
 800274c:	4604      	mov	r4, r0
  test_wait_threads();
 800274e:	f001 fc1f 	bl	8003f90 <test_wait_threads>
  test_print("--- Score : ");
 8002752:	f645 60d0 	movw	r0, #24272	; 0x5ed0
 8002756:	f6c0 0000 	movt	r0, #2048	; 0x800
 800275a:	f001 f911 	bl	8003980 <test_print>
  test_printn(n);
 800275e:	4620      	mov	r0, r4
 8002760:	f001 f91e 	bl	80039a0 <test_printn>
  test_print(" msgs/S, ");
 8002764:	f645 7038 	movw	r0, #24376	; 0x5f38
 8002768:	f6c0 0000 	movt	r0, #2048	; 0x800
 800276c:	f001 f908 	bl	8003980 <test_print>
  test_printn(n << 1);
 8002770:	0060      	lsls	r0, r4, #1
 8002772:	f001 f915 	bl	80039a0 <test_printn>
  test_println(" ctxswc/S");
 8002776:	f645 60ec 	movw	r0, #24300	; 0x5eec
 800277a:	f6c0 0000 	movt	r0, #2048	; 0x800
}
 800277e:	b002      	add	sp, #8
 8002780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8002784:	f001 b8e4 	b.w	8003950 <test_println>
 8002788:	f3af 8000 	nop.w
 800278c:	f3af 8000 	nop.w

08002790 <bmk3_execute.9776>:
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 8002790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002794:	f241 16e0 	movw	r6, #4576	; 0x11e0
 8002798:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800279c:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800279e:	69b3      	ldr	r3, [r6, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 80027a0:	f640 1598 	movw	r5, #2456	; 0x998
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80027aa:	f04f 0800 	mov.w	r8, #0
 80027ae:	f241 1321 	movw	r3, #4385	; 0x1121
 80027b2:	3201      	adds	r2, #1
 80027b4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80027b8:	f6c0 0300 	movt	r3, #2048	; 0x800
 80027bc:	f8cd 8000 	str.w	r8, [sp]
 80027c0:	4628      	mov	r0, r5
 80027c2:	f002 fca5 	bl	8005110 <chThdCreateStatic>
 80027c6:	69b3      	ldr	r3, [r6, #24]
 80027c8:	f241 3430 	movw	r4, #4912	; 0x1330
 80027cc:	f2c2 0400 	movt	r4, #8192	; 0x2000
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 80027d0:	689a      	ldr	r2, [r3, #8]
 */

static void bmk3_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 80027d2:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 80027d4:	f243 4711 	movw	r7, #13329	; 0x3411
 80027d8:	f6c0 0700 	movt	r7, #2048	; 0x800
 80027dc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80027e0:	3a02      	subs	r2, #2
 80027e2:	463b      	mov	r3, r7
 80027e4:	1868      	adds	r0, r5, r1
 80027e6:	f8cd 8000 	str.w	r8, [sp]
 80027ea:	f002 fc91 	bl	8005110 <chThdCreateStatic>
 80027ee:	69b3      	ldr	r3, [r6, #24]
 80027f0:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	f8cd 8000 	str.w	r8, [sp]
 80027f8:	3a03      	subs	r2, #3
 80027fa:	463b      	mov	r3, r7
 80027fc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002800:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8002804:	f002 fc84 	bl	8005110 <chThdCreateStatic>
 8002808:	69b3      	ldr	r3, [r6, #24]
 800280a:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	f8cd 8000 	str.w	r8, [sp]
 8002812:	3a04      	subs	r2, #4
 8002814:	463b      	mov	r3, r7
 8002816:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800281a:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 800281e:	f002 fc77 	bl	8005110 <chThdCreateStatic>
 8002822:	69b3      	ldr	r3, [r6, #24]
 8002824:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	f8cd 8000 	str.w	r8, [sp]
 800282c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002830:	3a05      	subs	r2, #5
 8002832:	463b      	mov	r3, r7
 8002834:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 8002838:	f002 fc6a 	bl	8005110 <chThdCreateStatic>
 800283c:	6120      	str	r0, [r4, #16]
  n = msg_loop_test(threads[0]);
 800283e:	6820      	ldr	r0, [r4, #0]
 8002840:	f7ff ff0e 	bl	8002660 <msg_loop_test.9773.4272>
 8002844:	4604      	mov	r4, r0
  test_wait_threads();
 8002846:	f001 fba3 	bl	8003f90 <test_wait_threads>
  test_print("--- Score : ");
 800284a:	f645 60d0 	movw	r0, #24272	; 0x5ed0
 800284e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002852:	f001 f895 	bl	8003980 <test_print>
  test_printn(n);
 8002856:	4620      	mov	r0, r4
 8002858:	f001 f8a2 	bl	80039a0 <test_printn>
  test_print(" msgs/S, ");
 800285c:	f645 7038 	movw	r0, #24376	; 0x5f38
 8002860:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002864:	f001 f88c 	bl	8003980 <test_print>
  test_printn(n << 1);
 8002868:	0060      	lsls	r0, r4, #1
 800286a:	f001 f899 	bl	80039a0 <test_printn>
  test_println(" ctxswc/S");
 800286e:	f645 60ec 	movw	r0, #24300	; 0x5eec
 8002872:	f6c0 0000 	movt	r0, #2048	; 0x800
}
 8002876:	b002      	add	sp, #8
 8002878:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 800287c:	f001 b868 	b.w	8003950 <test_println>

08002880 <chIQPutI>:
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8002880:	6942      	ldr	r2, [r0, #20]
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
 8002882:	4603      	mov	r3, r0
 8002884:	6980      	ldr	r0, [r0, #24]
 8002886:	4282      	cmp	r2, r0
 8002888:	b510      	push	{r4, lr}
 800288a:	d01c      	beq.n	80028c6 <chIQPutI+0x46>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 800288c:	6898      	ldr	r0, [r3, #8]
 800288e:	3001      	adds	r0, #1
 8002890:	6098      	str	r0, [r3, #8]
  *iqp->q_wrptr++ = b;
 8002892:	f802 1b01 	strb.w	r1, [r2], #1
  if (iqp->q_wrptr >= iqp->q_top) {
 8002896:	6919      	ldr	r1, [r3, #16]
  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
  *iqp->q_wrptr++ = b;
 8002898:	615a      	str	r2, [r3, #20]
  if (iqp->q_wrptr >= iqp->q_top) {
 800289a:	428a      	cmp	r2, r1
 800289c:	d20c      	bcs.n	80028b8 <chIQPutI+0x38>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800289e:	681a      	ldr	r2, [r3, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d00e      	beq.n	80028c2 <chIQPutI+0x42>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80028a4:	6811      	ldr	r1, [r2, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80028a6:	2400      	movs	r4, #0
 80028a8:	6019      	str	r1, [r3, #0]
  (void) chSchReadyI(tp);
 80028aa:	4610      	mov	r0, r2
  tqp->p_next->p_prev = (thread_t *)tqp;
 80028ac:	604b      	str	r3, [r1, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80028ae:	6214      	str	r4, [r2, #32]
  (void) chSchReadyI(tp);
 80028b0:	f002 fcc6 	bl	8005240 <chSchReadyI>
    iqp->q_wrptr = iqp->q_buffer;
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 80028b4:	4620      	mov	r0, r4
 80028b6:	bd10      	pop	{r4, pc}
  }

  iqp->q_counter++;
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top) {
    iqp->q_wrptr = iqp->q_buffer;
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	615a      	str	r2, [r3, #20]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	4293      	cmp	r3, r2
 80028c0:	d1f0      	bne.n	80028a4 <chIQPutI+0x24>
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 80028c2:	2000      	movs	r0, #0
 80028c4:	bd10      	pop	{r4, pc}
 80028c6:	6898      	ldr	r0, [r3, #8]
 80028c8:	2800      	cmp	r0, #0
 80028ca:	d0df      	beq.n	800288c <chIQPutI+0xc>
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {

  chDbgCheckClassI();

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
 80028cc:	f06f 0003 	mvn.w	r0, #3
 80028d0:	bd10      	pop	{r4, pc}
 80028d2:	bf00      	nop
 80028d4:	f3af 8000 	nop.w
 80028d8:	f3af 8000 	nop.w
 80028dc:	f3af 8000 	nop.w

080028e0 <bmk9_execute.9761>:
 * loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk9_execute(void) {
 80028e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 80028e2:	4a26      	ldr	r2, [pc, #152]	; (800297c <bmk9_execute.9761+0x9c>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80028e4:	4b26      	ldr	r3, [pc, #152]	; (8002980 <bmk9_execute.9761+0xa0>)
 80028e6:	4f27      	ldr	r7, [pc, #156]	; (8002984 <bmk9_execute.9761+0xa4>)
 80028e8:	601b      	str	r3, [r3, #0]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80028ea:	2400      	movs	r4, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 80028ec:	f102 0110 	add.w	r1, r2, #16
  tqp->p_prev = (thread_t *)tqp;
 80028f0:	605b      	str	r3, [r3, #4]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80028f2:	609c      	str	r4, [r3, #8]
  iqp->q_buffer  = bp;
 80028f4:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
 80028f6:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
 80028f8:	615a      	str	r2, [r3, #20]
  iqp->q_top     = bp + size;
 80028fa:	6119      	str	r1, [r3, #16]
  iqp->q_notify  = infy;
 80028fc:	61dc      	str	r4, [r3, #28]
  iqp->q_link    = link;
 80028fe:	621c      	str	r4, [r3, #32]
  static uint8_t ib[16];
  static input_queue_t iq;

  chIQObjectInit(&iq, ib, sizeof(ib), NULL, NULL);
  n = 0;
  test_wait_tick();
 8002900:	f7fe fdb6 	bl	8001470 <test_wait_tick>
  test_start_timer(1000);
 8002904:	f7ff f99c 	bl	8001c40 <test_start_timer.constprop.8>
 8002908:	2620      	movs	r6, #32
  do {
    chSysLock();
    chIQPutI(&iq, 0);
 800290a:	4625      	mov	r5, r4
 800290c:	f386 8811 	msr	BASEPRI, r6
 8002910:	2100      	movs	r1, #0
 8002912:	481b      	ldr	r0, [pc, #108]	; (8002980 <bmk9_execute.9761+0xa0>)
 8002914:	f7ff ffb4 	bl	8002880 <chIQPutI>
    chIQPutI(&iq, 1);
 8002918:	2101      	movs	r1, #1
 800291a:	4819      	ldr	r0, [pc, #100]	; (8002980 <bmk9_execute.9761+0xa0>)
 800291c:	f7ff ffb0 	bl	8002880 <chIQPutI>
    chIQPutI(&iq, 2);
 8002920:	2102      	movs	r1, #2
 8002922:	4817      	ldr	r0, [pc, #92]	; (8002980 <bmk9_execute.9761+0xa0>)
 8002924:	f7ff ffac 	bl	8002880 <chIQPutI>
    chIQPutI(&iq, 3);
 8002928:	2103      	movs	r1, #3
 800292a:	4815      	ldr	r0, [pc, #84]	; (8002980 <bmk9_execute.9761+0xa0>)
 800292c:	f7ff ffa8 	bl	8002880 <chIQPutI>
 8002930:	f385 8811 	msr	BASEPRI, r5
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 8002934:	f04f 31ff 	mov.w	r1, #4294967295
 8002938:	4811      	ldr	r0, [pc, #68]	; (8002980 <bmk9_execute.9761+0xa0>)
 800293a:	f7ff f811 	bl	8001960 <chIQGetTimeout>
 800293e:	f04f 31ff 	mov.w	r1, #4294967295
 8002942:	480f      	ldr	r0, [pc, #60]	; (8002980 <bmk9_execute.9761+0xa0>)
 8002944:	f7ff f80c 	bl	8001960 <chIQGetTimeout>
 8002948:	f04f 31ff 	mov.w	r1, #4294967295
 800294c:	480c      	ldr	r0, [pc, #48]	; (8002980 <bmk9_execute.9761+0xa0>)
 800294e:	f7ff f807 	bl	8001960 <chIQGetTimeout>
 8002952:	480b      	ldr	r0, [pc, #44]	; (8002980 <bmk9_execute.9761+0xa0>)
 8002954:	f04f 31ff 	mov.w	r1, #4294967295
 8002958:	f7ff f802 	bl	8001960 <chIQGetTimeout>
    (void)chIQGet(&iq);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800295c:	783b      	ldrb	r3, [r7, #0]
    chSysUnlock();
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    n++;
 800295e:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0d3      	beq.n	800290c <bmk9_execute.9761+0x2c>
  test_print("--- Score : ");
 8002964:	4808      	ldr	r0, [pc, #32]	; (8002988 <bmk9_execute.9761+0xa8>)
 8002966:	f001 f80b 	bl	8003980 <test_print>
  test_printn(n * 4);
 800296a:	00a0      	lsls	r0, r4, #2
 800296c:	f001 f818 	bl	80039a0 <test_printn>
  test_println(" bytes/S");
 8002970:	4806      	ldr	r0, [pc, #24]	; (800298c <bmk9_execute.9761+0xac>)
}
 8002972:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" bytes/S");
 8002976:	f000 bfeb 	b.w	8003950 <test_println>
 800297a:	bf00      	nop
 800297c:	20000984 	.word	0x20000984
 8002980:	2000093c 	.word	0x2000093c
 8002984:	20000924 	.word	0x20000924
 8002988:	08005ed0 	.word	0x08005ed0
 800298c:	08005f44 	.word	0x08005f44

08002990 <evt3_execute.8931>:
static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void evt3_execute(void) {
 8002990:	b570      	push	{r4, r5, r6, lr}
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8002992:	4c55      	ldr	r4, [pc, #340]	; (8002ae8 <evt3_execute.8931+0x158>)
 8002994:	2320      	movs	r3, #32
 8002996:	69a2      	ldr	r2, [r4, #24]
 8002998:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800299c:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800299e:	b93b      	cbnz	r3, 80029b0 <evt3_execute.8931+0x20>
 80029a0:	f383 8811 	msr	BASEPRI, r3
 80029a4:	2101      	movs	r1, #1

  /*
   * Tests various timeout situations.
   */
  m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(1, m == 0, "spurious event");
 80029a6:	2001      	movs	r0, #1
 80029a8:	f000 fe5a 	bl	8003660 <_test_assert>
 80029ac:	b180      	cbz	r0, 80029d0 <evt3_execute.8931+0x40>
 80029ae:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 80029b0:	4259      	negs	r1, r3
 80029b2:	4019      	ands	r1, r3
  ctp->p_epending &= ~m;
 80029b4:	ea23 0301 	bic.w	r3, r3, r1
 80029b8:	6353      	str	r3, [r2, #52]	; 0x34
 80029ba:	2300      	movs	r3, #0
 80029bc:	f383 8811 	msr	BASEPRI, r3
 80029c0:	1ac8      	subs	r0, r1, r3
 80029c2:	4241      	negs	r1, r0
 80029c4:	4141      	adcs	r1, r0
 80029c6:	2001      	movs	r0, #1
 80029c8:	f000 fe4a 	bl	8003660 <_test_assert>
 80029cc:	2800      	cmp	r0, #0
 80029ce:	d1ee      	bne.n	80029ae <evt3_execute.8931+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 80029d0:	69a3      	ldr	r3, [r4, #24]
 80029d2:	2220      	movs	r2, #32
 80029d4:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
  if (m == (eventmask_t)0) {
 80029d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029da:	b362      	cbz	r2, 8002a36 <evt3_execute.8931+0xa6>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  ctp->p_epending &= ~m;
 80029dc:	6358      	str	r0, [r3, #52]	; 0x34
 80029de:	f380 8811 	msr	BASEPRI, r0
 80029e2:	4601      	mov	r1, r0
  m = chEvtWaitAnyTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(2, m == 0, "spurious event");
 80029e4:	2002      	movs	r0, #2
 80029e6:	f000 fe3b 	bl	8003660 <_test_assert>
 80029ea:	2800      	cmp	r0, #0
 80029ec:	d1df      	bne.n	80029ae <evt3_execute.8931+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 80029ee:	69a3      	ldr	r3, [r4, #24]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 80029f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029f8:	3201      	adds	r2, #1
 80029fa:	d067      	beq.n	8002acc <evt3_execute.8931+0x13c>
 80029fc:	f380 8811 	msr	BASEPRI, r0
 8002a00:	2101      	movs	r1, #1
  m = chEvtWaitAllTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(3, m == 0, "spurious event");
 8002a02:	2003      	movs	r0, #3
 8002a04:	f000 fe2c 	bl	8003660 <_test_assert>
 8002a08:	2800      	cmp	r0, #0
 8002a0a:	d1d0      	bne.n	80029ae <evt3_execute.8931+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8002a0c:	69a6      	ldr	r6, [r4, #24]
 8002a0e:	2320      	movs	r3, #32
 8002a10:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 8002a14:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8002a16:	b995      	cbnz	r5, 8002a3e <evt3_execute.8931+0xae>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8002a18:	200a      	movs	r0, #10
  if (m == (eventmask_t)0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8002a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1e:	6233      	str	r3, [r6, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8002a20:	4601      	mov	r1, r0
 8002a22:	f7fe fcf5 	bl	8001410 <chSchGoSleepTimeoutS>
 8002a26:	2800      	cmp	r0, #0
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 8002a28:	bfa8      	it	ge
 8002a2a:	6b75      	ldrge	r5, [r6, #52]	; 0x34
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8002a2c:	da07      	bge.n	8002a3e <evt3_execute.8931+0xae>
 8002a2e:	f385 8811 	msr	BASEPRI, r5
 8002a32:	2101      	movs	r1, #1
 8002a34:	e00e      	b.n	8002a54 <evt3_execute.8931+0xc4>
 8002a36:	f382 8811 	msr	BASEPRI, r2
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	e7d2      	b.n	80029e4 <evt3_execute.8931+0x54>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 8002a3e:	4269      	negs	r1, r5
 8002a40:	4029      	ands	r1, r5
  ctp->p_epending &= ~m;
 8002a42:	ea25 0501 	bic.w	r5, r5, r1
 8002a46:	6375      	str	r5, [r6, #52]	; 0x34
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f383 8811 	msr	BASEPRI, r3
 8002a4e:	1aca      	subs	r2, r1, r3
 8002a50:	4251      	negs	r1, r2
 8002a52:	4151      	adcs	r1, r2
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
 8002a54:	2004      	movs	r0, #4
 8002a56:	f000 fe03 	bl	8003660 <_test_assert>
 8002a5a:	2800      	cmp	r0, #0
 8002a5c:	d1a7      	bne.n	80029ae <evt3_execute.8931+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8002a5e:	69a5      	ldr	r5, [r4, #24]
 8002a60:	2320      	movs	r3, #32
 8002a62:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 8002a66:	6b6e      	ldr	r6, [r5, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8002a68:	b956      	cbnz	r6, 8002a80 <evt3_execute.8931+0xf0>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8002a6a:	200a      	movs	r0, #10
  if (m == (eventmask_t)0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8002a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a70:	622b      	str	r3, [r5, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8002a72:	4601      	mov	r1, r0
 8002a74:	f7fe fccc 	bl	8001410 <chSchGoSleepTimeoutS>
 8002a78:	2800      	cmp	r0, #0
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 8002a7a:	bfa8      	it	ge
 8002a7c:	6b6e      	ldrge	r6, [r5, #52]	; 0x34
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8002a7e:	db2a      	blt.n	8002ad6 <evt3_execute.8931+0x146>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  ctp->p_epending &= ~m;
 8002a80:	2300      	movs	r3, #0
 8002a82:	636b      	str	r3, [r5, #52]	; 0x34
 8002a84:	f383 8811 	msr	BASEPRI, r3
 8002a88:	1af3      	subs	r3, r6, r3
 8002a8a:	4259      	negs	r1, r3
 8002a8c:	4159      	adcs	r1, r3
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
 8002a8e:	2005      	movs	r0, #5
 8002a90:	f000 fde6 	bl	8003660 <_test_assert>
 8002a94:	4605      	mov	r5, r0
 8002a96:	2800      	cmp	r0, #0
 8002a98:	d189      	bne.n	80029ae <evt3_execute.8931+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8002a9a:	69a4      	ldr	r4, [r4, #24]
 8002a9c:	2320      	movs	r3, #32
 8002a9e:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 8002aa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	d008      	beq.n	8002aba <evt3_execute.8931+0x12a>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8002aa8:	f04f 33ff 	mov.w	r3, #4294967295
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
 8002aac:	200b      	movs	r0, #11
 8002aae:	210a      	movs	r1, #10
  if ((ctp->p_epending & events) != events) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8002ab0:	6223      	str	r3, [r4, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
 8002ab2:	f7fe fcad 	bl	8001410 <chSchGoSleepTimeoutS>
 8002ab6:	2800      	cmp	r0, #0
 8002ab8:	db11      	blt.n	8002ade <evt3_execute.8931+0x14e>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->p_epending &= ~events;
 8002aba:	2100      	movs	r1, #0
 8002abc:	6361      	str	r1, [r4, #52]	; 0x34
 8002abe:	f381 8811 	msr	BASEPRI, r1
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 8002ac2:	2006      	movs	r0, #6
}
 8002ac4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 8002ac8:	f000 bdca 	b.w	8003660 <_test_assert>
 8002acc:	6358      	str	r0, [r3, #52]	; 0x34
 8002ace:	f380 8811 	msr	BASEPRI, r0
 8002ad2:	4601      	mov	r1, r0
 8002ad4:	e795      	b.n	8002a02 <evt3_execute.8931+0x72>
 8002ad6:	f386 8811 	msr	BASEPRI, r6
 8002ada:	2101      	movs	r1, #1
 8002adc:	e7d7      	b.n	8002a8e <evt3_execute.8931+0xfe>
 8002ade:	f385 8811 	msr	BASEPRI, r5
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	e7ed      	b.n	8002ac2 <evt3_execute.8931+0x132>
 8002ae6:	bf00      	nop
 8002ae8:	200011e0 	.word	0x200011e0
 8002aec:	f3af 8000 	nop.w

08002af0 <sem4_execute.8262>:
static THD_FUNCTION(thread4, p) {

  chBSemSignal((binary_semaphore_t *)p);
}

static void sem4_execute(void) {
 8002af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002af2:	b087      	sub	sp, #28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002af4:	ad03      	add	r5, sp, #12
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 8002af6:	2400      	movs	r4, #0
 8002af8:	9503      	str	r5, [sp, #12]
  tqp->p_prev = (thread_t *)tqp;
 8002afa:	9504      	str	r5, [sp, #16]
 8002afc:	9405      	str	r4, [sp, #20]
 8002afe:	2620      	movs	r6, #32
 8002b00:	f386 8811 	msr	BASEPRI, r6
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8002b04:	4628      	mov	r0, r5
 8002b06:	4621      	mov	r1, r4
 8002b08:	f002 fd42 	bl	8005590 <chSemResetI>
  chSchRescheduleS();
 8002b0c:	f002 fa80 	bl	8005010 <chSchRescheduleS>
 8002b10:	f384 8811 	msr	BASEPRI, r4
 8002b14:	f386 8811 	msr	BASEPRI, r6
  binary_semaphore_t bsem;
  
  /* Creates a taken binary semaphore.*/
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");
 8002b18:	9905      	ldr	r1, [sp, #20]
 8002b1a:	2001      	movs	r0, #1
 8002b1c:	42a1      	cmp	r1, r4
 8002b1e:	bfcc      	ite	gt
 8002b20:	2100      	movgt	r1, #0
 8002b22:	2101      	movle	r1, #1
 8002b24:	f000 fd9c 	bl	8003660 <_test_assert>
 8002b28:	4607      	mov	r7, r0
 8002b2a:	b118      	cbz	r0, 8002b34 <sem4_execute.8262+0x44>
 8002b2c:	f384 8811 	msr	BASEPRI, r4

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 8002b30:	b007      	add	sp, #28
 8002b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b34:	f380 8811 	msr	BASEPRI, r0
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002b38:	4a40      	ldr	r2, [pc, #256]	; (8002c3c <sem4_execute.8262+0x14c>)
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Starts a signaler thread at a lower priority.*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8002b3a:	4b41      	ldr	r3, [pc, #260]	; (8002c40 <sem4_execute.8262+0x150>)
 8002b3c:	6992      	ldr	r2, [r2, #24]
 8002b3e:	4841      	ldr	r0, [pc, #260]	; (8002c44 <sem4_execute.8262+0x154>)
 8002b40:	6892      	ldr	r2, [r2, #8]
 8002b42:	9500      	str	r5, [sp, #0]
 8002b44:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002b48:	3a01      	subs	r2, #1
 8002b4a:	f002 fae1 	bl	8005110 <chThdCreateStatic>
 8002b4e:	4b3e      	ldr	r3, [pc, #248]	; (8002c48 <sem4_execute.8262+0x158>)
 8002b50:	6018      	str	r0, [r3, #0]
 *
 * @api
 */
static inline msg_t chBSemWait(binary_semaphore_t *bsp) {

  return chSemWait(&bsp->bs_sem);
 8002b52:	4628      	mov	r0, r5
 8002b54:	f002 fb54 	bl	8005200 <chSemWait>
 8002b58:	f386 8811 	msr	BASEPRI, r6
                                 
  /* Waits to be signaled.*/
  chBSemWait(&bsem);
  
  /* The binary semaphore is expected to be taken.*/
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");
 8002b5c:	9905      	ldr	r1, [sp, #20]
 8002b5e:	2002      	movs	r0, #2
 8002b60:	2900      	cmp	r1, #0
 8002b62:	bfcc      	ite	gt
 8002b64:	2100      	movgt	r1, #0
 8002b66:	2101      	movle	r1, #1
 8002b68:	f000 fd7a 	bl	8003660 <_test_assert>
 8002b6c:	b110      	cbz	r0, 8002b74 <sem4_execute.8262+0x84>
 8002b6e:	f387 8811 	msr	BASEPRI, r7
 8002b72:	e7dd      	b.n	8002b30 <sem4_execute.8262+0x40>
 8002b74:	f380 8811 	msr	BASEPRI, r0
 8002b78:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 8002b7c:	9b05      	ldr	r3, [sp, #20]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	dd24      	ble.n	8002bcc <sem4_execute.8262+0xdc>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8002b82:	f002 fa45 	bl	8005010 <chSchRescheduleS>
 8002b86:	2400      	movs	r4, #0
 8002b88:	f384 8811 	msr	BASEPRI, r4
 8002b8c:	2720      	movs	r7, #32
 8002b8e:	f387 8811 	msr	BASEPRI, r7

  /* Releasing it, check both the binary semaphore state and the underlying
     counter semaphore state..*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "still taken");
 8002b92:	9905      	ldr	r1, [sp, #20]
 8002b94:	2003      	movs	r0, #3
 8002b96:	42a1      	cmp	r1, r4
 8002b98:	bfd4      	ite	le
 8002b9a:	2100      	movle	r1, #0
 8002b9c:	2101      	movgt	r1, #1
 8002b9e:	f000 fd5f 	bl	8003660 <_test_assert>
 8002ba2:	4606      	mov	r6, r0
 8002ba4:	2800      	cmp	r0, #0
 8002ba6:	d1c1      	bne.n	8002b2c <sem4_execute.8262+0x3c>
 8002ba8:	f380 8811 	msr	BASEPRI, r0
 8002bac:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(4, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 8002bb0:	9905      	ldr	r1, [sp, #20]
 8002bb2:	2004      	movs	r0, #4
 8002bb4:	f1b1 0c01 	subs.w	ip, r1, #1
 8002bb8:	f1dc 0100 	rsbs	r1, ip, #0
 8002bbc:	eb51 010c 	adcs.w	r1, r1, ip
 8002bc0:	f000 fd4e 	bl	8003660 <_test_assert>
 8002bc4:	b130      	cbz	r0, 8002bd4 <sem4_execute.8262+0xe4>
 8002bc6:	f386 8811 	msr	BASEPRI, r6
 8002bca:	e7b1      	b.n	8002b30 <sem4_execute.8262+0x40>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 8002bcc:	4628      	mov	r0, r5
 8002bce:	f002 fccf 	bl	8005570 <chSemSignalI>
 8002bd2:	e7d6      	b.n	8002b82 <sem4_execute.8262+0x92>
 8002bd4:	f380 8811 	msr	BASEPRI, r0
 8002bd8:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 8002bdc:	9b05      	ldr	r3, [sp, #20]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	dd24      	ble.n	8002c2c <sem4_execute.8262+0x13c>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8002be2:	f002 fa15 	bl	8005010 <chSchRescheduleS>
 8002be6:	2400      	movs	r4, #0
 8002be8:	f384 8811 	msr	BASEPRI, r4
 8002bec:	2620      	movs	r6, #32
 8002bee:	f386 8811 	msr	BASEPRI, r6

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
 8002bf2:	9905      	ldr	r1, [sp, #20]
 8002bf4:	2003      	movs	r0, #3
 8002bf6:	42a1      	cmp	r1, r4
 8002bf8:	bfd4      	ite	le
 8002bfa:	2100      	movle	r1, #0
 8002bfc:	2101      	movgt	r1, #1
 8002bfe:	f000 fd2f 	bl	8003660 <_test_assert>
 8002c02:	4605      	mov	r5, r0
 8002c04:	2800      	cmp	r0, #0
 8002c06:	d191      	bne.n	8002b2c <sem4_execute.8262+0x3c>
 8002c08:	f380 8811 	msr	BASEPRI, r0
 8002c0c:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 8002c10:	9905      	ldr	r1, [sp, #20]
 8002c12:	2005      	movs	r0, #5
 8002c14:	f1b1 0e01 	subs.w	lr, r1, #1
 8002c18:	f1de 0100 	rsbs	r1, lr, #0
 8002c1c:	eb51 010e 	adcs.w	r1, r1, lr
 8002c20:	f000 fd1e 	bl	8003660 <_test_assert>
 8002c24:	b130      	cbz	r0, 8002c34 <sem4_execute.8262+0x144>
 8002c26:	f385 8811 	msr	BASEPRI, r5
 8002c2a:	e781      	b.n	8002b30 <sem4_execute.8262+0x40>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 8002c2c:	4628      	mov	r0, r5
 8002c2e:	f002 fc9f 	bl	8005570 <chSemSignalI>
 8002c32:	e7d6      	b.n	8002be2 <sem4_execute.8262+0xf2>
 8002c34:	f380 8811 	msr	BASEPRI, r0
 8002c38:	e77a      	b.n	8002b30 <sem4_execute.8262+0x40>
 8002c3a:	bf00      	nop
 8002c3c:	200011e0 	.word	0x200011e0
 8002c40:	08004831 	.word	0x08004831
 8002c44:	20000998 	.word	0x20000998
 8002c48:	20001330 	.word	0x20001330
 8002c4c:	f3af 8000 	nop.w

08002c50 <mbox1_execute.8788>:

static void mbox1_execute(void) {
 8002c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c54:	2520      	movs	r5, #32
 8002c56:	b083      	sub	sp, #12
 8002c58:	f385 8811 	msr	BASEPRI, r5
 */
static inline cnt_t chSemGetCounterI(semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->s_cnt;
 8002c5c:	4f30      	ldr	r7, [pc, #192]	; (8002d20 <mbox1_execute.8788+0xd0>)
  unsigned i;

  /*
   * Testing initial space.
   */
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8002c5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c60:	2001      	movs	r0, #1
 8002c62:	f1b1 0e05 	subs.w	lr, r1, #5
 8002c66:	f1de 0100 	rsbs	r1, lr, #0
 8002c6a:	eb51 010e 	adcs.w	r1, r1, lr
 8002c6e:	f000 fcf7 	bl	8003660 <_test_assert>
 8002c72:	2800      	cmp	r0, #0
 8002c74:	f040 81e7 	bne.w	8003046 <mbox1_execute.8788+0x3f6>
 8002c78:	f380 8811 	msr	BASEPRI, r0
 8002c7c:	2442      	movs	r4, #66	; 0x42
 8002c7e:	46a9      	mov	r9, r5
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
 8002c80:	463e      	mov	r6, r7
 8002c82:	4680      	mov	r8, r0
 8002c84:	f389 8811 	msr	BASEPRI, r9
 8002c88:	f04f 31ff 	mov.w	r1, #4294967295
 8002c8c:	4825      	ldr	r0, [pc, #148]	; (8002d24 <mbox1_execute.8788+0xd4>)
 8002c8e:	f7fe ff8f 	bl	8001bb0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8002c92:	4605      	mov	r5, r0
    *mbp->mb_wrptr++ = msg;
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
    }
    chSemSignalI(&mbp->mb_fullsem);
 8002c94:	4824      	ldr	r0, [pc, #144]	; (8002d28 <mbox1_execute.8788+0xd8>)

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
 8002c96:	b965      	cbnz	r5, 8002cb2 <mbox1_execute.8788+0x62>
    *mbp->mb_wrptr++ = msg;
 8002c98:	68b3      	ldr	r3, [r6, #8]
    if (mbp->mb_wrptr >= mbp->mb_top) {
 8002c9a:	6872      	ldr	r2, [r6, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8002c9c:	f843 4b04 	str.w	r4, [r3], #4
    if (mbp->mb_wrptr >= mbp->mb_top) {
 8002ca0:	4293      	cmp	r3, r2
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8002ca2:	60b3      	str	r3, [r6, #8]
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
 8002ca4:	bf24      	itt	cs
 8002ca6:	6833      	ldrcs	r3, [r6, #0]
 8002ca8:	60b3      	strcs	r3, [r6, #8]
    }
    chSemSignalI(&mbp->mb_fullsem);
 8002caa:	f002 fc61 	bl	8005570 <chSemSignalI>
    chSchRescheduleS();
 8002cae:	f002 f9af 	bl	8005010 <chSchRescheduleS>
 8002cb2:	f388 8811 	msr	BASEPRI, r8
  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
 8002cb6:	2002      	movs	r0, #2
 8002cb8:	f1d5 0101 	rsbs	r1, r5, #1
 8002cbc:	bf38      	it	cc
 8002cbe:	2100      	movcc	r1, #0
 8002cc0:	3401      	adds	r4, #1
 8002cc2:	f000 fccd 	bl	8003660 <_test_assert>
 8002cc6:	bb38      	cbnz	r0, 8002d18 <mbox1_execute.8788+0xc8>
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
 8002cc8:	2c46      	cmp	r4, #70	; 0x46
 8002cca:	d1db      	bne.n	8002c84 <mbox1_execute.8788+0x34>
 8002ccc:	2320      	movs	r3, #32
 8002cce:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
 8002cd2:	4c13      	ldr	r4, [pc, #76]	; (8002d20 <mbox1_execute.8788+0xd0>)
 8002cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd8:	f104 001c 	add.w	r0, r4, #28
 8002cdc:	f7fe ff68 	bl	8001bb0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8002ce0:	4605      	mov	r5, r0
 8002ce2:	b968      	cbnz	r0, 8002d00 <mbox1_execute.8788+0xb0>
    if (--mbp->mb_rdptr < mbp->mb_buffer) {
 8002ce4:	68e3      	ldr	r3, [r4, #12]
 8002ce6:	6822      	ldr	r2, [r4, #0]
 8002ce8:	3b04      	subs	r3, #4
 8002cea:	4293      	cmp	r3, r2
 8002cec:	60e3      	str	r3, [r4, #12]
 8002cee:	f0c0 81ae 	bcc.w	800304e <mbox1_execute.8788+0x3fe>
      mbp->mb_rdptr = mbp->mb_top - 1;
    }
    *mbp->mb_rdptr = msg;
 8002cf2:	2241      	movs	r2, #65	; 0x41
    chSemSignalI(&mbp->mb_fullsem);
 8002cf4:	480c      	ldr	r0, [pc, #48]	; (8002d28 <mbox1_execute.8788+0xd8>)
  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    if (--mbp->mb_rdptr < mbp->mb_buffer) {
      mbp->mb_rdptr = mbp->mb_top - 1;
    }
    *mbp->mb_rdptr = msg;
 8002cf6:	601a      	str	r2, [r3, #0]
    chSemSignalI(&mbp->mb_fullsem);
 8002cf8:	f002 fc3a 	bl	8005570 <chSemSignalI>
    chSchRescheduleS();
 8002cfc:	f002 f988 	bl	8005010 <chSchRescheduleS>
 8002d00:	2300      	movs	r3, #0
 8002d02:	f383 8811 	msr	BASEPRI, r3
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
  }
  msg1 = chMBPostAhead(&mb1, 'A', TIME_INFINITE);
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");
 8002d06:	2003      	movs	r0, #3
 8002d08:	1aea      	subs	r2, r5, r3
 8002d0a:	4251      	negs	r1, r2
 8002d0c:	4151      	adcs	r1, r2
 8002d0e:	f000 fca7 	bl	8003660 <_test_assert>
 8002d12:	2800      	cmp	r0, #0
 8002d14:	f000 81a4 	beq.w	8003060 <mbox1_execute.8788+0x410>
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
}
 8002d18:	b003      	add	sp, #12
 8002d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000854 	.word	0x20000854
 8002d24:	20000870 	.word	0x20000870
 8002d28:	20000864 	.word	0x20000864
 8002d2c:	f380 8811 	msr	BASEPRI, r0
 8002d30:	f385 8811 	msr	BASEPRI, r5

  /*
   * Testing I-Class.
   */
  chSysLock();
  msg1 = chMBPostI(&mb1, 'A');
 8002d34:	2041      	movs	r0, #65	; 0x41
 8002d36:	f7fe f963 	bl	8001000 <chMBPostI.constprop.24>
  test_assert(22, msg1 == MSG_OK, "wrong wake-up message");
 8002d3a:	f1d0 0101 	rsbs	r1, r0, #1
 8002d3e:	bf38      	it	cc
 8002d40:	2100      	movcc	r1, #0
 8002d42:	2016      	movs	r0, #22
 8002d44:	f000 fc8c 	bl	8003660 <_test_assert>
 8002d48:	2800      	cmp	r0, #0
 8002d4a:	d1e5      	bne.n	8002d18 <mbox1_execute.8788+0xc8>
  msg1 = chMBPostI(&mb1, 'B');
 8002d4c:	2042      	movs	r0, #66	; 0x42
 8002d4e:	f7fe f957 	bl	8001000 <chMBPostI.constprop.24>
  test_assert(23, msg1 == MSG_OK, "wrong wake-up message");
 8002d52:	f1d0 0101 	rsbs	r1, r0, #1
 8002d56:	bf38      	it	cc
 8002d58:	2100      	movcc	r1, #0
 8002d5a:	2017      	movs	r0, #23
 8002d5c:	f000 fc80 	bl	8003660 <_test_assert>
 8002d60:	2800      	cmp	r0, #0
 8002d62:	d1d9      	bne.n	8002d18 <mbox1_execute.8788+0xc8>
  msg1 = chMBPostI(&mb1, 'C');
 8002d64:	2043      	movs	r0, #67	; 0x43
 8002d66:	f7fe f94b 	bl	8001000 <chMBPostI.constprop.24>
  test_assert(24, msg1 == MSG_OK, "wrong wake-up message");
 8002d6a:	f1d0 0101 	rsbs	r1, r0, #1
 8002d6e:	bf38      	it	cc
 8002d70:	2100      	movcc	r1, #0
 8002d72:	2018      	movs	r0, #24
 8002d74:	f000 fc74 	bl	8003660 <_test_assert>
 8002d78:	2800      	cmp	r0, #0
 8002d7a:	d1cd      	bne.n	8002d18 <mbox1_execute.8788+0xc8>
  msg1 = chMBPostI(&mb1, 'D');
 8002d7c:	2044      	movs	r0, #68	; 0x44
 8002d7e:	f7fe f93f 	bl	8001000 <chMBPostI.constprop.24>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
 8002d82:	f1d0 0101 	rsbs	r1, r0, #1
 8002d86:	bf38      	it	cc
 8002d88:	2100      	movcc	r1, #0
 8002d8a:	2019      	movs	r0, #25
 8002d8c:	f000 fc68 	bl	8003660 <_test_assert>
 8002d90:	4606      	mov	r6, r0
 8002d92:	2800      	cmp	r0, #0
 8002d94:	d1c0      	bne.n	8002d18 <mbox1_execute.8788+0xc8>
  msg1 = chMBPostI(&mb1, 'E');
 8002d96:	2045      	movs	r0, #69	; 0x45
 8002d98:	f7fe f932 	bl	8001000 <chMBPostI.constprop.24>
 8002d9c:	4601      	mov	r1, r0
 8002d9e:	f386 8811 	msr	BASEPRI, r6
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
 8002da2:	201a      	movs	r0, #26
 8002da4:	f1d1 0101 	rsbs	r1, r1, #1
 8002da8:	bf38      	it	cc
 8002daa:	2100      	movcc	r1, #0
 8002dac:	f000 fc58 	bl	8003660 <_test_assert>
 8002db0:	2800      	cmp	r0, #0
 8002db2:	d1b1      	bne.n	8002d18 <mbox1_execute.8788+0xc8>
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8002db4:	68e1      	ldr	r1, [r4, #12]
 8002db6:	68a3      	ldr	r3, [r4, #8]
 8002db8:	201b      	movs	r0, #27
 8002dba:	1aca      	subs	r2, r1, r3
 8002dbc:	4251      	negs	r1, r2
 8002dbe:	4151      	adcs	r1, r2
 8002dc0:	f000 fc4e 	bl	8003660 <_test_assert>
 8002dc4:	2800      	cmp	r0, #0
 8002dc6:	d1a7      	bne.n	8002d18 <mbox1_execute.8788+0xc8>
 8002dc8:	2405      	movs	r4, #5
 8002dca:	46a8      	mov	r8, r5
 8002dcc:	4606      	mov	r6, r0
 8002dce:	2520      	movs	r5, #32
 8002dd0:	f388 8811 	msr	BASEPRI, r8
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8002dd4:	a801      	add	r0, sp, #4
 8002dd6:	f7fe f953 	bl	8001080 <chMBFetchI.constprop.20>
 8002dda:	4601      	mov	r1, r0
 8002ddc:	f386 8811 	msr	BASEPRI, r6
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
 8002de0:	201c      	movs	r0, #28
 8002de2:	f1d1 0101 	rsbs	r1, r1, #1
 8002de6:	bf38      	it	cc
 8002de8:	2100      	movcc	r1, #0
 8002dea:	f000 fc39 	bl	8003660 <_test_assert>
 8002dee:	2800      	cmp	r0, #0
 8002df0:	d192      	bne.n	8002d18 <mbox1_execute.8788+0xc8>
    test_emit_token(msg2);
 8002df2:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8002df6:	f000 fd33 	bl	8003860 <test_emit_token>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostI(&mb1, 'E');
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 8002dfa:	3c01      	subs	r4, #1
 8002dfc:	d1e7      	bne.n	8002dce <mbox1_execute.8788+0x17e>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(29, "ABCDE");
 8002dfe:	201d      	movs	r0, #29
 8002e00:	4995      	ldr	r1, [pc, #596]	; (8003058 <mbox1_execute.8788+0x408>)
 8002e02:	f000 fbfd 	bl	8003600 <_test_assert_sequence>
 8002e06:	2800      	cmp	r0, #0
 8002e08:	d186      	bne.n	8002d18 <mbox1_execute.8788+0xc8>
 8002e0a:	f385 8811 	msr	BASEPRI, r5
  test_assert_lock(30, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8002e0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e10:	4e92      	ldr	r6, [pc, #584]	; (800305c <mbox1_execute.8788+0x40c>)
 8002e12:	201e      	movs	r0, #30
 8002e14:	1f4b      	subs	r3, r1, #5
 8002e16:	4259      	negs	r1, r3
 8002e18:	4159      	adcs	r1, r3
 8002e1a:	f000 fc21 	bl	8003660 <_test_assert>
 8002e1e:	f384 8811 	msr	BASEPRI, r4
 8002e22:	2800      	cmp	r0, #0
 8002e24:	f47f af78 	bne.w	8002d18 <mbox1_execute.8788+0xc8>
 8002e28:	f385 8811 	msr	BASEPRI, r5
  test_assert_lock(31, chMBGetUsedCountI(&mb1) == 0, "still full");
 8002e2c:	69b1      	ldr	r1, [r6, #24]
 8002e2e:	201f      	movs	r0, #31
 8002e30:	f1d1 0101 	rsbs	r1, r1, #1
 8002e34:	bf38      	it	cc
 8002e36:	2100      	movcc	r1, #0
 8002e38:	f000 fc12 	bl	8003660 <_test_assert>
 8002e3c:	f384 8811 	msr	BASEPRI, r4
 8002e40:	2800      	cmp	r0, #0
 8002e42:	f47f af69 	bne.w	8002d18 <mbox1_execute.8788+0xc8>
  test_assert(32, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8002e46:	68f1      	ldr	r1, [r6, #12]
 8002e48:	68b3      	ldr	r3, [r6, #8]
 8002e4a:	ebb1 0c03 	subs.w	ip, r1, r3
 8002e4e:	f1dc 0100 	rsbs	r1, ip, #0
 8002e52:	eb51 010c 	adcs.w	r1, r1, ip
 8002e56:	4628      	mov	r0, r5
 8002e58:	f000 fc02 	bl	8003660 <_test_assert>
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	f47f af5b 	bne.w	8002d18 <mbox1_execute.8788+0xc8>
 8002e62:	f385 8811 	msr	BASEPRI, r5

  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'E');
 8002e66:	2045      	movs	r0, #69	; 0x45
 8002e68:	f7fe f8ea 	bl	8001040 <chMBPostAheadI.constprop.22>
  test_assert(33, msg1 == MSG_OK, "wrong wake-up message");
 8002e6c:	f1d0 0101 	rsbs	r1, r0, #1
 8002e70:	bf38      	it	cc
 8002e72:	2100      	movcc	r1, #0
 8002e74:	2021      	movs	r0, #33	; 0x21
 8002e76:	f000 fbf3 	bl	8003660 <_test_assert>
 8002e7a:	2800      	cmp	r0, #0
 8002e7c:	f47f af4c 	bne.w	8002d18 <mbox1_execute.8788+0xc8>
  msg1 = chMBPostAheadI(&mb1, 'D');
 8002e80:	2044      	movs	r0, #68	; 0x44
 8002e82:	f7fe f8dd 	bl	8001040 <chMBPostAheadI.constprop.22>
  test_assert(34, msg1 == MSG_OK, "wrong wake-up message");
 8002e86:	f1d0 0101 	rsbs	r1, r0, #1
 8002e8a:	bf38      	it	cc
 8002e8c:	2100      	movcc	r1, #0
 8002e8e:	2022      	movs	r0, #34	; 0x22
 8002e90:	f000 fbe6 	bl	8003660 <_test_assert>
 8002e94:	2800      	cmp	r0, #0
 8002e96:	f47f af3f 	bne.w	8002d18 <mbox1_execute.8788+0xc8>
  msg1 = chMBPostAheadI(&mb1, 'C');
 8002e9a:	2043      	movs	r0, #67	; 0x43
 8002e9c:	f7fe f8d0 	bl	8001040 <chMBPostAheadI.constprop.22>
  test_assert(35, msg1 == MSG_OK, "wrong wake-up message");
 8002ea0:	f1d0 0101 	rsbs	r1, r0, #1
 8002ea4:	bf38      	it	cc
 8002ea6:	2100      	movcc	r1, #0
 8002ea8:	2023      	movs	r0, #35	; 0x23
 8002eaa:	f000 fbd9 	bl	8003660 <_test_assert>
 8002eae:	2800      	cmp	r0, #0
 8002eb0:	f47f af32 	bne.w	8002d18 <mbox1_execute.8788+0xc8>
  msg1 = chMBPostAheadI(&mb1, 'B');
 8002eb4:	2042      	movs	r0, #66	; 0x42
 8002eb6:	f7fe f8c3 	bl	8001040 <chMBPostAheadI.constprop.22>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
 8002eba:	f1d0 0101 	rsbs	r1, r0, #1
 8002ebe:	bf38      	it	cc
 8002ec0:	2100      	movcc	r1, #0
 8002ec2:	2024      	movs	r0, #36	; 0x24
 8002ec4:	f000 fbcc 	bl	8003660 <_test_assert>
 8002ec8:	2800      	cmp	r0, #0
 8002eca:	f47f af25 	bne.w	8002d18 <mbox1_execute.8788+0xc8>
  msg1 = chMBPostAheadI(&mb1, 'A');
 8002ece:	2041      	movs	r0, #65	; 0x41
 8002ed0:	f7fe f8b6 	bl	8001040 <chMBPostAheadI.constprop.22>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	4601      	mov	r1, r0
 8002ed8:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
 8002edc:	2025      	movs	r0, #37	; 0x25
 8002ede:	ebb1 0e03 	subs.w	lr, r1, r3
 8002ee2:	f1de 0100 	rsbs	r1, lr, #0
 8002ee6:	eb51 010e 	adcs.w	r1, r1, lr
 8002eea:	f000 fbb9 	bl	8003660 <_test_assert>
 8002eee:	2800      	cmp	r0, #0
 8002ef0:	f47f af12 	bne.w	8002d18 <mbox1_execute.8788+0xc8>
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8002ef4:	68f9      	ldr	r1, [r7, #12]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2026      	movs	r0, #38	; 0x26
 8002efa:	1aca      	subs	r2, r1, r3
 8002efc:	4251      	negs	r1, r2
 8002efe:	4151      	adcs	r1, r2
 8002f00:	f000 fbae 	bl	8003660 <_test_assert>
 8002f04:	2800      	cmp	r0, #0
 8002f06:	f47f af07 	bne.w	8002d18 <mbox1_execute.8788+0xc8>
 8002f0a:	2405      	movs	r4, #5
 8002f0c:	f04f 0820 	mov.w	r8, #32
 8002f10:	4605      	mov	r5, r0
 8002f12:	2620      	movs	r6, #32
 8002f14:	f388 8811 	msr	BASEPRI, r8
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8002f18:	a801      	add	r0, sp, #4
 8002f1a:	f7fe f8b1 	bl	8001080 <chMBFetchI.constprop.20>
 8002f1e:	4601      	mov	r1, r0
 8002f20:	f385 8811 	msr	BASEPRI, r5
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
 8002f24:	2027      	movs	r0, #39	; 0x27
 8002f26:	f1d1 0101 	rsbs	r1, r1, #1
 8002f2a:	bf38      	it	cc
 8002f2c:	2100      	movcc	r1, #0
 8002f2e:	f000 fb97 	bl	8003660 <_test_assert>
 8002f32:	2800      	cmp	r0, #0
 8002f34:	f47f aef0 	bne.w	8002d18 <mbox1_execute.8788+0xc8>
    test_emit_token(msg2);
 8002f38:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8002f3c:	f000 fc90 	bl	8003860 <test_emit_token>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostAheadI(&mb1, 'A');
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 8002f40:	3c01      	subs	r4, #1
 8002f42:	d1e6      	bne.n	8002f12 <mbox1_execute.8788+0x2c2>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
 8002f44:	2028      	movs	r0, #40	; 0x28
 8002f46:	4944      	ldr	r1, [pc, #272]	; (8003058 <mbox1_execute.8788+0x408>)
 8002f48:	f000 fb5a 	bl	8003600 <_test_assert_sequence>
 8002f4c:	2800      	cmp	r0, #0
 8002f4e:	f47f aee3 	bne.w	8002d18 <mbox1_execute.8788+0xc8>
 8002f52:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8002f56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f58:	4d40      	ldr	r5, [pc, #256]	; (800305c <mbox1_execute.8788+0x40c>)
 8002f5a:	2029      	movs	r0, #41	; 0x29
 8002f5c:	1f4b      	subs	r3, r1, #5
 8002f5e:	4259      	negs	r1, r3
 8002f60:	4159      	adcs	r1, r3
 8002f62:	f000 fb7d 	bl	8003660 <_test_assert>
 8002f66:	f384 8811 	msr	BASEPRI, r4
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	f47f aed4 	bne.w	8002d18 <mbox1_execute.8788+0xc8>
 8002f70:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(42, chMBGetUsedCountI(&mb1) == 0, "still full");
 8002f74:	69a9      	ldr	r1, [r5, #24]
 8002f76:	202a      	movs	r0, #42	; 0x2a
 8002f78:	f1d1 0101 	rsbs	r1, r1, #1
 8002f7c:	bf38      	it	cc
 8002f7e:	2100      	movcc	r1, #0
 8002f80:	f000 fb6e 	bl	8003660 <_test_assert>
 8002f84:	f384 8811 	msr	BASEPRI, r4
 8002f88:	2800      	cmp	r0, #0
 8002f8a:	f47f aec5 	bne.w	8002d18 <mbox1_execute.8788+0xc8>
  test_assert(43, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8002f8e:	68e9      	ldr	r1, [r5, #12]
 8002f90:	68ab      	ldr	r3, [r5, #8]
 8002f92:	202b      	movs	r0, #43	; 0x2b
 8002f94:	ebb1 0c03 	subs.w	ip, r1, r3
 8002f98:	f1dc 0100 	rsbs	r1, ip, #0
 8002f9c:	eb51 010c 	adcs.w	r1, r1, ip
 8002fa0:	f000 fb5e 	bl	8003660 <_test_assert>
 8002fa4:	2800      	cmp	r0, #0
 8002fa6:	f47f aeb7 	bne.w	8002d18 <mbox1_execute.8788+0xc8>
 8002faa:	f386 8811 	msr	BASEPRI, r6
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
 8002fae:	682b      	ldr	r3, [r5, #0]
  mbp->mb_rdptr = mbp->mb_buffer;
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 8002fb0:	686a      	ldr	r2, [r5, #4]
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
 8002fb2:	60ab      	str	r3, [r5, #8]
  mbp->mb_rdptr = mbp->mb_buffer;
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 8002fb4:	1ad1      	subs	r1, r2, r3
 8002fb6:	f105 001c 	add.w	r0, r5, #28
 8002fba:	1089      	asrs	r1, r1, #2

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
  mbp->mb_rdptr = mbp->mb_buffer;
 8002fbc:	60eb      	str	r3, [r5, #12]
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 8002fbe:	f002 fae7 	bl	8005590 <chSemResetI>
  chSemResetI(&mbp->mb_fullsem, (cnt_t)0);
 8002fc2:	f105 0010 	add.w	r0, r5, #16
 8002fc6:	4621      	mov	r1, r4
 8002fc8:	f002 fae2 	bl	8005590 <chSemResetI>
 */
void chMBReset(mailbox_t *mbp) {

  chSysLock();
  chMBResetI(mbp);
  chSchRescheduleS();
 8002fcc:	f002 f820 	bl	8005010 <chSchRescheduleS>
 8002fd0:	f384 8811 	msr	BASEPRI, r4
 8002fd4:	f386 8811 	msr	BASEPRI, r6
  chMBReset(&mb1);

  /*
   * Re-testing final conditions.
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8002fd8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002fda:	202c      	movs	r0, #44	; 0x2c
 8002fdc:	f1b1 0e05 	subs.w	lr, r1, #5
 8002fe0:	f1de 0100 	rsbs	r1, lr, #0
 8002fe4:	eb51 010e 	adcs.w	r1, r1, lr
 8002fe8:	f000 fb3a 	bl	8003660 <_test_assert>
 8002fec:	f384 8811 	msr	BASEPRI, r4
 8002ff0:	2800      	cmp	r0, #0
 8002ff2:	f47f ae91 	bne.w	8002d18 <mbox1_execute.8788+0xc8>
 8002ff6:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
 8002ffa:	69a9      	ldr	r1, [r5, #24]
 8002ffc:	202d      	movs	r0, #45	; 0x2d
 8002ffe:	f1d1 0101 	rsbs	r1, r1, #1
 8003002:	bf38      	it	cc
 8003004:	2100      	movcc	r1, #0
 8003006:	f000 fb2b 	bl	8003660 <_test_assert>
 800300a:	f384 8811 	msr	BASEPRI, r4
 800300e:	2800      	cmp	r0, #0
 8003010:	f47f ae82 	bne.w	8002d18 <mbox1_execute.8788+0xc8>
 8003014:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 8003018:	6829      	ldr	r1, [r5, #0]
 800301a:	68ab      	ldr	r3, [r5, #8]
 800301c:	202e      	movs	r0, #46	; 0x2e
 800301e:	1aca      	subs	r2, r1, r3
 8003020:	4251      	negs	r1, r2
 8003022:	4151      	adcs	r1, r2
 8003024:	f000 fb1c 	bl	8003660 <_test_assert>
 8003028:	f384 8811 	msr	BASEPRI, r4
 800302c:	2800      	cmp	r0, #0
 800302e:	f47f ae73 	bne.w	8002d18 <mbox1_execute.8788+0xc8>
 8003032:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 8003036:	6829      	ldr	r1, [r5, #0]
 8003038:	68eb      	ldr	r3, [r5, #12]
 800303a:	202f      	movs	r0, #47	; 0x2f
 800303c:	1acb      	subs	r3, r1, r3
 800303e:	4259      	negs	r1, r3
 8003040:	4159      	adcs	r1, r3
 8003042:	f000 fb0d 	bl	8003660 <_test_assert>
 8003046:	2300      	movs	r3, #0
 8003048:	f383 8811 	msr	BASEPRI, r3
 800304c:	e664      	b.n	8002d18 <mbox1_execute.8788+0xc8>
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    if (--mbp->mb_rdptr < mbp->mb_buffer) {
      mbp->mb_rdptr = mbp->mb_top - 1;
 800304e:	6863      	ldr	r3, [r4, #4]
 8003050:	3b04      	subs	r3, #4
 8003052:	60e3      	str	r3, [r4, #12]
 8003054:	e64d      	b.n	8002cf2 <mbox1_execute.8788+0xa2>
 8003056:	bf00      	nop
 8003058:	08005df4 	.word	0x08005df4
 800305c:	20000854 	.word	0x20000854
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");

  /*
   * Testing post timeout.
   */
  msg1 = chMBPost(&mb1, 'X', 1);
 8003060:	2101      	movs	r1, #1
 8003062:	2058      	movs	r0, #88	; 0x58
 8003064:	f001 fe8c 	bl	8004d80 <chMBPost.constprop.25>
  test_assert(4, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003068:	f1b0 33ff 	subs.w	r3, r0, #4294967295
 800306c:	4259      	negs	r1, r3
 800306e:	4159      	adcs	r1, r3
 8003070:	2004      	movs	r0, #4
 8003072:	f000 faf5 	bl	8003660 <_test_assert>
 8003076:	4604      	mov	r4, r0
 8003078:	2800      	cmp	r0, #0
 800307a:	f47f ae4d 	bne.w	8002d18 <mbox1_execute.8788+0xc8>
 800307e:	2520      	movs	r5, #32
 8003080:	f385 8811 	msr	BASEPRI, r5
  chSysLock();
  msg1 = chMBPostI(&mb1, 'X');
 8003084:	2058      	movs	r0, #88	; 0x58
 8003086:	f7fd ffbb 	bl	8001000 <chMBPostI.constprop.24>
 800308a:	4601      	mov	r1, r0
 800308c:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(5, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003090:	2005      	movs	r0, #5
 8003092:	f1b1 3cff 	subs.w	ip, r1, #4294967295
 8003096:	f1dc 0100 	rsbs	r1, ip, #0
 800309a:	eb51 010c 	adcs.w	r1, r1, ip
 800309e:	f000 fadf 	bl	8003660 <_test_assert>
 80030a2:	2800      	cmp	r0, #0
 80030a4:	f47f ae38 	bne.w	8002d18 <mbox1_execute.8788+0xc8>
 80030a8:	f385 8811 	msr	BASEPRI, r5
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
 80030ac:	4c8e      	ldr	r4, [pc, #568]	; (80032e8 <mbox1_execute.8788+0x698>)
 80030ae:	2101      	movs	r1, #1
 80030b0:	f104 001c 	add.w	r0, r4, #28
 80030b4:	f7fe fd7c 	bl	8001bb0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 80030b8:	4605      	mov	r5, r0
 80030ba:	b978      	cbnz	r0, 80030dc <mbox1_execute.8788+0x48c>
    if (--mbp->mb_rdptr < mbp->mb_buffer) {
 80030bc:	68e3      	ldr	r3, [r4, #12]
 80030be:	6822      	ldr	r2, [r4, #0]
 80030c0:	3b04      	subs	r3, #4
 80030c2:	4293      	cmp	r3, r2
 80030c4:	60e3      	str	r3, [r4, #12]
 80030c6:	d202      	bcs.n	80030ce <mbox1_execute.8788+0x47e>
      mbp->mb_rdptr = mbp->mb_top - 1;
 80030c8:	6863      	ldr	r3, [r4, #4]
 80030ca:	3b04      	subs	r3, #4
 80030cc:	60e3      	str	r3, [r4, #12]
    }
    *mbp->mb_rdptr = msg;
 80030ce:	2258      	movs	r2, #88	; 0x58
    chSemSignalI(&mbp->mb_fullsem);
 80030d0:	4886      	ldr	r0, [pc, #536]	; (80032ec <mbox1_execute.8788+0x69c>)
  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    if (--mbp->mb_rdptr < mbp->mb_buffer) {
      mbp->mb_rdptr = mbp->mb_top - 1;
    }
    *mbp->mb_rdptr = msg;
 80030d2:	601a      	str	r2, [r3, #0]
    chSemSignalI(&mbp->mb_fullsem);
 80030d4:	f002 fa4c 	bl	8005570 <chSemSignalI>
    chSchRescheduleS();
 80030d8:	f001 ff9a 	bl	8005010 <chSchRescheduleS>
 80030dc:	2300      	movs	r3, #0
 80030de:	f383 8811 	msr	BASEPRI, r3
  msg1 = chMBPostAhead(&mb1, 'X', 1);
  test_assert(6, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80030e2:	2006      	movs	r0, #6
 80030e4:	f1b5 3eff 	subs.w	lr, r5, #4294967295
 80030e8:	f1de 0100 	rsbs	r1, lr, #0
 80030ec:	eb51 010e 	adcs.w	r1, r1, lr
 80030f0:	f000 fab6 	bl	8003660 <_test_assert>
 80030f4:	4604      	mov	r4, r0
 80030f6:	2800      	cmp	r0, #0
 80030f8:	f47f ae0e 	bne.w	8002d18 <mbox1_execute.8788+0xc8>
 80030fc:	2520      	movs	r5, #32
 80030fe:	f385 8811 	msr	BASEPRI, r5
  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'X');
 8003102:	2058      	movs	r0, #88	; 0x58
 8003104:	f7fd ff9c 	bl	8001040 <chMBPostAheadI.constprop.22>
 8003108:	4601      	mov	r1, r0
 800310a:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(7, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800310e:	2007      	movs	r0, #7
 8003110:	f1b1 34ff 	subs.w	r4, r1, #4294967295
 8003114:	4261      	negs	r1, r4
 8003116:	4161      	adcs	r1, r4
 8003118:	f000 faa2 	bl	8003660 <_test_assert>
 800311c:	4604      	mov	r4, r0
 800311e:	2800      	cmp	r0, #0
 8003120:	f47f adfa 	bne.w	8002d18 <mbox1_execute.8788+0xc8>
 8003124:	f385 8811 	msr	BASEPRI, r5

  /*
   * Testing final conditions.
   */
  test_assert_lock(8, chMBGetFreeCountI(&mb1) == 0, "still empty");
 8003128:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800312a:	4e6f      	ldr	r6, [pc, #444]	; (80032e8 <mbox1_execute.8788+0x698>)
 800312c:	2008      	movs	r0, #8
 800312e:	f1d1 0101 	rsbs	r1, r1, #1
 8003132:	bf38      	it	cc
 8003134:	2100      	movcc	r1, #0
 8003136:	f000 fa93 	bl	8003660 <_test_assert>
 800313a:	4680      	mov	r8, r0
 800313c:	b110      	cbz	r0, 8003144 <mbox1_execute.8788+0x4f4>
 800313e:	f384 8811 	msr	BASEPRI, r4
 8003142:	e5e9      	b.n	8002d18 <mbox1_execute.8788+0xc8>
 8003144:	f380 8811 	msr	BASEPRI, r0
 8003148:	f385 8811 	msr	BASEPRI, r5
  test_assert_lock(9, chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 800314c:	69b1      	ldr	r1, [r6, #24]
 800314e:	2009      	movs	r0, #9
 8003150:	1f4a      	subs	r2, r1, #5
 8003152:	4251      	negs	r1, r2
 8003154:	4151      	adcs	r1, r2
 8003156:	f000 fa83 	bl	8003660 <_test_assert>
 800315a:	4604      	mov	r4, r0
 800315c:	b110      	cbz	r0, 8003164 <mbox1_execute.8788+0x514>
 800315e:	f388 8811 	msr	BASEPRI, r8
 8003162:	e5d9      	b.n	8002d18 <mbox1_execute.8788+0xc8>
 8003164:	f380 8811 	msr	BASEPRI, r0
 8003168:	f385 8811 	msr	BASEPRI, r5
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 800316c:	68f1      	ldr	r1, [r6, #12]
 800316e:	68b3      	ldr	r3, [r6, #8]
 8003170:	200a      	movs	r0, #10
 8003172:	1acb      	subs	r3, r1, r3
 8003174:	4259      	negs	r1, r3
 8003176:	4159      	adcs	r1, r3
 8003178:	f000 fa72 	bl	8003660 <_test_assert>
 800317c:	2800      	cmp	r0, #0
 800317e:	d1de      	bne.n	800313e <mbox1_execute.8788+0x4ee>
 8003180:	f380 8811 	msr	BASEPRI, r0
 8003184:	2405      	movs	r4, #5
 8003186:	e005      	b.n	8003194 <mbox1_execute.8788+0x544>
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
 8003188:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800318c:	f000 fb68 	bl	8003860 <test_emit_token>
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");

  /*
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
 8003190:	3c01      	subs	r4, #1
 8003192:	d00e      	beq.n	80031b2 <mbox1_execute.8788+0x562>
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8003194:	f04f 31ff 	mov.w	r1, #4294967295
 8003198:	a801      	add	r0, sp, #4
 800319a:	f7fe fd29 	bl	8001bf0 <chMBFetch.constprop.21>
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
 800319e:	f1d0 0101 	rsbs	r1, r0, #1
 80031a2:	bf38      	it	cc
 80031a4:	2100      	movcc	r1, #0
 80031a6:	200b      	movs	r0, #11
 80031a8:	f000 fa5a 	bl	8003660 <_test_assert>
 80031ac:	2800      	cmp	r0, #0
 80031ae:	d0eb      	beq.n	8003188 <mbox1_execute.8788+0x538>
 80031b0:	e5b2      	b.n	8002d18 <mbox1_execute.8788+0xc8>
    test_emit_token(msg2);
  }
  test_assert_sequence(12, "ABCDE");
 80031b2:	200c      	movs	r0, #12
 80031b4:	494e      	ldr	r1, [pc, #312]	; (80032f0 <mbox1_execute.8788+0x6a0>)
 80031b6:	f000 fa23 	bl	8003600 <_test_assert_sequence>
 80031ba:	2800      	cmp	r0, #0
 80031bc:	f47f adac 	bne.w	8002d18 <mbox1_execute.8788+0xc8>

  /*
   * Testing buffer circularity.
   */
  msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 80031c0:	f04f 31ff 	mov.w	r1, #4294967295
 80031c4:	2047      	movs	r0, #71	; 0x47
 80031c6:	f001 fddb 	bl	8004d80 <chMBPost.constprop.25>
  test_assert(13, msg1 == MSG_OK, "wrong wake-up message");
 80031ca:	f1d0 0101 	rsbs	r1, r0, #1
 80031ce:	bf38      	it	cc
 80031d0:	2100      	movcc	r1, #0
 80031d2:	200d      	movs	r0, #13
 80031d4:	f000 fa44 	bl	8003660 <_test_assert>
 80031d8:	2800      	cmp	r0, #0
 80031da:	f47f ad9d 	bne.w	8002d18 <mbox1_execute.8788+0xc8>
  msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 80031de:	f04f 31ff 	mov.w	r1, #4294967295
 80031e2:	a801      	add	r0, sp, #4
 80031e4:	f7fe fd04 	bl	8001bf0 <chMBFetch.constprop.21>
  test_assert(14, msg1 == MSG_OK, "wrong wake-up message");
 80031e8:	f1d0 0101 	rsbs	r1, r0, #1
 80031ec:	bf38      	it	cc
 80031ee:	2100      	movcc	r1, #0
 80031f0:	200e      	movs	r0, #14
 80031f2:	f000 fa35 	bl	8003660 <_test_assert>
 80031f6:	2800      	cmp	r0, #0
 80031f8:	f47f ad8e 	bne.w	8002d18 <mbox1_execute.8788+0xc8>
  test_assert(15, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 80031fc:	6839      	ldr	r1, [r7, #0]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	4d39      	ldr	r5, [pc, #228]	; (80032e8 <mbox1_execute.8788+0x698>)
 8003202:	200f      	movs	r0, #15
 8003204:	ebb1 0c03 	subs.w	ip, r1, r3
 8003208:	f1dc 0100 	rsbs	r1, ip, #0
 800320c:	eb51 010c 	adcs.w	r1, r1, ip
 8003210:	f000 fa26 	bl	8003660 <_test_assert>
 8003214:	2800      	cmp	r0, #0
 8003216:	f47f ad7f 	bne.w	8002d18 <mbox1_execute.8788+0xc8>
  test_assert(16, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 800321a:	6829      	ldr	r1, [r5, #0]
 800321c:	68eb      	ldr	r3, [r5, #12]
 800321e:	2010      	movs	r0, #16
 8003220:	ebb1 0e03 	subs.w	lr, r1, r3
 8003224:	f1de 0100 	rsbs	r1, lr, #0
 8003228:	eb51 010e 	adcs.w	r1, r1, lr
 800322c:	f000 fa18 	bl	8003660 <_test_assert>
 8003230:	2800      	cmp	r0, #0
 8003232:	f47f ad71 	bne.w	8002d18 <mbox1_execute.8788+0xc8>

  /*
   * Testing fetch timeout.
   */
  msg1 = chMBFetch(&mb1, &msg2, 1);
 8003236:	2101      	movs	r1, #1
 8003238:	a801      	add	r0, sp, #4
 800323a:	f7fe fcd9 	bl	8001bf0 <chMBFetch.constprop.21>
  test_assert(17, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800323e:	f1b0 30ff 	subs.w	r0, r0, #4294967295
 8003242:	4241      	negs	r1, r0
 8003244:	4141      	adcs	r1, r0
 8003246:	2011      	movs	r0, #17
 8003248:	f000 fa0a 	bl	8003660 <_test_assert>
 800324c:	2800      	cmp	r0, #0
 800324e:	f47f ad63 	bne.w	8002d18 <mbox1_execute.8788+0xc8>
 8003252:	2620      	movs	r6, #32
 8003254:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  msg1 = chMBFetchI(&mb1, &msg2);
 8003258:	a801      	add	r0, sp, #4
 800325a:	f7fd ff11 	bl	8001080 <chMBFetchI.constprop.20>
 800325e:	4601      	mov	r1, r0
 8003260:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(18, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003264:	2012      	movs	r0, #18
 8003266:	f1b1 32ff 	subs.w	r2, r1, #4294967295
 800326a:	4251      	negs	r1, r2
 800326c:	4151      	adcs	r1, r2
 800326e:	f000 f9f7 	bl	8003660 <_test_assert>
 8003272:	2800      	cmp	r0, #0
 8003274:	f47f ad50 	bne.w	8002d18 <mbox1_execute.8788+0xc8>
 8003278:	f386 8811 	msr	BASEPRI, r6

  /*
   * Testing final conditions.
   */
  test_assert_lock(19, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800327c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800327e:	2013      	movs	r0, #19
 8003280:	1f4b      	subs	r3, r1, #5
 8003282:	4259      	negs	r1, r3
 8003284:	4159      	adcs	r1, r3
 8003286:	f000 f9eb 	bl	8003660 <_test_assert>
 800328a:	2800      	cmp	r0, #0
 800328c:	f47f aedb 	bne.w	8003046 <mbox1_execute.8788+0x3f6>
 8003290:	f04f 0800 	mov.w	r8, #0
 8003294:	f388 8811 	msr	BASEPRI, r8
 8003298:	2520      	movs	r5, #32
 800329a:	f385 8811 	msr	BASEPRI, r5
  test_assert_lock(20, chMBGetUsedCountI(&mb1) == 0, "still full");
 800329e:	69b9      	ldr	r1, [r7, #24]
 80032a0:	4c11      	ldr	r4, [pc, #68]	; (80032e8 <mbox1_execute.8788+0x698>)
 80032a2:	2014      	movs	r0, #20
 80032a4:	ebb1 0c08 	subs.w	ip, r1, r8
 80032a8:	f1dc 0100 	rsbs	r1, ip, #0
 80032ac:	eb51 010c 	adcs.w	r1, r1, ip
 80032b0:	f000 f9d6 	bl	8003660 <_test_assert>
 80032b4:	4606      	mov	r6, r0
 80032b6:	2800      	cmp	r0, #0
 80032b8:	f47f af51 	bne.w	800315e <mbox1_execute.8788+0x50e>
 80032bc:	f380 8811 	msr	BASEPRI, r0
 80032c0:	f385 8811 	msr	BASEPRI, r5
  test_assert_lock(21, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 80032c4:	68e1      	ldr	r1, [r4, #12]
 80032c6:	68a3      	ldr	r3, [r4, #8]
 80032c8:	2015      	movs	r0, #21
 80032ca:	ebb1 0e03 	subs.w	lr, r1, r3
 80032ce:	f1de 0100 	rsbs	r1, lr, #0
 80032d2:	eb51 010e 	adcs.w	r1, r1, lr
 80032d6:	f000 f9c3 	bl	8003660 <_test_assert>
 80032da:	2800      	cmp	r0, #0
 80032dc:	f43f ad26 	beq.w	8002d2c <mbox1_execute.8788+0xdc>
 80032e0:	f386 8811 	msr	BASEPRI, r6
 80032e4:	e518      	b.n	8002d18 <mbox1_execute.8788+0xc8>
 80032e6:	bf00      	nop
 80032e8:	20000854 	.word	0x20000854
 80032ec:	20000864 	.word	0x20000864
 80032f0:	08005df4 	.word	0x08005df4
 80032f4:	f3af 8000 	nop.w
 80032f8:	f3af 8000 	nop.w
 80032fc:	f3af 8000 	nop.w

08003300 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8003300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003304:	f2c4 0302 	movt	r3, #16386	; 0x4002
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8003308:	4619      	mov	r1, r3
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	f042 0201 	orr.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8003312:	680a      	ldr	r2, [r1, #0]
 8003314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003318:	0792      	lsls	r2, r2, #30
 800331a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800331e:	d5f8      	bpl.n	8003312 <__early_init+0x12>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	f022 0203 	bic.w	r2, r2, #3
 8003326:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8003328:	685a      	ldr	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800332a:	4619      	mov	r1, r3

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 800332c:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800332e:	684b      	ldr	r3, [r1, #4]
 8003330:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003334:	f013 030c 	ands.w	r3, r3, #12
 8003338:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800333c:	d1f7      	bne.n	800332e <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800333e:	6811      	ldr	r1, [r2, #0]
 8003340:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 8003344:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8003346:	6053      	str	r3, [r2, #4]
    ;                                       /* Waits until HSE is stable.   */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8003348:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	6253      	str	r3, [r2, #36]	; 0x24
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8003350:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003356:	0788      	lsls	r0, r1, #30
 8003358:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800335c:	d5f8      	bpl.n	8003350 <__early_init+0x50>
    ;                                       /* Waits until LSI is stable.   */
#endif

  /* Clock settings.*/
  RCC->CFGR  = STM32_MCOSEL    | STM32_USBPRE    | STM32_PLLMUL   |
 800335e:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8003362:	f2c0 0228 	movt	r2, #40	; 0x28
 8003366:	605a      	str	r2, [r3, #4]
               STM32_PLLSRC    | STM32_PPRE1     | STM32_PPRE2    |
               STM32_HPRE;
  RCC->CFGR2 = STM32_ADC34PRES | STM32_ADC12PRES | STM32_PREDIV;
 8003368:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 800336c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR3 = STM32_UART5SW   | STM32_UART4SW   | STM32_USART3SW |
 800336e:	2230      	movs	r2, #48	; 0x30
 8003370:	631a      	str	r2, [r3, #48]	; 0x30
               STM32_USART2SW  | STM32_I2C2SW    | STM32_I2C1SW   |
               STM32_USART1SW;

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CR   |= RCC_CR_PLLON;
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003378:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800337a:	6819      	ldr	r1, [r3, #0]
 800337c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003380:	0189      	lsls	r1, r1, #6
 8003382:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003386:	d5f8      	bpl.n	800337a <__early_init+0x7a>
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8003388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800338c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003390:	2111      	movs	r1, #17
 8003392:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8003394:	6853      	ldr	r3, [r2, #4]
 8003396:	f043 0302 	orr.w	r3, r3, #2
 800339a:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800339c:	6851      	ldr	r1, [r2, #4]
 800339e:	f001 010c 	and.w	r1, r1, #12
 80033a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033a6:	2908      	cmp	r1, #8
 80033a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80033ac:	d1f6      	bne.n	800339c <__early_init+0x9c>
    ;                                       /* Waits selection complete.    */
#endif

  /* After PLL activation because the special requirements for TIM1 and
     TIM8 bits.*/
  RCC->CFGR3 |= STM32_TIM8SW | STM32_TIM1SW;
 80033ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033b0:	631a      	str	r2, [r3, #48]	; 0x30
 80033b2:	4770      	bx	lr
 80033b4:	f3af 8000 	nop.w
 80033b8:	f3af 8000 	nop.w
 80033bc:	f3af 8000 	nop.w

080033c0 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 80033c0:	b538      	push	{r3, r4, r5, lr}
 80033c2:	2220      	movs	r2, #32
 80033c4:	4603      	mov	r3, r0
 80033c6:	f382 8811 	msr	BASEPRI, r2
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 80033ca:	4a0e      	ldr	r2, [pc, #56]	; (8003404 <chThdExit+0x44>)
 80033cc:	6994      	ldr	r4, [r2, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 80033ce:	6a60      	ldr	r0, [r4, #36]	; 0x24

  tp->p_u.exitcode = msg;
 80033d0:	6223      	str	r3, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 80033d2:	f104 0524 	add.w	r5, r4, #36	; 0x24
 80033d6:	42a8      	cmp	r0, r5
 80033d8:	d006      	beq.n	80033e8 <chThdExit+0x28>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 80033da:	6803      	ldr	r3, [r0, #0]
 80033dc:	6263      	str	r3, [r4, #36]	; 0x24
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 80033de:	f001 ff2f 	bl	8005240 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 80033e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 80033e4:	42a8      	cmp	r0, r5
 80033e6:	d1f8      	bne.n	80033da <chThdExit+0x1a>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 80033e8:	7f63      	ldrb	r3, [r4, #29]
 80033ea:	0799      	lsls	r1, r3, #30
 80033ec:	d104      	bne.n	80033f8 <chThdExit+0x38>
    REG_REMOVE(tp);
 80033ee:	6963      	ldr	r3, [r4, #20]
 80033f0:	6922      	ldr	r2, [r4, #16]
 80033f2:	611a      	str	r2, [r3, #16]
 80033f4:	6922      	ldr	r2, [r4, #16]
 80033f6:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 80033f8:	200f      	movs	r0, #15
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
  /* The thread never returns here.*/
}
 80033fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 80033fe:	f001 bec7 	b.w	8005190 <chSchGoSleepS>
 8003402:	bf00      	nop
 8003404:	200011e0 	.word	0x200011e0
 8003408:	f3af 8000 	nop.w
 800340c:	f3af 8000 	nop.w

08003410 <thread1.9729>:
static mutex_t mtx1;
#endif

static THD_FUNCTION(thread1, p) {

  chThdExit((msg_t)p);
 8003410:	f7ff bfd6 	b.w	80033c0 <chThdExit>
 8003414:	f3af 8000 	nop.w
 8003418:	f3af 8000 	nop.w
 800341c:	f3af 8000 	nop.w

08003420 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 8003420:	f001 bdd6 	b.w	8004fd0 <chSchDoRescheduleAhead>
 8003424:	f3af 8000 	nop.w
 8003428:	f3af 8000 	nop.w
 800342c:	f3af 8000 	nop.w

08003430 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8003430:	b4f0      	push	{r4, r5, r6, r7}
 8003432:	4e13      	ldr	r6, [pc, #76]	; (8003480 <__init_ram_areas+0x50>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8003434:	2500      	movs	r5, #0
 8003436:	f106 0770 	add.w	r7, r6, #112	; 0x70
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
 800343a:	f1a6 0110 	sub.w	r1, r6, #16
 800343e:	c91a      	ldmia	r1, {r1, r3, r4}
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8003440:	42a3      	cmp	r3, r4
 8003442:	d20d      	bcs.n	8003460 <__init_ram_areas+0x30>
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8003444:	3904      	subs	r1, #4
 8003446:	461a      	mov	r2, r3
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
      *p = *tp;
 8003448:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800344c:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8003450:	42a2      	cmp	r2, r4
 8003452:	d3f9      	bcc.n	8003448 <__init_ram_areas+0x18>
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8003454:	43da      	mvns	r2, r3
 8003456:	1914      	adds	r4, r2, r4
 8003458:	f024 0403 	bic.w	r4, r4, #3
 800345c:	3404      	adds	r4, #4
 800345e:	191b      	adds	r3, r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8003460:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8003464:	4293      	cmp	r3, r2
 8003466:	d203      	bcs.n	8003470 <__init_ram_areas+0x40>
      *p = 0;
 8003468:	f843 5b04 	str.w	r5, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 800346c:	4293      	cmp	r3, r2
 800346e:	d3fb      	bcc.n	8003468 <__init_ram_areas+0x38>
      *p = 0;
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8003470:	42be      	cmp	r6, r7
 8003472:	f106 0310 	add.w	r3, r6, #16
 8003476:	d201      	bcs.n	800347c <__init_ram_areas+0x4c>
 8003478:	461e      	mov	r6, r3
 800347a:	e7de      	b.n	800343a <__init_ram_areas+0xa>
#endif
}
 800347c:	bcf0      	pop	{r4, r5, r6, r7}
 800347e:	4770      	bx	lr
 8003480:	08005f60 	.word	0x08005f60
 8003484:	f3af 8000 	nop.w
 8003488:	f3af 8000 	nop.w
 800348c:	f3af 8000 	nop.w

08003490 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8003490:	e7fe      	b.n	8003490 <__default_exit>
 8003492:	bf00      	nop
 8003494:	f3af 8000 	nop.w
 8003498:	f3af 8000 	nop.w
 800349c:	f3af 8000 	nop.w

080034a0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	f3af 8000 	nop.w
 80034a8:	f3af 8000 	nop.w
 80034ac:	f3af 8000 	nop.w

080034b0 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	f3af 8000 	nop.w
 80034b8:	f3af 8000 	nop.w
 80034bc:	f3af 8000 	nop.w

080034c0 <sys2_execute.9577>:
 80034c0:	2320      	movs	r3, #32
 80034c2:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80034c6:	b662      	cpsie	i
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034c8:	b672      	cpsid	i

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80034ca:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80034ce:	b662      	cpsie	i

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80034d0:	2300      	movs	r3, #0
 80034d2:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80034d6:	b662      	cpsie	i
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	f3af 8000 	nop.w

080034e0 <notify.9464>:

#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)

#define TEST_QUEUES_SIZE 4

static void notify(io_queue_t *qp) {
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	f3af 8000 	nop.w
 80034e8:	f3af 8000 	nop.w
 80034ec:	f3af 8000 	nop.w

080034f0 <null_provider.9161>:

static void *null_provider(size_t size) {

  (void)size;
  return NULL;
}
 80034f0:	2000      	movs	r0, #0
 80034f2:	4770      	bx	lr
 80034f4:	f3af 8000 	nop.w
 80034f8:	f3af 8000 	nop.w
 80034fc:	f3af 8000 	nop.w

08003500 <tmr.7766>:

static virtual_timer_t vt;
static void tmr(void *p) {
  (void)p;

  test_timer_done = TRUE;
 8003500:	f640 1324 	movw	r3, #2340	; 0x924
 8003504:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003508:	2201      	movs	r2, #1
 800350a:	701a      	strb	r2, [r3, #0]
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop

08003510 <notify2.7680>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 8003510:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8003514:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	f3af 8000 	nop.w
 8003528:	f3af 8000 	nop.w
 800352c:	f3af 8000 	nop.w

08003530 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8003530:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8003534:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8003536:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800353a:	2300      	movs	r3, #0
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	f3af 8000 	nop.w
 8003548:	f3af 8000 	nop.w
 800354c:	f3af 8000 	nop.w

08003550 <thread.8569>:
 * A thread is spawned that sends four messages back to the tester thread.<br>
 * The test expect to receive the messages in the correct sequence and to
 * not find a fifth message waiting.
 */

static THD_FUNCTION(thread, p) {
 8003550:	b510      	push	{r4, lr}

  chMsgSend(p, 'A');
 8003552:	2141      	movs	r1, #65	; 0x41
 * A thread is spawned that sends four messages back to the tester thread.<br>
 * The test expect to receive the messages in the correct sequence and to
 * not find a fifth message waiting.
 */

static THD_FUNCTION(thread, p) {
 8003554:	4604      	mov	r4, r0

  chMsgSend(p, 'A');
 8003556:	f001 fe83 	bl	8005260 <chMsgSend>
  chMsgSend(p, 'B');
 800355a:	2142      	movs	r1, #66	; 0x42
 800355c:	4620      	mov	r0, r4
 800355e:	f001 fe7f 	bl	8005260 <chMsgSend>
  chMsgSend(p, 'C');
 8003562:	4620      	mov	r0, r4
 8003564:	2143      	movs	r1, #67	; 0x43
}
 8003566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

static THD_FUNCTION(thread, p) {

  chMsgSend(p, 'A');
  chMsgSend(p, 'B');
  chMsgSend(p, 'C');
 800356a:	f001 be79 	b.w	8005260 <chMsgSend>
 800356e:	bf00      	nop

08003570 <thread3.8230>:
static void sem3_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread3, p) {
 8003570:	b510      	push	{r4, lr}

  (void)p;
  chSemWait(&sem1);
 8003572:	f640 0424 	movw	r4, #2084	; 0x824
 8003576:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800357a:	4620      	mov	r0, r4
 800357c:	f001 fe40 	bl	8005200 <chSemWait>
  chSemSignal(&sem1);
 8003580:	4620      	mov	r0, r4
}
 8003582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

static THD_FUNCTION(thread3, p) {

  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
 8003586:	f001 bdab 	b.w	80050e0 <chSemSignal>
 800358a:	bf00      	nop
 800358c:	f3af 8000 	nop.w

08003590 <test_terminate_threads>:
 */

/**
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
 8003590:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <test_terminate_threads+0x2c>)
 8003592:	b430      	push	{r4, r5}
 8003594:	f103 0014 	add.w	r0, r3, #20
 8003598:	2520      	movs	r5, #32
 800359a:	2400      	movs	r4, #0
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 800359c:	f853 2f04 	ldr.w	r2, [r3, #4]!
 80035a0:	b13a      	cbz	r2, 80035b2 <test_terminate_threads+0x22>
 80035a2:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->p_flags |= CH_FLAG_TERMINATE;
 80035a6:	7f51      	ldrb	r1, [r2, #29]
 80035a8:	f041 0104 	orr.w	r1, r1, #4
 80035ac:	7751      	strb	r1, [r2, #29]
 80035ae:	f384 8811 	msr	BASEPRI, r4
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 80035b2:	4283      	cmp	r3, r0
 80035b4:	d1f2      	bne.n	800359c <test_terminate_threads+0xc>
    if (threads[i])
      chThdTerminate(threads[i]);
}
 80035b6:	bc30      	pop	{r4, r5}
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	2000132c 	.word	0x2000132c

080035c0 <_test_assert_time_window>:
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {
 80035c0:	b410      	push	{r4}
 80035c2:	2320      	movs	r3, #32
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80035cc:	2300      	movs	r3, #0
 80035ce:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80035d0:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chVTIsTimeWithinX(systime_t time,
                                     systime_t start,
                                     systime_t end) {

  return (bool)((systime_t)(time - start) < (systime_t)(end - start));
 80035d4:	1a64      	subs	r4, r4, r1
 80035d6:	1a51      	subs	r1, r2, r1
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 80035d8:	428c      	cmp	r4, r1
    return _test_fail(point);
  return FALSE;
 80035da:	bf38      	it	cc
 80035dc:	4618      	movcc	r0, r3
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 80035de:	d307      	bcc.n	80035f0 <_test_assert_time_window+0x30>
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 80035e0:	4a04      	ldr	r2, [pc, #16]	; (80035f4 <_test_assert_time_window+0x34>)
 80035e2:	2301      	movs	r3, #1
 80035e4:	7013      	strb	r3, [r2, #0]
  local_fail = TRUE;
 80035e6:	4a04      	ldr	r2, [pc, #16]	; (80035f8 <_test_assert_time_window+0x38>)
 80035e8:	7013      	strb	r3, [r2, #0]
  failpoint = point;
 80035ea:	4a04      	ldr	r2, [pc, #16]	; (80035fc <_test_assert_time_window+0x3c>)
 80035ec:	6010      	str	r0, [r2, #0]
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
 80035ee:	4618      	mov	r0, r3
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {

  return _test_assert(point, chVTIsSystemTimeWithin(start, end));
}
 80035f0:	bc10      	pop	{r4}
 80035f2:	4770      	bx	lr
 80035f4:	2000115c 	.word	0x2000115c
 80035f8:	20001344 	.word	0x20001344
 80035fc:	20001158 	.word	0x20001158

08003600 <_test_assert_sequence>:
  if (!condition)
    return _test_fail(point);
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
 8003600:	b4f0      	push	{r4, r5, r6, r7}
 8003602:	4e0f      	ldr	r6, [pc, #60]	; (8003640 <_test_assert_sequence+0x40>)
 8003604:	4f0f      	ldr	r7, [pc, #60]	; (8003644 <_test_assert_sequence+0x44>)
 8003606:	6835      	ldr	r5, [r6, #0]
 8003608:	463b      	mov	r3, r7
 800360a:	e004      	b.n	8003616 <_test_assert_sequence+0x16>
  char *cp = tokens_buffer;
  while (cp < tokp) {
    if (*cp++ != *expected++)
 800360c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003610:	7812      	ldrb	r2, [r2, #0]
 8003612:	42a2      	cmp	r2, r4
 8003614:	d109      	bne.n	800362a <_test_assert_sequence+0x2a>
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
  char *cp = tokens_buffer;
  while (cp < tokp) {
 8003616:	429d      	cmp	r5, r3
 8003618:	461a      	mov	r2, r3
 800361a:	f103 0301 	add.w	r3, r3, #1
 800361e:	d8f5      	bhi.n	800360c <_test_assert_sequence+0xc>
    if (*cp++ != *expected++)
     return _test_fail(point);
  }
  if (*expected)
 8003620:	780b      	ldrb	r3, [r1, #0]
 8003622:	b913      	cbnz	r3, 800362a <_test_assert_sequence+0x2a>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8003624:	6037      	str	r7, [r6, #0]
     return _test_fail(point);
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
 8003626:	4618      	mov	r0, r3
 8003628:	e007      	b.n	800363a <_test_assert_sequence+0x3a>
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 800362a:	4a07      	ldr	r2, [pc, #28]	; (8003648 <_test_assert_sequence+0x48>)
 800362c:	2301      	movs	r3, #1
 800362e:	7013      	strb	r3, [r2, #0]
  local_fail = TRUE;
 8003630:	4a06      	ldr	r2, [pc, #24]	; (800364c <_test_assert_sequence+0x4c>)
 8003632:	7013      	strb	r3, [r2, #0]
  failpoint = point;
 8003634:	4a06      	ldr	r2, [pc, #24]	; (8003650 <_test_assert_sequence+0x50>)
 8003636:	6010      	str	r0, [r2, #0]
  while (cp < tokp) {
    if (*cp++ != *expected++)
     return _test_fail(point);
  }
  if (*expected)
    return _test_fail(point);
 8003638:	4618      	mov	r0, r3
  clear_tokens();
  return FALSE;
}
 800363a:	bcf0      	pop	{r4, r5, r6, r7}
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	2000136c 	.word	0x2000136c
 8003644:	20001000 	.word	0x20001000
 8003648:	2000115c 	.word	0x2000115c
 800364c:	20001344 	.word	0x20001344
 8003650:	20001158 	.word	0x20001158
 8003654:	f3af 8000 	nop.w
 8003658:	f3af 8000 	nop.w
 800365c:	f3af 8000 	nop.w

08003660 <_test_assert>:
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 8003660:	b941      	cbnz	r1, 8003674 <_test_assert+0x14>
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 8003662:	4a05      	ldr	r2, [pc, #20]	; (8003678 <_test_assert+0x18>)
 8003664:	2301      	movs	r3, #1
 8003666:	7013      	strb	r3, [r2, #0]
  local_fail = TRUE;
 8003668:	4a04      	ldr	r2, [pc, #16]	; (800367c <_test_assert+0x1c>)
 800366a:	7013      	strb	r3, [r2, #0]
  failpoint = point;
 800366c:	4a04      	ldr	r2, [pc, #16]	; (8003680 <_test_assert+0x20>)
 800366e:	6010      	str	r0, [r2, #0]
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
 8003670:	4618      	mov	r0, r3
 8003672:	4770      	bx	lr
  return FALSE;
 8003674:	2000      	movs	r0, #0
}
 8003676:	4770      	bx	lr
 8003678:	2000115c 	.word	0x2000115c
 800367c:	20001344 	.word	0x20001344
 8003680:	20001158 	.word	0x20001158
 8003684:	f3af 8000 	nop.w
 8003688:	f3af 8000 	nop.w
 800368c:	f3af 8000 	nop.w

08003690 <sys3_execute.9606>:
 * <h2>Description</h2>
 * The chSysIntegrityCheckI() API is invoked in order to asses the state of the
 * system data structures.
 */

static void sys3_execute(void) {
 8003690:	b538      	push	{r3, r4, r5, lr}
 8003692:	2420      	movs	r4, #32
 8003694:	f384 8811 	msr	BASEPRI, r4
  bool result;

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 8003698:	2001      	movs	r0, #1
 800369a:	f001 ff91 	bl	80055c0 <chSysIntegrityCheckI>
 800369e:	2300      	movs	r3, #0
 80036a0:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_assert(1, result == false, "ready list check failed");
 80036a4:	f080 0101 	eor.w	r1, r0, #1
 80036a8:	b2c9      	uxtb	r1, r1
 80036aa:	2001      	movs	r0, #1
 80036ac:	f7ff ffd8 	bl	8003660 <_test_assert>
 80036b0:	4605      	mov	r5, r0
 80036b2:	b100      	cbz	r0, 80036b6 <sys3_execute.9606+0x26>
 80036b4:	bd38      	pop	{r3, r4, r5, pc}
 80036b6:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 80036ba:	2002      	movs	r0, #2
 80036bc:	f001 ff80 	bl	80055c0 <chSysIntegrityCheckI>
 80036c0:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(2, result == false, "virtual timers list check failed");
 80036c4:	f080 0101 	eor.w	r1, r0, #1
 80036c8:	b2c9      	uxtb	r1, r1
 80036ca:	2002      	movs	r0, #2
 80036cc:	f7ff ffc8 	bl	8003660 <_test_assert>
 80036d0:	4605      	mov	r5, r0
 80036d2:	2800      	cmp	r0, #0
 80036d4:	d1ee      	bne.n	80036b4 <sys3_execute.9606+0x24>
 80036d6:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 80036da:	2004      	movs	r0, #4
 80036dc:	f001 ff70 	bl	80055c0 <chSysIntegrityCheckI>
 80036e0:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(3, result == false, "registry list check failed");
 80036e4:	f080 0101 	eor.w	r1, r0, #1
 80036e8:	b2c9      	uxtb	r1, r1
 80036ea:	2003      	movs	r0, #3
 80036ec:	f7ff ffb8 	bl	8003660 <_test_assert>
 80036f0:	4605      	mov	r5, r0
 80036f2:	2800      	cmp	r0, #0
 80036f4:	d1de      	bne.n	80036b4 <sys3_execute.9606+0x24>
 80036f6:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 80036fa:	2008      	movs	r0, #8
 80036fc:	f001 ff60 	bl	80055c0 <chSysIntegrityCheckI>
 8003700:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(4, result == false, "port layer check failed");
 8003704:	f080 0101 	eor.w	r1, r0, #1
 8003708:	b2c9      	uxtb	r1, r1
 800370a:	2004      	movs	r0, #4
}
 800370c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  test_assert(3, result == false, "registry list check failed");

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
  chSysUnlock();
  test_assert(4, result == false, "port layer check failed");
 8003710:	f7ff bfa6 	b.w	8003660 <_test_assert>
 8003714:	f3af 8000 	nop.w
 8003718:	f3af 8000 	nop.w
 800371c:	f3af 8000 	nop.w

08003720 <thd3_execute.7984>:
 * to verify that the priority change happens as expected.<br>
 * If the @p CH_CFG_USE_MUTEXES option is enabled then the priority changes are
 * also tested under priority inheritance boosted priority state.
 */

static void thd3_execute(void) {
 8003720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003722:	4e4b      	ldr	r6, [pc, #300]	; (8003850 <thd3_execute.7984+0x130>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003724:	69b3      	ldr	r3, [r6, #24]
 8003726:	689c      	ldr	r4, [r3, #8]
  tprio_t prio, p1;

  prio = chThdGetPriorityX();
  p1 = chThdSetPriority(prio + 1);
 8003728:	1c65      	adds	r5, r4, #1
 800372a:	4628      	mov	r0, r5
 800372c:	f001 fc80 	bl	8005030 <chThdSetPriority>
  test_assert(1, p1 == prio,
 8003730:	1b02      	subs	r2, r0, r4
 8003732:	4251      	negs	r1, r2
 8003734:	4151      	adcs	r1, r2

static void thd3_execute(void) {
  tprio_t prio, p1;

  prio = chThdGetPriorityX();
  p1 = chThdSetPriority(prio + 1);
 8003736:	4607      	mov	r7, r0
  test_assert(1, p1 == prio,
 8003738:	2001      	movs	r0, #1
 800373a:	f7ff ff91 	bl	8003660 <_test_assert>
 800373e:	b100      	cbz	r0, 8003742 <thd3_execute.7984+0x22>
 8003740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003742:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(2, chThdGetPriorityX() == prio + 1,
 8003744:	6899      	ldr	r1, [r3, #8]
 8003746:	2002      	movs	r0, #2
 8003748:	1a6b      	subs	r3, r5, r1
 800374a:	4259      	negs	r1, r3
 800374c:	4159      	adcs	r1, r3
 800374e:	f7ff ff87 	bl	8003660 <_test_assert>
 8003752:	2800      	cmp	r0, #0
 8003754:	d1f4      	bne.n	8003740 <thd3_execute.7984+0x20>
              "unexpected priority level");
  p1 = chThdSetPriority(p1);
 8003756:	4638      	mov	r0, r7
 8003758:	f001 fc6a 	bl	8005030 <chThdSetPriority>
  test_assert(3, p1 == prio + 1,
 800375c:	ebb5 0c00 	subs.w	ip, r5, r0
 8003760:	f1dc 0100 	rsbs	r1, ip, #0
 8003764:	eb51 010c 	adcs.w	r1, r1, ip
 8003768:	2003      	movs	r0, #3
 800376a:	f7ff ff79 	bl	8003660 <_test_assert>
 800376e:	2800      	cmp	r0, #0
 8003770:	d1e6      	bne.n	8003740 <thd3_execute.7984+0x20>
 8003772:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(4, chThdGetPriorityX() == prio,
 8003774:	6899      	ldr	r1, [r3, #8]
 8003776:	2004      	movs	r0, #4
 8003778:	ebb4 0e01 	subs.w	lr, r4, r1
 800377c:	f1de 0100 	rsbs	r1, lr, #0
 8003780:	eb51 010e 	adcs.w	r1, r1, lr
 8003784:	f7ff ff6c 	bl	8003660 <_test_assert>
 8003788:	2800      	cmp	r0, #0
 800378a:	d1d9      	bne.n	8003740 <thd3_execute.7984+0x20>
 800378c:	2320      	movs	r3, #32
 800378e:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003792:	69b3      	ldr	r3, [r6, #24]
              "unexpected priority level");

#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  /* Simulates a priority boost situation (p_prio > p_realprio).*/
  chSysLock();
  chThdGetSelfX()->p_prio += 2;
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	3202      	adds	r2, #2
 8003798:	609a      	str	r2, [r3, #8]
 800379a:	f380 8811 	msr	BASEPRI, r0
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800379e:	69b3      	ldr	r3, [r6, #24]
  chSysUnlock();
  test_assert(5, chThdGetPriorityX() == prio + 2,
 80037a0:	6899      	ldr	r1, [r3, #8]
 80037a2:	1ca7      	adds	r7, r4, #2
 80037a4:	2005      	movs	r0, #5
 80037a6:	1a7a      	subs	r2, r7, r1
 80037a8:	4251      	negs	r1, r2
 80037aa:	4151      	adcs	r1, r2
 80037ac:	f7ff ff58 	bl	8003660 <_test_assert>
 80037b0:	2800      	cmp	r0, #0
 80037b2:	d1c5      	bne.n	8003740 <thd3_execute.7984+0x20>
              "unexpected priority level");

  /* Tries to raise but below the boost level. */
  p1 = chThdSetPriority(prio + 1);
 80037b4:	4628      	mov	r0, r5
 80037b6:	f001 fc3b 	bl	8005030 <chThdSetPriority>
  test_assert(6, p1 == prio,
 80037ba:	1b03      	subs	r3, r0, r4
 80037bc:	4259      	negs	r1, r3
 80037be:	4159      	adcs	r1, r3
 80037c0:	2006      	movs	r0, #6
 80037c2:	f7ff ff4d 	bl	8003660 <_test_assert>
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d1ba      	bne.n	8003740 <thd3_execute.7984+0x20>
              "unexpected returned priority level");
  test_assert(7, chThdGetSelfX()->p_prio == prio + 2,
 80037ca:	69b3      	ldr	r3, [r6, #24]
 80037cc:	6899      	ldr	r1, [r3, #8]
 80037ce:	2007      	movs	r0, #7
 80037d0:	ebb7 0c01 	subs.w	ip, r7, r1
 80037d4:	f1dc 0100 	rsbs	r1, ip, #0
 80037d8:	eb51 010c 	adcs.w	r1, r1, ip
 80037dc:	f7ff ff40 	bl	8003660 <_test_assert>
 80037e0:	2800      	cmp	r0, #0
 80037e2:	d1ad      	bne.n	8003740 <thd3_execute.7984+0x20>
              "unexpected priority level");
  test_assert(8, chThdGetSelfX()->p_realprio == prio + 1,
 80037e4:	69b3      	ldr	r3, [r6, #24]
 80037e6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80037e8:	2008      	movs	r0, #8
 80037ea:	ebb5 0e01 	subs.w	lr, r5, r1
 80037ee:	f1de 0100 	rsbs	r1, lr, #0
 80037f2:	eb51 010e 	adcs.w	r1, r1, lr
 80037f6:	f7ff ff33 	bl	8003660 <_test_assert>
 80037fa:	2800      	cmp	r0, #0
 80037fc:	d1a0      	bne.n	8003740 <thd3_execute.7984+0x20>
              "unexpected returned real priority level");

  /* Tries to raise above the boost level. */
  p1 = chThdSetPriority(prio + 3);
 80037fe:	1ce7      	adds	r7, r4, #3
 8003800:	4638      	mov	r0, r7
 8003802:	f001 fc15 	bl	8005030 <chThdSetPriority>
  test_assert(9, p1 == prio + 1,
 8003806:	1a28      	subs	r0, r5, r0
 8003808:	4241      	negs	r1, r0
 800380a:	4141      	adcs	r1, r0
 800380c:	2009      	movs	r0, #9
 800380e:	f7ff ff27 	bl	8003660 <_test_assert>
 8003812:	2800      	cmp	r0, #0
 8003814:	d194      	bne.n	8003740 <thd3_execute.7984+0x20>
              "unexpected returned priority level");
  test_assert(10, chThdGetSelfX()->p_prio == prio + 3,
 8003816:	69b3      	ldr	r3, [r6, #24]
 8003818:	6899      	ldr	r1, [r3, #8]
 800381a:	200a      	movs	r0, #10
 800381c:	1a7a      	subs	r2, r7, r1
 800381e:	4251      	negs	r1, r2
 8003820:	4151      	adcs	r1, r2
 8003822:	f7ff ff1d 	bl	8003660 <_test_assert>
 8003826:	2800      	cmp	r0, #0
 8003828:	d18a      	bne.n	8003740 <thd3_execute.7984+0x20>
              "unexpected priority level");
  test_assert(11, chThdGetSelfX()->p_realprio == prio + 3,
 800382a:	69b3      	ldr	r3, [r6, #24]
 800382c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800382e:	200b      	movs	r0, #11
 8003830:	1a7b      	subs	r3, r7, r1
 8003832:	4259      	negs	r1, r3
 8003834:	4159      	adcs	r1, r3
 8003836:	f7ff ff13 	bl	8003660 <_test_assert>
 800383a:	2800      	cmp	r0, #0
 800383c:	d180      	bne.n	8003740 <thd3_execute.7984+0x20>
 800383e:	2320      	movs	r3, #32
 8003840:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003844:	69b3      	ldr	r3, [r6, #24]
              "unexpected real priority level");

  chSysLock();
  chThdGetSelfX()->p_prio = prio;
 8003846:	609c      	str	r4, [r3, #8]
  chThdGetSelfX()->p_realprio = prio;
 8003848:	63dc      	str	r4, [r3, #60]	; 0x3c
 800384a:	f380 8811 	msr	BASEPRI, r0
 800384e:	e777      	b.n	8003740 <thd3_execute.7984+0x20>
 8003850:	200011e0 	.word	0x200011e0
 8003854:	f3af 8000 	nop.w
 8003858:	f3af 8000 	nop.w
 800385c:	f3af 8000 	nop.w

08003860 <test_emit_token>:
 8003860:	2320      	movs	r3, #32
 8003862:	f383 8811 	msr	BASEPRI, r3
 * @param[in] token     the token as a char
 */
void test_emit_token(char token) {

  chSysLock();
  *tokp++ = token;
 8003866:	f241 336c 	movw	r3, #4972	; 0x136c
 800386a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	f802 0b01 	strb.w	r0, [r2], #1
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	2300      	movs	r3, #0
 8003878:	f383 8811 	msr	BASEPRI, r3
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop

08003880 <thread.9289>:
 * one to fail.
 */

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8003880:	7800      	ldrb	r0, [r0, #0]
 8003882:	f7ff bfed 	b.w	8003860 <test_emit_token>
 8003886:	bf00      	nop
 8003888:	f3af 8000 	nop.w
 800388c:	f3af 8000 	nop.w

08003890 <h1.8926>:
static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8003890:	2041      	movs	r0, #65	; 0x41
 8003892:	f7ff bfe5 	b.w	8003860 <test_emit_token>
 8003896:	bf00      	nop
 8003898:	f3af 8000 	nop.w
 800389c:	f3af 8000 	nop.w

080038a0 <h2.8923>:
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 80038a0:	2042      	movs	r0, #66	; 0x42
 80038a2:	f7ff bfdd 	b.w	8003860 <test_emit_token>
 80038a6:	bf00      	nop
 80038a8:	f3af 8000 	nop.w
 80038ac:	f3af 8000 	nop.w

080038b0 <h3.8920>:
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 80038b0:	2043      	movs	r0, #67	; 0x43
 80038b2:	f7ff bfd5 	b.w	8003860 <test_emit_token>
 80038b6:	bf00      	nop
 80038b8:	f3af 8000 	nop.w
 80038bc:	f3af 8000 	nop.w

080038c0 <thread1.8452.4142>:
static void mtx1_setup(void) {

  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread1, p) {
 80038c0:	b538      	push	{r3, r4, r5, lr}

  chMtxLock(&m1);
 80038c2:	f640 04a4 	movw	r4, #2212	; 0x8a4
static void mtx1_setup(void) {

  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread1, p) {
 80038c6:	4605      	mov	r5, r0

  chMtxLock(&m1);
 80038c8:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80038cc:	4620      	mov	r0, r4
 80038ce:	f001 fdf7 	bl	80054c0 <chMtxLock>
  test_emit_token(*(char *)p);
 80038d2:	7828      	ldrb	r0, [r5, #0]
 80038d4:	f7ff ffc4 	bl	8003860 <test_emit_token>
  chMtxUnlock(&m1);
 80038d8:	4620      	mov	r0, r4
}
 80038da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

static THD_FUNCTION(thread1, p) {

  chMtxLock(&m1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
 80038de:	f001 bd5f 	b.w	80053a0 <chMtxUnlock>
 80038e2:	bf00      	nop
 80038e4:	f3af 8000 	nop.w
 80038e8:	f3af 8000 	nop.w
 80038ec:	f3af 8000 	nop.w

080038f0 <thread12.8443>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
}

static THD_FUNCTION(thread12, p) {
 80038f0:	b538      	push	{r3, r4, r5, lr}

  chMtxLock(&m2);
 80038f2:	f640 0400 	movw	r4, #2048	; 0x800
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
}

static THD_FUNCTION(thread12, p) {
 80038f6:	4605      	mov	r5, r0

  chMtxLock(&m2);
 80038f8:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80038fc:	4620      	mov	r0, r4
 80038fe:	f001 fddf 	bl	80054c0 <chMtxLock>
  test_emit_token(*(char *)p);
 8003902:	7828      	ldrb	r0, [r5, #0]
 8003904:	f7ff ffac 	bl	8003860 <test_emit_token>
  chMtxUnlock(&m2);
 8003908:	4620      	mov	r0, r4
}
 800390a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

static THD_FUNCTION(thread12, p) {

  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
 800390e:	f001 bd47 	b.w	80053a0 <chMtxUnlock>
 8003912:	bf00      	nop
 8003914:	f3af 8000 	nop.w
 8003918:	f3af 8000 	nop.w
 800391c:	f3af 8000 	nop.w

08003920 <thread1.8227>:
static void sem1_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread1, p) {
 8003920:	b510      	push	{r4, lr}
 8003922:	4604      	mov	r4, r0

  chSemWait(&sem1);
 8003924:	f640 0024 	movw	r0, #2084	; 0x824
 8003928:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800392c:	f001 fc68 	bl	8005200 <chSemWait>
  test_emit_token(*(char *)p);
 8003930:	7820      	ldrb	r0, [r4, #0]
}
 8003932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static THD_FUNCTION(thread1, p) {

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
 8003936:	f7ff bf93 	b.w	8003860 <test_emit_token>
 800393a:	bf00      	nop
 800393c:	f3af 8000 	nop.w

08003940 <thread.7981.4158>:
 * priority order regardless of the initial order.
 */

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8003940:	7800      	ldrb	r0, [r0, #0]
 8003942:	f7ff bf8d 	b.w	8003860 <test_emit_token>
 8003946:	bf00      	nop
 8003948:	f3af 8000 	nop.w
 800394c:	f3af 8000 	nop.w

08003950 <test_println>:
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 8003950:	b538      	push	{r3, r4, r5, lr}
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003952:	7801      	ldrb	r1, [r0, #0]
 8003954:	4d08      	ldr	r5, [pc, #32]	; (8003978 <test_println+0x28>)
 8003956:	b141      	cbz	r1, 800396a <test_println+0x1a>
 8003958:	4604      	mov	r4, r0
    chSequentialStreamPut(chp, *msgp++);
 800395a:	6828      	ldr	r0, [r5, #0]
 800395c:	6803      	ldr	r3, [r0, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003962:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8003966:	2900      	cmp	r1, #0
 8003968:	d1f7      	bne.n	800395a <test_println+0xa>
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 800396a:	6828      	ldr	r0, [r5, #0]
 800396c:	4903      	ldr	r1, [pc, #12]	; (800397c <test_println+0x2c>)
 800396e:	6803      	ldr	r3, [r0, #0]
 8003970:	2202      	movs	r2, #2
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4798      	blx	r3
 8003976:	bd38      	pop	{r3, r4, r5, pc}
 8003978:	20001370 	.word	0x20001370
 800397c:	08005ff0 	.word	0x08005ff0

08003980 <test_print>:
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 8003980:	b538      	push	{r3, r4, r5, lr}

  while (*msgp)
 8003982:	7801      	ldrb	r1, [r0, #0]
 8003984:	b149      	cbz	r1, 800399a <test_print+0x1a>
 8003986:	4d05      	ldr	r5, [pc, #20]	; (800399c <test_print+0x1c>)
 8003988:	4604      	mov	r4, r0
    chSequentialStreamPut(chp, *msgp++);
 800398a:	6828      	ldr	r0, [r5, #0]
 800398c:	6803      	ldr	r3, [r0, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003992:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8003996:	2900      	cmp	r1, #0
 8003998:	d1f7      	bne.n	800398a <test_print+0xa>
 800399a:	bd38      	pop	{r3, r4, r5, pc}
 800399c:	20001370 	.word	0x20001370

080039a0 <test_printn>:
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 80039a0:	b570      	push	{r4, r5, r6, lr}
 80039a2:	b084      	sub	sp, #16
  char buf[16], *p;

  if (!n)
 80039a4:	2800      	cmp	r0, #0
 80039a6:	d026      	beq.n	80039f6 <test_printn+0x56>
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 80039a8:	f10d 0501 	add.w	r5, sp, #1
  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 80039ac:	f64c 46cd 	movw	r6, #52429	; 0xcccd
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 80039b0:	462b      	mov	r3, r5
  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 80039b2:	f6cc 46cc 	movt	r6, #52428	; 0xcccc
 80039b6:	fba6 1200 	umull	r1, r2, r6, r0
 80039ba:	08d2      	lsrs	r2, r2, #3
 80039bc:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80039c0:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
 80039c4:	3130      	adds	r1, #48	; 0x30
 80039c6:	b2c9      	uxtb	r1, r1
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 80039c8:	461c      	mov	r4, r3
  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 80039ca:	f803 1c01 	strb.w	r1, [r3, #-1]

  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
 80039ce:	4610      	mov	r0, r2
 80039d0:	3301      	adds	r3, #1
 80039d2:	2a00      	cmp	r2, #0
 80039d4:	d1ef      	bne.n	80039b6 <test_printn+0x16>
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 80039d6:	466b      	mov	r3, sp
 80039d8:	429c      	cmp	r4, r3
 80039da:	d90a      	bls.n	80039f2 <test_printn+0x52>
 80039dc:	4e09      	ldr	r6, [pc, #36]	; (8003a04 <test_printn+0x64>)
 80039de:	e002      	b.n	80039e6 <test_printn+0x46>
 80039e0:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80039e4:	3c01      	subs	r4, #1
      chSequentialStreamPut(chp, *--p);
 80039e6:	6830      	ldr	r0, [r6, #0]
 80039e8:	6803      	ldr	r3, [r0, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	4798      	blx	r3
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 80039ee:	42ac      	cmp	r4, r5
 80039f0:	d1f6      	bne.n	80039e0 <test_printn+0x40>
      chSequentialStreamPut(chp, *--p);
  }
}
 80039f2:	b004      	add	sp, #16
 80039f4:	bd70      	pop	{r4, r5, r6, pc}
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
    chSequentialStreamPut(chp, '0');
 80039f6:	4b03      	ldr	r3, [pc, #12]	; (8003a04 <test_printn+0x64>)
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	6803      	ldr	r3, [r0, #0]
 80039fc:	2130      	movs	r1, #48	; 0x30
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	4798      	blx	r3
 8003a02:	e7f6      	b.n	80039f2 <test_printn+0x52>
 8003a04:	20001370 	.word	0x20001370
 8003a08:	f3af 8000 	nop.w
 8003a0c:	f3af 8000 	nop.w

08003a10 <print_line.7771>:
    tcp->teardown();

  test_wait_threads();
}

static void print_line(void) {
 8003a10:	b538      	push	{r3, r4, r5, lr}
 8003a12:	4d08      	ldr	r5, [pc, #32]	; (8003a34 <print_line.7771+0x24>)
 8003a14:	244c      	movs	r4, #76	; 0x4c
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
 8003a16:	6828      	ldr	r0, [r5, #0]
 8003a18:	6803      	ldr	r3, [r0, #0]
 8003a1a:	212d      	movs	r1, #45	; 0x2d
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	4798      	blx	r3
}

static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
 8003a20:	3c01      	subs	r4, #1
 8003a22:	d1f8      	bne.n	8003a16 <print_line.7771+0x6>
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8003a24:	4b03      	ldr	r3, [pc, #12]	; (8003a34 <print_line.7771+0x24>)
 8003a26:	4904      	ldr	r1, [pc, #16]	; (8003a38 <print_line.7771+0x28>)
 8003a28:	6818      	ldr	r0, [r3, #0]
 8003a2a:	6803      	ldr	r3, [r0, #0]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4798      	blx	r3
 8003a32:	bd38      	pop	{r3, r4, r5, pc}
 8003a34:	20001370 	.word	0x20001370
 8003a38:	08005ff0 	.word	0x08005ff0
 8003a3c:	f3af 8000 	nop.w

08003a40 <_port_irq_epilogue>:
 8003a40:	2320      	movs	r3, #32
 8003a42:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8003a46:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8003a4a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003a54:	d102      	bne.n	8003a5c <_port_irq_epilogue+0x1c>
 8003a56:	f383 8811 	msr	BASEPRI, r3
 8003a5a:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8003a5c:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8003a60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a64:	f843 2c04 	str.w	r2, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8003a68:	f1a3 0220 	sub.w	r2, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8003a6c:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8003a70:	4a05      	ldr	r2, [pc, #20]	; (8003a88 <_port_irq_epilogue+0x48>)
 8003a72:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8003a74:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8003a76:	6889      	ldr	r1, [r1, #8]
 8003a78:	6892      	ldr	r2, [r2, #8]
 8003a7a:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8003a7c:	bf8c      	ite	hi
 8003a7e:	4a03      	ldrhi	r2, [pc, #12]	; (8003a8c <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8003a80:	4a03      	ldrls	r2, [pc, #12]	; (8003a90 <_port_irq_epilogue+0x50>)
 8003a82:	f843 2c08 	str.w	r2, [r3, #-8]
 8003a86:	4770      	bx	lr
 8003a88:	200011e0 	.word	0x200011e0
 8003a8c:	08000301 	.word	0x08000301
 8003a90:	08000304 	.word	0x08000304
 8003a94:	f3af 8000 	nop.w
 8003a98:	f3af 8000 	nop.w
 8003a9c:	f3af 8000 	nop.w

08003aa0 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8003aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8003aa4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8003aa8:	692b      	ldr	r3, [r5, #16]
 8003aaa:	0799      	lsls	r1, r3, #30
 8003aac:	d403      	bmi.n	8003ab6 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8003aae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8003ab2:	f7ff bfc5 	b.w	8003a40 <_port_irq_epilogue>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 8003ab6:	f04f 0800 	mov.w	r8, #0
 8003aba:	f8c5 8010 	str.w	r8, [r5, #16]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003abe:	2620      	movs	r6, #32
 8003ac0:	f386 8811 	msr	BASEPRI, r6
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8003ac4:	4c19      	ldr	r4, [pc, #100]	; (8003b2c <VectorB0+0x8c>)
 8003ac6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003ac8:	69e3      	ldr	r3, [r4, #28]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8003aca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003acc:	6899      	ldr	r1, [r3, #8]
 8003ace:	1a17      	subs	r7, r2, r0
 8003ad0:	428f      	cmp	r7, r1
 8003ad2:	f104 071c 	add.w	r7, r4, #28
 8003ad6:	d31a      	bcc.n	8003b0e <VectorB0+0x6e>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8003ad8:	681a      	ldr	r2, [r3, #0]
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 8003ada:	f8d3 c00c 	ldr.w	ip, [r3, #12]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8003ade:	1841      	adds	r1, r0, r1
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8003ae0:	42ba      	cmp	r2, r7
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8003ae2:	62a1      	str	r1, [r4, #40]	; 0x28

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8003ae4:	6057      	str	r7, [r2, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 8003ae6:	61e2      	str	r2, [r4, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 8003ae8:	f8c3 800c 	str.w	r8, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8003aec:	bf08      	it	eq
 8003aee:	f8c5 800c 	streq.w	r8, [r5, #12]
 8003af2:	f388 8811 	msr	BASEPRI, r8
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 8003af6:	6918      	ldr	r0, [r3, #16]
 8003af8:	47e0      	blx	ip
 8003afa:	f386 8811 	msr	BASEPRI, r6
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8003afe:	69e3      	ldr	r3, [r4, #28]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8003b00:	6a6a      	ldr	r2, [r5, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8003b02:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003b04:	6899      	ldr	r1, [r3, #8]
 8003b06:	ebc0 0c02 	rsb	ip, r0, r2
 8003b0a:	4561      	cmp	r1, ip
 8003b0c:	d9e4      	bls.n	8003ad8 <VectorB0+0x38>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8003b0e:	42bb      	cmp	r3, r7
 8003b10:	d008      	beq.n	8003b24 <VectorB0+0x84>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 8003b12:	1841      	adds	r1, r0, r1
 8003b14:	1a89      	subs	r1, r1, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8003b16:	2901      	cmp	r1, #1
 8003b18:	bf98      	it	ls
 8003b1a:	2102      	movls	r1, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8003b1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  }
  port_timer_set_alarm(now + delta);
 8003b20:	188a      	adds	r2, r1, r2
 8003b22:	635a      	str	r2, [r3, #52]	; 0x34
 8003b24:	2300      	movs	r3, #0
 8003b26:	f383 8811 	msr	BASEPRI, r3
 8003b2a:	e7c0      	b.n	8003aae <VectorB0+0xe>
 8003b2c:	200011e0 	.word	0x200011e0

08003b30 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 8003b30:	b508      	push	{r3, lr}
 8003b32:	2220      	movs	r2, #32
 8003b34:	4603      	mov	r3, r0
 8003b36:	f382 8811 	msr	BASEPRI, r2
  void *objp;

  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  objp = mp->mp_next;
 8003b3a:	6800      	ldr	r0, [r0, #0]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
 8003b3c:	b128      	cbz	r0, 8003b4a <chPoolAlloc+0x1a>
    mp->mp_next = mp->mp_next->ph_next;
 8003b3e:	6802      	ldr	r2, [r0, #0]
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	2300      	movs	r3, #0
 8003b44:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 8003b48:	bd08      	pop	{r3, pc}
  objp = mp->mp_next;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
    mp->mp_next = mp->mp_next->ph_next;
  }
  else if (mp->mp_provider != NULL) {
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	2a00      	cmp	r2, #0
 8003b4e:	d0f8      	beq.n	8003b42 <chPoolAlloc+0x12>
    objp = mp->mp_provider(mp->mp_object_size);
 8003b50:	6858      	ldr	r0, [r3, #4]
 8003b52:	4790      	blx	r2
 8003b54:	e7f5      	b.n	8003b42 <chPoolAlloc+0x12>
 8003b56:	bf00      	nop
 8003b58:	f3af 8000 	nop.w
 8003b5c:	f3af 8000 	nop.w

08003b60 <chHeapStatus>:
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 8003b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL) {
    heapp = &default_heap;
 8003b62:	4c0e      	ldr	r4, [pc, #56]	; (8003b9c <chHeapStatus+0x3c>)
 8003b64:	2800      	cmp	r0, #0
 8003b66:	bf18      	it	ne
 8003b68:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
 8003b6a:	f104 0610 	add.w	r6, r4, #16
 8003b6e:	4630      	mov	r0, r6
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 8003b70:	460f      	mov	r7, r1

  if (heapp == NULL) {
    heapp = &default_heap;
  }

  H_LOCK(heapp);
 8003b72:	f001 fca5 	bl	80054c0 <chMtxLock>
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8003b76:	68a3      	ldr	r3, [r4, #8]
 8003b78:	b16b      	cbz	r3, 8003b96 <chHeapStatus+0x36>
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	4614      	mov	r4, r2
 8003b7e:	cb28      	ldmia	r3, {r3, r5}
    sz += qp->h.u.next->h.size;
    n++;
 8003b80:	3401      	adds	r4, #1
  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
    sz += qp->h.u.next->h.size;
 8003b82:	1952      	adds	r2, r2, r5

  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1fa      	bne.n	8003b7e <chHeapStatus+0x1e>
    sz += qp->h.u.next->h.size;
    n++;
    qp = qp->h.u.next;
  }
  if (sizep != NULL) {
 8003b88:	b107      	cbz	r7, 8003b8c <chHeapStatus+0x2c>
    *sizep = sz;
 8003b8a:	603a      	str	r2, [r7, #0]
  }
  H_UNLOCK(heapp);
 8003b8c:	4630      	mov	r0, r6
 8003b8e:	f001 fc07 	bl	80053a0 <chMtxUnlock>

  return n;
}
 8003b92:	4620      	mov	r0, r4
 8003b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (heapp == NULL) {
    heapp = &default_heap;
  }

  H_LOCK(heapp);
  sz = 0;
 8003b96:	461a      	mov	r2, r3
  n = 0;
 8003b98:	461c      	mov	r4, r3
 8003b9a:	e7f5      	b.n	8003b88 <chHeapStatus+0x28>
 8003b9c:	20001348 	.word	0x20001348

08003ba0 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8003ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
 8003ba2:	f850 5c08 	ldr.w	r5, [r0, #-8]
  qp = &heapp->h_free;

  H_LOCK(heapp);
 8003ba6:	f105 0710 	add.w	r7, r5, #16
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8003baa:	4606      	mov	r6, r0
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
 8003bac:	f1a0 0408 	sub.w	r4, r0, #8
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8003bb0:	3508      	adds	r5, #8

  H_LOCK(heapp);
 8003bb2:	4638      	mov	r0, r7
 8003bb4:	f001 fc84 	bl	80054c0 <chMtxLock>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8003bb8:	462b      	mov	r3, r5

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 8003bba:	42ab      	cmp	r3, r5
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8003bbc:	681a      	ldr	r2, [r3, #0]

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 8003bbe:	d001      	beq.n	8003bc4 <chHeapFree+0x24>
 8003bc0:	42a3      	cmp	r3, r4
 8003bc2:	d202      	bcs.n	8003bca <chHeapFree+0x2a>
 8003bc4:	b11a      	cbz	r2, 8003bce <chHeapFree+0x2e>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8003bc6:	4294      	cmp	r4, r2
 8003bc8:	d301      	bcc.n	8003bce <chHeapFree+0x2e>
        qp->h.size += hp->h.size + sizeof(union heap_header);
        qp->h.u.next = hp->h.u.next;
      }
      break;
    }
    qp = qp->h.u.next;
 8003bca:	4613      	mov	r3, r2
 8003bcc:	e7f5      	b.n	8003bba <chHeapFree+0x1a>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8003bce:	f856 1c04 	ldr.w	r1, [r6, #-4]
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
 8003bd2:	f846 2c08 	str.w	r2, [r6, #-8]
      qp->h.u.next = hp;
 8003bd6:	601c      	str	r4, [r3, #0]
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8003bd8:	f101 0208 	add.w	r2, r1, #8
 8003bdc:	f856 5c08 	ldr.w	r5, [r6, #-8]
 8003be0:	18a0      	adds	r0, r4, r2
 8003be2:	42a8      	cmp	r0, r5
 8003be4:	d00a      	beq.n	8003bfc <chHeapFree+0x5c>
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	f102 0108 	add.w	r1, r2, #8
 8003bec:	1859      	adds	r1, r3, r1
 8003bee:	428c      	cmp	r4, r1
 8003bf0:	d012      	beq.n	8003c18 <chHeapFree+0x78>
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8003bf2:	4638      	mov	r0, r7

  return;
}
 8003bf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8003bf8:	f001 bbd2 	b.w	80053a0 <chMtxUnlock>
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8003bfc:	6840      	ldr	r0, [r0, #4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 8003bfe:	58a2      	ldr	r2, [r4, r2]
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8003c00:	1809      	adds	r1, r1, r0
 8003c02:	3108      	adds	r1, #8
 8003c04:	f846 1c04 	str.w	r1, [r6, #-4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 8003c08:	f846 2c08 	str.w	r2, [r6, #-8]
      }
      if ((LIMIT(qp) == hp)) {
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	f102 0108 	add.w	r1, r2, #8
 8003c12:	1859      	adds	r1, r3, r1
 8003c14:	428c      	cmp	r4, r1
 8003c16:	d1ec      	bne.n	8003bf2 <chHeapFree+0x52>
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 8003c18:	f856 0c04 	ldr.w	r0, [r6, #-4]
        qp->h.u.next = hp->h.u.next;
 8003c1c:	f856 1c08 	ldr.w	r1, [r6, #-8]
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 8003c20:	1812      	adds	r2, r2, r0
 8003c22:	3208      	adds	r2, #8
        qp->h.u.next = hp->h.u.next;
 8003c24:	e883 0006 	stmia.w	r3, {r1, r2}
 8003c28:	e7e3      	b.n	8003bf2 <chHeapFree+0x52>
 8003c2a:	bf00      	nop
 8003c2c:	f3af 8000 	nop.w

08003c30 <heap1_execute.9131>:

static void heap1_execute(void) {
 8003c30:	b570      	push	{r4, r5, r6, lr}
 8003c32:	b082      	sub	sp, #8

  /*
   * Test on the default heap in order to cover the core allocator at
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
 8003c34:	a901      	add	r1, sp, #4
 8003c36:	2000      	movs	r0, #0
 8003c38:	f7ff ff92 	bl	8003b60 <chHeapStatus>
  p1 = chHeapAlloc(NULL, SIZE);
 8003c3c:	2110      	movs	r1, #16
 8003c3e:	2000      	movs	r0, #0
 8003c40:	f001 fc4e 	bl	80054e0 <chHeapAlloc>
  test_assert(1, p1 != NULL, "allocation failed");
 8003c44:	1c01      	adds	r1, r0, #0
 8003c46:	bf18      	it	ne
 8003c48:	2101      	movne	r1, #1
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	2001      	movs	r0, #1
 8003c4e:	f7ff fd07 	bl	8003660 <_test_assert>
 8003c52:	4605      	mov	r5, r0
 8003c54:	b108      	cbz	r0, 8003c5a <heap1_execute.9131+0x2a>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
  chHeapFree(p1);

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
  test_assert(12, n == sz, "size changed");
}
 8003c56:	b002      	add	sp, #8
 8003c58:	bd70      	pop	{r4, r5, r6, pc}
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
  p1 = chHeapAlloc(NULL, SIZE);
  test_assert(1, p1 != NULL, "allocation failed");
  chHeapFree(p1);
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	f7ff ffa0 	bl	8003ba0 <chHeapFree>
  p1 = chHeapAlloc(NULL, (size_t)-256);
 8003c60:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8003c64:	4628      	mov	r0, r5
 8003c66:	f001 fc3b 	bl	80054e0 <chHeapAlloc>
  test_assert(2, p1 == NULL, "allocation not failed");
 8003c6a:	f1d0 0101 	rsbs	r1, r0, #1
 8003c6e:	bf38      	it	cc
 8003c70:	2100      	movcc	r1, #0
 8003c72:	2002      	movs	r0, #2
 8003c74:	f7ff fcf4 	bl	8003660 <_test_assert>
 8003c78:	2800      	cmp	r0, #0
 8003c7a:	d1ec      	bne.n	8003c56 <heap1_execute.9131+0x26>

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);
 8003c7c:	a901      	add	r1, sp, #4
 8003c7e:	487d      	ldr	r0, [pc, #500]	; (8003e74 <heap1_execute.9131+0x244>)
 8003c80:	f7ff ff6e 	bl	8003b60 <chHeapStatus>

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8003c84:	2110      	movs	r1, #16
 8003c86:	487b      	ldr	r0, [pc, #492]	; (8003e74 <heap1_execute.9131+0x244>)
 8003c88:	f001 fc2a 	bl	80054e0 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8003c8c:	2110      	movs	r1, #16

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8003c8e:	4605      	mov	r5, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8003c90:	4878      	ldr	r0, [pc, #480]	; (8003e74 <heap1_execute.9131+0x244>)
 8003c92:	f001 fc25 	bl	80054e0 <chHeapAlloc>
  p3 = chHeapAlloc(&test_heap, SIZE);
 8003c96:	2110      	movs	r1, #16
  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
  p2 = chHeapAlloc(&test_heap, SIZE);
 8003c98:	4604      	mov	r4, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 8003c9a:	4876      	ldr	r0, [pc, #472]	; (8003e74 <heap1_execute.9131+0x244>)
 8003c9c:	f001 fc20 	bl	80054e0 <chHeapAlloc>
 8003ca0:	4606      	mov	r6, r0
  chHeapFree(p1);                               /* Does not merge.*/
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	f7ff ff7c 	bl	8003ba0 <chHeapFree>
  chHeapFree(p2);                               /* Merges backward.*/
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f7ff ff79 	bl	8003ba0 <chHeapFree>
  chHeapFree(p3);                               /* Merges both sides.*/
 8003cae:	4630      	mov	r0, r6
 8003cb0:	f7ff ff76 	bl	8003ba0 <chHeapFree>
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8003cb4:	4669      	mov	r1, sp
 8003cb6:	486f      	ldr	r0, [pc, #444]	; (8003e74 <heap1_execute.9131+0x244>)
 8003cb8:	f7ff ff52 	bl	8003b60 <chHeapStatus>
 8003cbc:	1e42      	subs	r2, r0, #1
 8003cbe:	4251      	negs	r1, r2
 8003cc0:	4151      	adcs	r1, r2
 8003cc2:	2003      	movs	r0, #3
 8003cc4:	f7ff fccc 	bl	8003660 <_test_assert>
 8003cc8:	2800      	cmp	r0, #0
 8003cca:	d1c4      	bne.n	8003c56 <heap1_execute.9131+0x26>

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8003ccc:	2110      	movs	r1, #16
 8003cce:	4869      	ldr	r0, [pc, #420]	; (8003e74 <heap1_execute.9131+0x244>)
 8003cd0:	f001 fc06 	bl	80054e0 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8003cd4:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges backward.*/
  chHeapFree(p3);                               /* Merges both sides.*/
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8003cd6:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8003cd8:	4866      	ldr	r0, [pc, #408]	; (8003e74 <heap1_execute.9131+0x244>)
 8003cda:	f001 fc01 	bl	80054e0 <chHeapAlloc>
  p3 = chHeapAlloc(&test_heap, SIZE);
 8003cde:	2110      	movs	r1, #16
  chHeapFree(p3);                               /* Merges both sides.*/
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
  p2 = chHeapAlloc(&test_heap, SIZE);
 8003ce0:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 8003ce2:	4864      	ldr	r0, [pc, #400]	; (8003e74 <heap1_execute.9131+0x244>)
 8003ce4:	f001 fbfc 	bl	80054e0 <chHeapAlloc>
  chHeapFree(p3);                               /* Merges forward.*/
 8003ce8:	f7ff ff5a 	bl	8003ba0 <chHeapFree>
  chHeapFree(p2);                               /* Merges forward.*/
 8003cec:	4628      	mov	r0, r5
 8003cee:	f7ff ff57 	bl	8003ba0 <chHeapFree>
  chHeapFree(p1);                               /* Merges forward.*/
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f7ff ff54 	bl	8003ba0 <chHeapFree>
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8003cf8:	4669      	mov	r1, sp
 8003cfa:	485e      	ldr	r0, [pc, #376]	; (8003e74 <heap1_execute.9131+0x244>)
 8003cfc:	f7ff ff30 	bl	8003b60 <chHeapStatus>
 8003d00:	1e43      	subs	r3, r0, #1
 8003d02:	4259      	negs	r1, r3
 8003d04:	4159      	adcs	r1, r3
 8003d06:	2004      	movs	r0, #4
 8003d08:	f7ff fcaa 	bl	8003660 <_test_assert>
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	d1a2      	bne.n	8003c56 <heap1_execute.9131+0x26>

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 8003d10:	2111      	movs	r1, #17
 8003d12:	4858      	ldr	r0, [pc, #352]	; (8003e74 <heap1_execute.9131+0x244>)
 8003d14:	f001 fbe4 	bl	80054e0 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8003d18:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges forward.*/
  chHeapFree(p1);                               /* Merges forward.*/
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 8003d1a:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8003d1c:	4855      	ldr	r0, [pc, #340]	; (8003e74 <heap1_execute.9131+0x244>)
 8003d1e:	f001 fbdf 	bl	80054e0 <chHeapAlloc>
 8003d22:	4605      	mov	r5, r0
  chHeapFree(p1);
 8003d24:	4620      	mov	r0, r4
 8003d26:	f7ff ff3b 	bl	8003ba0 <chHeapFree>
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8003d2a:	4669      	mov	r1, sp
 8003d2c:	4851      	ldr	r0, [pc, #324]	; (8003e74 <heap1_execute.9131+0x244>)
 8003d2e:	f7ff ff17 	bl	8003b60 <chHeapStatus>
 8003d32:	f1b0 0c02 	subs.w	ip, r0, #2
 8003d36:	f1dc 0100 	rsbs	r1, ip, #0
 8003d3a:	eb51 010c 	adcs.w	r1, r1, ip
 8003d3e:	2005      	movs	r0, #5
 8003d40:	f7ff fc8e 	bl	8003660 <_test_assert>
 8003d44:	2800      	cmp	r0, #0
 8003d46:	d186      	bne.n	8003c56 <heap1_execute.9131+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE);
 8003d48:	2110      	movs	r1, #16
 8003d4a:	484a      	ldr	r0, [pc, #296]	; (8003e74 <heap1_execute.9131+0x244>)
 8003d4c:	f001 fbc8 	bl	80054e0 <chHeapAlloc>
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8003d50:	4669      	mov	r1, sp
  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
  p2 = chHeapAlloc(&test_heap, SIZE);
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
 8003d52:	4604      	mov	r4, r0
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8003d54:	4847      	ldr	r0, [pc, #284]	; (8003e74 <heap1_execute.9131+0x244>)
 8003d56:	f7ff ff03 	bl	8003b60 <chHeapStatus>
 8003d5a:	2801      	cmp	r0, #1
 8003d5c:	bf08      	it	eq
 8003d5e:	4601      	moveq	r1, r0
 8003d60:	d009      	beq.n	8003d76 <heap1_execute.9131+0x146>
 8003d62:	4669      	mov	r1, sp
 8003d64:	4843      	ldr	r0, [pc, #268]	; (8003e74 <heap1_execute.9131+0x244>)
 8003d66:	f7ff fefb 	bl	8003b60 <chHeapStatus>
 8003d6a:	f1b0 0e02 	subs.w	lr, r0, #2
 8003d6e:	f1de 0100 	rsbs	r1, lr, #0
 8003d72:	eb51 010e 	adcs.w	r1, r1, lr
 8003d76:	2006      	movs	r0, #6
 8003d78:	f7ff fc72 	bl	8003660 <_test_assert>
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	f47f af6a 	bne.w	8003c56 <heap1_execute.9131+0x26>
                 (chHeapStatus(&test_heap, &n) == 2), "heap fragmented");
  chHeapFree(p2);
 8003d82:	4628      	mov	r0, r5
 8003d84:	f7ff ff0c 	bl	8003ba0 <chHeapFree>
  chHeapFree(p1);
 8003d88:	4620      	mov	r0, r4
 8003d8a:	f7ff ff09 	bl	8003ba0 <chHeapFree>
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8003d8e:	4669      	mov	r1, sp
 8003d90:	4838      	ldr	r0, [pc, #224]	; (8003e74 <heap1_execute.9131+0x244>)
 8003d92:	f7ff fee5 	bl	8003b60 <chHeapStatus>
 8003d96:	3801      	subs	r0, #1
 8003d98:	4241      	negs	r1, r0
 8003d9a:	4141      	adcs	r1, r0
 8003d9c:	2007      	movs	r0, #7
 8003d9e:	f7ff fc5f 	bl	8003660 <_test_assert>
 8003da2:	2800      	cmp	r0, #0
 8003da4:	f47f af57 	bne.w	8003c56 <heap1_execute.9131+0x26>

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8003da8:	2110      	movs	r1, #16
 8003daa:	4832      	ldr	r0, [pc, #200]	; (8003e74 <heap1_execute.9131+0x244>)
 8003dac:	f001 fb98 	bl	80054e0 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8003db0:	2110      	movs	r1, #16
  chHeapFree(p2);
  chHeapFree(p1);
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8003db2:	4605      	mov	r5, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8003db4:	482f      	ldr	r0, [pc, #188]	; (8003e74 <heap1_execute.9131+0x244>)
 8003db6:	f001 fb93 	bl	80054e0 <chHeapAlloc>
 8003dba:	4604      	mov	r4, r0
  chHeapFree(p1);
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f7ff feef 	bl	8003ba0 <chHeapFree>
  test_assert(8, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8003dc2:	4669      	mov	r1, sp
 8003dc4:	482b      	ldr	r0, [pc, #172]	; (8003e74 <heap1_execute.9131+0x244>)
 8003dc6:	f7ff fecb 	bl	8003b60 <chHeapStatus>
 8003dca:	1e82      	subs	r2, r0, #2
 8003dcc:	4251      	negs	r1, r2
 8003dce:	4151      	adcs	r1, r2
 8003dd0:	2008      	movs	r0, #8
 8003dd2:	f7ff fc45 	bl	8003660 <_test_assert>
 8003dd6:	2800      	cmp	r0, #0
 8003dd8:	f47f af3d 	bne.w	8003c56 <heap1_execute.9131+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE * 2);       /* Skips first fragment.*/
 8003ddc:	2120      	movs	r1, #32
 8003dde:	4825      	ldr	r0, [pc, #148]	; (8003e74 <heap1_execute.9131+0x244>)
 8003de0:	f001 fb7e 	bl	80054e0 <chHeapAlloc>
  chHeapFree(p1);
 8003de4:	f7ff fedc 	bl	8003ba0 <chHeapFree>
  chHeapFree(p2);
 8003de8:	4620      	mov	r0, r4
 8003dea:	f7ff fed9 	bl	8003ba0 <chHeapFree>
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8003dee:	4669      	mov	r1, sp
 8003df0:	4820      	ldr	r0, [pc, #128]	; (8003e74 <heap1_execute.9131+0x244>)
 8003df2:	f7ff feb5 	bl	8003b60 <chHeapStatus>
 8003df6:	1e43      	subs	r3, r0, #1
 8003df8:	4259      	negs	r1, r3
 8003dfa:	4159      	adcs	r1, r3
 8003dfc:	2009      	movs	r0, #9
 8003dfe:	f7ff fc2f 	bl	8003660 <_test_assert>
 8003e02:	2800      	cmp	r0, #0
 8003e04:	f47f af27 	bne.w	8003c56 <heap1_execute.9131+0x26>

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
 8003e08:	4669      	mov	r1, sp
 8003e0a:	481a      	ldr	r0, [pc, #104]	; (8003e74 <heap1_execute.9131+0x244>)
 8003e0c:	f7ff fea8 	bl	8003b60 <chHeapStatus>
  p1 = chHeapAlloc(&test_heap, n);
 8003e10:	9900      	ldr	r1, [sp, #0]
 8003e12:	4818      	ldr	r0, [pc, #96]	; (8003e74 <heap1_execute.9131+0x244>)
 8003e14:	f001 fb64 	bl	80054e0 <chHeapAlloc>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 8003e18:	4669      	mov	r1, sp
  chHeapFree(p2);
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
  p1 = chHeapAlloc(&test_heap, n);
 8003e1a:	4604      	mov	r4, r0
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 8003e1c:	4815      	ldr	r0, [pc, #84]	; (8003e74 <heap1_execute.9131+0x244>)
 8003e1e:	f7ff fe9f 	bl	8003b60 <chHeapStatus>
 8003e22:	f1d0 0101 	rsbs	r1, r0, #1
 8003e26:	bf38      	it	cc
 8003e28:	2100      	movcc	r1, #0
 8003e2a:	200a      	movs	r0, #10
 8003e2c:	f7ff fc18 	bl	8003660 <_test_assert>
 8003e30:	2800      	cmp	r0, #0
 8003e32:	f47f af10 	bne.w	8003c56 <heap1_execute.9131+0x26>
  chHeapFree(p1);
 8003e36:	4620      	mov	r0, r4
 8003e38:	f7ff feb2 	bl	8003ba0 <chHeapFree>

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8003e3c:	4669      	mov	r1, sp
 8003e3e:	480d      	ldr	r0, [pc, #52]	; (8003e74 <heap1_execute.9131+0x244>)
 8003e40:	f7ff fe8e 	bl	8003b60 <chHeapStatus>
 8003e44:	f1b0 0c01 	subs.w	ip, r0, #1
 8003e48:	f1dc 0100 	rsbs	r1, ip, #0
 8003e4c:	eb51 010c 	adcs.w	r1, r1, ip
 8003e50:	200b      	movs	r0, #11
 8003e52:	f7ff fc05 	bl	8003660 <_test_assert>
 8003e56:	2800      	cmp	r0, #0
 8003e58:	f47f aefd 	bne.w	8003c56 <heap1_execute.9131+0x26>
  test_assert(12, n == sz, "size changed");
 8003e5c:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8003e60:	200c      	movs	r0, #12
 8003e62:	ebb1 0e03 	subs.w	lr, r1, r3
 8003e66:	f1de 0100 	rsbs	r1, lr, #0
 8003e6a:	eb51 010e 	adcs.w	r1, r1, lr
 8003e6e:	f7ff fbf7 	bl	8003660 <_test_assert>
 8003e72:	e6f0      	b.n	8003c56 <heap1_execute.9131+0x26>
 8003e74:	200008b8 	.word	0x200008b8
 8003e78:	f3af 8000 	nop.w
 8003e7c:	f3af 8000 	nop.w

08003e80 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 8003e80:	b410      	push	{r4}
 8003e82:	4603      	mov	r3, r0
 8003e84:	2120      	movs	r1, #32
 8003e86:	f381 8811 	msr	BASEPRI, r1
  trefs_t refs;

  chSysLock();
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
  tp->p_refs--;
 8003e8a:	7f82      	ldrb	r2, [r0, #30]
 8003e8c:	3a01      	subs	r2, #1
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	7782      	strb	r2, [r0, #30]
  refs = tp->p_refs;

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
 8003e92:	b912      	cbnz	r2, 8003e9a <chThdRelease+0x1a>
 8003e94:	7f04      	ldrb	r4, [r0, #28]
 8003e96:	2c0f      	cmp	r4, #15
 8003e98:	d004      	beq.n	8003ea4 <chThdRelease+0x24>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	f383 8811 	msr	BASEPRI, r3
         registry on exit.*/
      break;
    }
  }
  chSysUnlock();
}
 8003ea0:	bc10      	pop	{r4}
 8003ea2:	4770      	bx	lr

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
 8003ea4:	7f44      	ldrb	r4, [r0, #29]
 8003ea6:	f004 0403 	and.w	r4, r4, #3
 8003eaa:	2c01      	cmp	r4, #1
 8003eac:	d011      	beq.n	8003ed2 <chThdRelease+0x52>
 8003eae:	2c02      	cmp	r4, #2
 8003eb0:	d1f3      	bne.n	8003e9a <chThdRelease+0x1a>
      return;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8003eb2:	6940      	ldr	r0, [r0, #20]
 8003eb4:	691c      	ldr	r4, [r3, #16]
 8003eb6:	6104      	str	r4, [r0, #16]
 8003eb8:	691c      	ldr	r4, [r3, #16]
 8003eba:	6160      	str	r0, [r4, #20]
 8003ebc:	f382 8811 	msr	BASEPRI, r2
#endif
      chSysUnlock();
      chPoolFree(tp->p_mpool, tp);
 8003ec0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003ec2:	f381 8811 	msr	BASEPRI, r1
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8003ec6:	6801      	ldr	r1, [r0, #0]
 8003ec8:	6019      	str	r1, [r3, #0]
  mp->mp_next = php;
 8003eca:	6003      	str	r3, [r0, #0]
 8003ecc:	f382 8811 	msr	BASEPRI, r2
 8003ed0:	e7e6      	b.n	8003ea0 <chThdRelease+0x20>
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP == TRUE
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8003ed2:	6941      	ldr	r1, [r0, #20]
 8003ed4:	6904      	ldr	r4, [r0, #16]
 8003ed6:	610c      	str	r4, [r1, #16]
 8003ed8:	6903      	ldr	r3, [r0, #16]
 8003eda:	6159      	str	r1, [r3, #20]
 8003edc:	f382 8811 	msr	BASEPRI, r2
         registry on exit.*/
      break;
    }
  }
  chSysUnlock();
}
 8003ee0:	bc10      	pop	{r4}
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
#endif
      chSysUnlock();
      chHeapFree(tp);
 8003ee2:	f7ff be5d 	b.w	8003ba0 <chHeapFree>
 8003ee6:	bf00      	nop
 8003ee8:	f3af 8000 	nop.w
 8003eec:	f3af 8000 	nop.w

08003ef0 <regfind.9292>:
 * <h2>Description</h2>
 * Registry and Thread References APIs are tested for functionality and
 * coverage.
 */

static bool regfind(thread_t *tp) {
 8003ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ef4:	4681      	mov	r9, r0
 8003ef6:	f04f 0820 	mov.w	r8, #32
 8003efa:	f388 8811 	msr	BASEPRI, r8
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 8003efe:	4e11      	ldr	r6, [pc, #68]	; (8003f44 <regfind.9292+0x54>)
 8003f00:	6930      	ldr	r0, [r6, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs++;
 8003f02:	7f83      	ldrb	r3, [r0, #30]
 8003f04:	3301      	adds	r3, #1
 8003f06:	7783      	strb	r3, [r0, #30]
 8003f08:	2500      	movs	r5, #0
 8003f0a:	f385 8811 	msr	BASEPRI, r5
  chSysLock();
  ntp = tp->p_newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
  /*lint -restore*/
    ntp = NULL;
 8003f0e:	462f      	mov	r7, r5
 8003f10:	e000      	b.n	8003f14 <regfind.9292+0x24>
  bool found = false;

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
    ftp = chRegNextThread(ftp);
 8003f12:	4620      	mov	r0, r4
  thread_t *ftp;
  bool found = false;

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
 8003f14:	4548      	cmp	r0, r9
 8003f16:	bf08      	it	eq
 8003f18:	f045 0501 	orreq.w	r5, r5, #1
 8003f1c:	f388 8811 	msr	BASEPRI, r8
 */
thread_t *chRegNextThread(thread_t *tp) {
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
 8003f20:	6904      	ldr	r4, [r0, #16]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 8003f22:	42b4      	cmp	r4, r6
 8003f24:	d00b      	beq.n	8003f3e <regfind.9292+0x4e>
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->p_refs < (trefs_t)255, "too many references");
    ntp->p_refs++;
 8003f26:	7fa3      	ldrb	r3, [r4, #30]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	77a3      	strb	r3, [r4, #30]
 8003f2c:	f387 8811 	msr	BASEPRI, r7
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 8003f30:	f7ff ffa6 	bl	8003e80 <chThdRelease>
    ftp = chRegNextThread(ftp);
  } while (ftp != NULL);
 8003f34:	2c00      	cmp	r4, #0
 8003f36:	d1ec      	bne.n	8003f12 <regfind.9292+0x22>
  return found;
}
 8003f38:	4628      	mov	r0, r5
 8003f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  chSysLock();
  ntp = tp->p_newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
  /*lint -restore*/
    ntp = NULL;
 8003f3e:	2400      	movs	r4, #0
 8003f40:	e7f4      	b.n	8003f2c <regfind.9292+0x3c>
 8003f42:	bf00      	nop
 8003f44:	200011e0 	.word	0x200011e0
 8003f48:	f3af 8000 	nop.w
 8003f4c:	f3af 8000 	nop.w

08003f50 <chThdWait>:
 * @param[in] tp        pointer to the thread
 * @return              The exit code from the terminated thread.
 *
 * @api
 */
msg_t chThdWait(thread_t *tp) {
 8003f50:	b538      	push	{r3, r4, r5, lr}
 8003f52:	4604      	mov	r4, r0
 8003f54:	2320      	movs	r3, #32
 8003f56:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chDbgAssert(tp != currp, "waiting self");
#if CH_CFG_USE_DYNAMIC == TRUE
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
#endif
  if (tp->p_state != CH_STATE_FINAL) {
 8003f5a:	7f03      	ldrb	r3, [r0, #28]
 8003f5c:	2b0f      	cmp	r3, #15
 8003f5e:	d007      	beq.n	8003f70 <chThdWait+0x20>
    list_insert(currp, &tp->p_waiting);
 8003f60:	4b08      	ldr	r3, [pc, #32]	; (8003f84 <chThdWait+0x34>)
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void list_insert(thread_t *tp, threads_list_t *tlp) {

  tp->p_next = tlp->p_next;
 8003f62:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003f64:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8003f66:	2009      	movs	r0, #9
 8003f68:	601a      	str	r2, [r3, #0]
  tlp->p_next = tp;
 8003f6a:	6263      	str	r3, [r4, #36]	; 0x24
 8003f6c:	f001 f910 	bl	8005190 <chSchGoSleepS>
  }
  msg = tp->p_u.exitcode;
 8003f70:	6a25      	ldr	r5, [r4, #32]
 8003f72:	2300      	movs	r3, #0
 8003f74:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

#if CH_CFG_USE_DYNAMIC == TRUE
  /* Releasing a lock if it is a dynamic thread.*/
  chThdRelease(tp);
 8003f78:	4620      	mov	r0, r4
 8003f7a:	f7ff ff81 	bl	8003e80 <chThdRelease>
#endif

  return msg;
}
 8003f7e:	4628      	mov	r0, r5
 8003f80:	bd38      	pop	{r3, r4, r5, pc}
 8003f82:	bf00      	nop
 8003f84:	200011e0 	.word	0x200011e0
 8003f88:	f3af 8000 	nop.w
 8003f8c:	f3af 8000 	nop.w

08003f90 <test_wait_threads>:
}

/**
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
 8003f90:	b570      	push	{r4, r5, r6, lr}
 8003f92:	4c07      	ldr	r4, [pc, #28]	; (8003fb0 <test_wait_threads+0x20>)
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
 8003f94:	2600      	movs	r6, #0
}

/**
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
 8003f96:	f104 0514 	add.w	r5, r4, #20
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 8003f9a:	f854 3b04 	ldr.w	r3, [r4], #4
      chThdWait(threads[i]);
 8003f9e:	4618      	mov	r0, r3
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 8003fa0:	b11b      	cbz	r3, 8003faa <test_wait_threads+0x1a>
      chThdWait(threads[i]);
 8003fa2:	f7ff ffd5 	bl	8003f50 <chThdWait>
      threads[i] = NULL;
 8003fa6:	f844 6c04 	str.w	r6, [r4, #-4]
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 8003faa:	42ac      	cmp	r4, r5
 8003fac:	d1f5      	bne.n	8003f9a <test_wait_threads+0xa>
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
    }
}
 8003fae:	bd70      	pop	{r4, r5, r6, pc}
 8003fb0:	20001330 	.word	0x20001330
 8003fb4:	f3af 8000 	nop.w
 8003fb8:	f3af 8000 	nop.w
 8003fbc:	f3af 8000 	nop.w

08003fc0 <mtx1_execute.8479>:
  chMtxLock(&m1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx1_execute(void) {
 8003fc0:	b570      	push	{r4, r5, r6, lr}
 8003fc2:	4e2a      	ldr	r6, [pc, #168]	; (800406c <mtx1_execute.8479+0xac>)

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
 8003fc4:	482a      	ldr	r0, [pc, #168]	; (8004070 <mtx1_execute.8479+0xb0>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003fc6:	69b3      	ldr	r3, [r6, #24]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8003fc8:	4d2a      	ldr	r5, [pc, #168]	; (8004074 <mtx1_execute.8479+0xb4>)
 8003fca:	689c      	ldr	r4, [r3, #8]
  chMtxLock(&m1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx1_execute(void) {
 8003fcc:	b082      	sub	sp, #8

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
 8003fce:	f001 fa77 	bl	80054c0 <chMtxLock>
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8003fd2:	4a29      	ldr	r2, [pc, #164]	; (8004078 <mtx1_execute.8479+0xb8>)
 8003fd4:	4b29      	ldr	r3, [pc, #164]	; (800407c <mtx1_execute.8479+0xbc>)
 8003fd6:	9200      	str	r2, [sp, #0]
 8003fd8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003fdc:	1c62      	adds	r2, r4, #1
 8003fde:	4828      	ldr	r0, [pc, #160]	; (8004080 <mtx1_execute.8479+0xc0>)
 8003fe0:	f001 f896 	bl	8005110 <chThdCreateStatic>
 8003fe4:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8003fe6:	4827      	ldr	r0, [pc, #156]	; (8004084 <mtx1_execute.8479+0xc4>)
 8003fe8:	4b24      	ldr	r3, [pc, #144]	; (800407c <mtx1_execute.8479+0xbc>)
 8003fea:	9000      	str	r0, [sp, #0]
 8003fec:	1ca2      	adds	r2, r4, #2
 8003fee:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003ff2:	4825      	ldr	r0, [pc, #148]	; (8004088 <mtx1_execute.8479+0xc8>)
 8003ff4:	f001 f88c 	bl	8005110 <chThdCreateStatic>
 8003ff8:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8003ffa:	4824      	ldr	r0, [pc, #144]	; (800408c <mtx1_execute.8479+0xcc>)
 8003ffc:	4b1f      	ldr	r3, [pc, #124]	; (800407c <mtx1_execute.8479+0xbc>)
 8003ffe:	9000      	str	r0, [sp, #0]
 8004000:	1ce2      	adds	r2, r4, #3
 8004002:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004006:	4822      	ldr	r0, [pc, #136]	; (8004090 <mtx1_execute.8479+0xd0>)
 8004008:	f001 f882 	bl	8005110 <chThdCreateStatic>
 800400c:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 800400e:	4821      	ldr	r0, [pc, #132]	; (8004094 <mtx1_execute.8479+0xd4>)
 8004010:	4b1a      	ldr	r3, [pc, #104]	; (800407c <mtx1_execute.8479+0xbc>)
 8004012:	9000      	str	r0, [sp, #0]
 8004014:	1d22      	adds	r2, r4, #4
 8004016:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800401a:	481f      	ldr	r0, [pc, #124]	; (8004098 <mtx1_execute.8479+0xd8>)
 800401c:	f001 f878 	bl	8005110 <chThdCreateStatic>
 8004020:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8004022:	481e      	ldr	r0, [pc, #120]	; (800409c <mtx1_execute.8479+0xdc>)
 8004024:	4b15      	ldr	r3, [pc, #84]	; (800407c <mtx1_execute.8479+0xbc>)
 8004026:	9000      	str	r0, [sp, #0]
 8004028:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800402c:	1d62      	adds	r2, r4, #5
 800402e:	481c      	ldr	r0, [pc, #112]	; (80040a0 <mtx1_execute.8479+0xe0>)
 8004030:	f001 f86e 	bl	8005110 <chThdCreateStatic>
 8004034:	6128      	str	r0, [r5, #16]
  chMtxUnlock(&m1);
 8004036:	480e      	ldr	r0, [pc, #56]	; (8004070 <mtx1_execute.8479+0xb0>)
 8004038:	f001 f9b2 	bl	80053a0 <chMtxUnlock>
  test_wait_threads();
 800403c:	f7ff ffa8 	bl	8003f90 <test_wait_threads>
 8004040:	69b3      	ldr	r3, [r6, #24]
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
 8004042:	6899      	ldr	r1, [r3, #8]
 8004044:	2001      	movs	r0, #1
 8004046:	ebb4 0e01 	subs.w	lr, r4, r1
 800404a:	f1de 0100 	rsbs	r1, lr, #0
 800404e:	eb51 010e 	adcs.w	r1, r1, lr
 8004052:	f7ff fb05 	bl	8003660 <_test_assert>
 8004056:	b108      	cbz	r0, 800405c <mtx1_execute.8479+0x9c>
  test_assert_sequence(2, "ABCDE");
}
 8004058:	b002      	add	sp, #8
 800405a:	bd70      	pop	{r4, r5, r6, pc}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 800405c:	4911      	ldr	r1, [pc, #68]	; (80040a4 <mtx1_execute.8479+0xe4>)
 800405e:	2002      	movs	r0, #2
}
 8004060:	b002      	add	sp, #8
 8004062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 8004066:	f7ff bacb 	b.w	8003600 <_test_assert_sequence>
 800406a:	bf00      	nop
 800406c:	200011e0 	.word	0x200011e0
 8004070:	200008a4 	.word	0x200008a4
 8004074:	20001330 	.word	0x20001330
 8004078:	08005df8 	.word	0x08005df8
 800407c:	080038c1 	.word	0x080038c1
 8004080:	20000998 	.word	0x20000998
 8004084:	08005df0 	.word	0x08005df0
 8004088:	20000ae0 	.word	0x20000ae0
 800408c:	08005de4 	.word	0x08005de4
 8004090:	20000c28 	.word	0x20000c28
 8004094:	08005de8 	.word	0x08005de8
 8004098:	20000d70 	.word	0x20000d70
 800409c:	08005de0 	.word	0x08005de0
 80040a0:	20000eb8 	.word	0x20000eb8
 80040a4:	08005df4 	.word	0x08005df4
 80040a8:	f3af 8000 	nop.w
 80040ac:	f3af 8000 	nop.w

080040b0 <thd1_execute.7988>:
}

static void thd1_execute(void) {
 80040b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80040b2:	f241 17e0 	movw	r7, #4576	; 0x11e0
 80040b6:	f2c2 0700 	movt	r7, #8192	; 0x2000
 80040ba:	b083      	sub	sp, #12
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80040bc:	69bb      	ldr	r3, [r7, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80040be:	f640 1598 	movw	r5, #2456	; 0x998
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	f643 1641 	movw	r6, #14657	; 0x3941
 80040c8:	f645 50f8 	movw	r0, #24056	; 0x5df8
 80040cc:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80040d0:	f6c0 0600 	movt	r6, #2048	; 0x800
 80040d4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80040d8:	3a05      	subs	r2, #5
 80040da:	4633      	mov	r3, r6
 80040dc:	9000      	str	r0, [sp, #0]
 80040de:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80040e2:	4628      	mov	r0, r5
 80040e4:	f001 f814 	bl	8005110 <chThdCreateStatic>
 80040e8:	f241 3430 	movw	r4, #4912	; 0x1330
 80040ec:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80040f0:	69bb      	ldr	r3, [r7, #24]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80040f2:	689a      	ldr	r2, [r3, #8]
  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80040f4:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80040f6:	f645 50f0 	movw	r0, #24048	; 0x5df0
 80040fa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80040fe:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004102:	3a04      	subs	r2, #4
 8004104:	4633      	mov	r3, r6
 8004106:	9000      	str	r0, [sp, #0]
 8004108:	1868      	adds	r0, r5, r1
 800410a:	f001 f801 	bl	8005110 <chThdCreateStatic>
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	f645 50e4 	movw	r0, #24036	; 0x5de4
 8004118:	f6c0 0000 	movt	r0, #2048	; 0x800
 800411c:	3a03      	subs	r2, #3
 800411e:	4633      	mov	r3, r6
 8004120:	9000      	str	r0, [sp, #0]
 8004122:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004126:	f505 7024 	add.w	r0, r5, #656	; 0x290
 800412a:	f000 fff1 	bl	8005110 <chThdCreateStatic>
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	f645 50e8 	movw	r0, #24040	; 0x5de8
 8004138:	f6c0 0000 	movt	r0, #2048	; 0x800
 800413c:	3a02      	subs	r2, #2
 800413e:	4633      	mov	r3, r6
 8004140:	9000      	str	r0, [sp, #0]
 8004142:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004146:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 800414a:	f000 ffe1 	bl	8005110 <chThdCreateStatic>
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	f645 50e0 	movw	r0, #24032	; 0x5de0
 8004158:	f6c0 0000 	movt	r0, #2048	; 0x800
 800415c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004160:	3a01      	subs	r2, #1
 8004162:	4633      	mov	r3, r6
 8004164:	9000      	str	r0, [sp, #0]
 8004166:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 800416a:	f000 ffd1 	bl	8005110 <chThdCreateStatic>
 800416e:	6120      	str	r0, [r4, #16]
  test_wait_threads();
 8004170:	f7ff ff0e 	bl	8003f90 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8004174:	f645 51f4 	movw	r1, #24052	; 0x5df4
 8004178:	2001      	movs	r0, #1
 800417a:	f6c0 0100 	movt	r1, #2048	; 0x800
}
 800417e:	b003      	add	sp, #12
 8004180:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8004184:	f7ff ba3c 	b.w	8003600 <_test_assert_sequence>
 8004188:	f3af 8000 	nop.w
 800418c:	f3af 8000 	nop.w

08004190 <thd2_execute.7986>:
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8004190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004194:	f241 16e0 	movw	r6, #4576	; 0x11e0
 8004198:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800419c:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800419e:	69b3      	ldr	r3, [r6, #24]

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80041a0:	4839      	ldr	r0, [pc, #228]	; (8004288 <thd2_execute.7986+0xf8>)
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	f643 1541 	movw	r5, #14657	; 0x3941
 80041a8:	f645 51f0 	movw	r1, #24048	; 0x5df0
 80041ac:	f6c0 0500 	movt	r5, #2048	; 0x800
 80041b0:	f6c0 0100 	movt	r1, #2048	; 0x800
 80041b4:	3a04      	subs	r2, #4
 80041b6:	462b      	mov	r3, r5
 80041b8:	9100      	str	r1, [sp, #0]
 80041ba:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80041be:	f000 ffa7 	bl	8005110 <chThdCreateStatic>
 80041c2:	69b3      	ldr	r3, [r6, #24]
 80041c4:	f241 3430 	movw	r4, #4912	; 0x1330
 80041c8:	f2c2 0400 	movt	r4, #8192	; 0x2000
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80041cc:	689a      	ldr	r2, [r3, #8]
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80041ce:	6060      	str	r0, [r4, #4]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80041d0:	f640 1798 	movw	r7, #2456	; 0x998
 80041d4:	f645 51f8 	movw	r1, #24056	; 0x5df8
 80041d8:	f2c2 0700 	movt	r7, #8192	; 0x2000
 80041dc:	f6c0 0100 	movt	r1, #2048	; 0x800
 80041e0:	3a05      	subs	r2, #5
 80041e2:	462b      	mov	r3, r5
 80041e4:	9100      	str	r1, [sp, #0]
 80041e6:	4638      	mov	r0, r7
 80041e8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80041ec:	f000 ff90 	bl	8005110 <chThdCreateStatic>
 80041f0:	69b3      	ldr	r3, [r6, #24]
 80041f2:	6020      	str	r0, [r4, #0]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	f645 51e0 	movw	r1, #24032	; 0x5de0
 80041fa:	f6c0 0100 	movt	r1, #2048	; 0x800
 80041fe:	3a01      	subs	r2, #1
 8004200:	462b      	mov	r3, r5
 8004202:	9100      	str	r1, [sp, #0]
 8004204:	f507 60a4 	add.w	r0, r7, #1312	; 0x520
 8004208:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800420c:	f000 ff80 	bl	8005110 <chThdCreateStatic>
 8004210:	69b3      	ldr	r3, [r6, #24]
 8004212:	6120      	str	r0, [r4, #16]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	f645 53e8 	movw	r3, #24040	; 0x5de8
 800421a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	f507 7076 	add.w	r0, r7, #984	; 0x3d8
 8004224:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004228:	3a02      	subs	r2, #2
 800422a:	462b      	mov	r3, r5
 800422c:	f000 ff70 	bl	8005110 <chThdCreateStatic>
 8004230:	f04f 0820 	mov.w	r8, #32
 8004234:	60e0      	str	r0, [r4, #12]
 8004236:	f388 8811 	msr	BASEPRI, r8
 800423a:	69b3      	ldr	r3, [r6, #24]
  /* Done this way for coverage of chThdCreateI() and chThdStart().*/
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800423c:	689a      	ldr	r2, [r3, #8]
 800423e:	f645 53e4 	movw	r3, #24036	; 0x5de4
 8004242:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	f507 7024 	add.w	r0, r7, #656	; 0x290
 800424c:	462b      	mov	r3, r5
 800424e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004252:	3a03      	subs	r2, #3
 8004254:	f000 fe84 	bl	8004f60 <chThdCreateI>
 8004258:	60a0      	str	r0, [r4, #8]
 800425a:	2500      	movs	r5, #0
 800425c:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  chThdStart(threads[2]);
 8004260:	68a0      	ldr	r0, [r4, #8]
 8004262:	f388 8811 	msr	BASEPRI, r8
 */
static inline thread_t *chThdStartI(thread_t *tp) {

  chDbgAssert(tp->p_state == CH_STATE_WTSTART, "wrong state");

  return chSchReadyI(tp);
 8004266:	f000 ffeb 	bl	8005240 <chSchReadyI>
 800426a:	f385 8811 	msr	BASEPRI, r5
  test_wait_threads();
 800426e:	f7ff fe8f 	bl	8003f90 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8004272:	f645 51f4 	movw	r1, #24052	; 0x5df4
 8004276:	2001      	movs	r0, #1
 8004278:	f6c0 0100 	movt	r1, #2048	; 0x800
}
 800427c:	b002      	add	sp, #8
 800427e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  chSysUnlock();
  chThdStart(threads[2]);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8004282:	f7ff b9bd 	b.w	8003600 <_test_assert_sequence>
 8004286:	bf00      	nop
 8004288:	20000ae0 	.word	0x20000ae0
 800428c:	f3af 8000 	nop.w

08004290 <chOQGetI.4259>:
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8004290:	6982      	ldr	r2, [r0, #24]
 8004292:	6941      	ldr	r1, [r0, #20]
 8004294:	4291      	cmp	r1, r2
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
 8004296:	b510      	push	{r4, lr}
 8004298:	4603      	mov	r3, r0
 800429a:	d018      	beq.n	80042ce <chOQGetI.4259+0x3e>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 800429c:	6898      	ldr	r0, [r3, #8]
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 800429e:	6919      	ldr	r1, [r3, #16]

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 80042a0:	3001      	adds	r0, #1
 80042a2:	6098      	str	r0, [r3, #8]
  b = *oqp->q_rdptr++;
 80042a4:	f812 4b01 	ldrb.w	r4, [r2], #1
  if (oqp->q_rdptr >= oqp->q_top) {
 80042a8:	428a      	cmp	r2, r1
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 80042aa:	619a      	str	r2, [r3, #24]
  if (oqp->q_rdptr >= oqp->q_top) {
 80042ac:	d20c      	bcs.n	80042c8 <chOQGetI.4259+0x38>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80042ae:	681a      	ldr	r2, [r3, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d007      	beq.n	80042c4 <chOQGetI.4259+0x34>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80042b4:	6811      	ldr	r1, [r2, #0]
 80042b6:	6019      	str	r1, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80042b8:	604b      	str	r3, [r1, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80042ba:	2300      	movs	r3, #0
  (void) chSchReadyI(tp);
 80042bc:	4610      	mov	r0, r2

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80042be:	6213      	str	r3, [r2, #32]
  (void) chSchReadyI(tp);
 80042c0:	f000 ffbe 	bl	8005240 <chSchReadyI>
    oqp->q_rdptr = oqp->q_buffer;
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);

  return (msg_t)b;
 80042c4:	4620      	mov	r0, r4
 80042c6:	bd10      	pop	{r4, pc}
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
    oqp->q_rdptr = oqp->q_buffer;
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	619a      	str	r2, [r3, #24]
 80042cc:	e7ef      	b.n	80042ae <chOQGetI.4259+0x1e>
 80042ce:	6881      	ldr	r1, [r0, #8]
 80042d0:	2900      	cmp	r1, #0
 80042d2:	d0e3      	beq.n	800429c <chOQGetI.4259+0xc>
  uint8_t b;

  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
 80042d4:	f06f 0002 	mvn.w	r0, #2
 80042d8:	bd10      	pop	{r4, pc}
 80042da:	bf00      	nop
 80042dc:	f3af 8000 	nop.w

080042e0 <queues2_execute.9486>:

  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
}

static void queues2_execute(void) {
 80042e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042e4:	2320      	movs	r3, #32
 80042e6:	b082      	sub	sp, #8
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	4e91      	ldr	r6, [pc, #580]	; (8004534 <queues2_execute.9486+0x254>)
 80042ee:	6972      	ldr	r2, [r6, #20]
 80042f0:	69b3      	ldr	r3, [r6, #24]
 80042f2:	2100      	movs	r1, #0
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d05e      	beq.n	80043b6 <queues2_execute.9486+0xd6>
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chOQIsEmptyI(&oq), "not empty");
 80042f8:	2001      	movs	r0, #1
 80042fa:	f7ff f9b1 	bl	8003660 <_test_assert>
 80042fe:	2800      	cmp	r0, #0
 8004300:	d138      	bne.n	8004374 <queues2_execute.9486+0x94>
 8004302:	f380 8811 	msr	BASEPRI, r0
 8004306:	2441      	movs	r4, #65	; 0x41
 *
 * @api
 */
static inline msg_t chOQPut(output_queue_t *oqp, uint8_t b) {

  return chOQPutTimeout(oqp, b, TIME_INFINITE);
 8004308:	4d8a      	ldr	r5, [pc, #552]	; (8004534 <queues2_execute.9486+0x254>)
 800430a:	4621      	mov	r1, r4
 800430c:	3401      	adds	r4, #1
 800430e:	4628      	mov	r0, r5
 8004310:	f04f 32ff 	mov.w	r2, #4294967295
 8004314:	b2e4      	uxtb	r4, r4
 8004316:	f7fd fbb3 	bl	8001a80 <chOQPutTimeout>

  /* Queue filling */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 800431a:	2c45      	cmp	r4, #69	; 0x45
 800431c:	d1f4      	bne.n	8004308 <queues2_execute.9486+0x28>
 800431e:	f04f 0820 	mov.w	r8, #32
 8004322:	f388 8811 	msr	BASEPRI, r8
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8004326:	68a9      	ldr	r1, [r5, #8]
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");
 8004328:	2002      	movs	r0, #2
 800432a:	f1d1 0101 	rsbs	r1, r1, #1
 800432e:	bf38      	it	cc
 8004330:	2100      	movcc	r1, #0
 8004332:	f7ff f995 	bl	8003660 <_test_assert>
 8004336:	b9e8      	cbnz	r0, 8004374 <queues2_execute.9486+0x94>
 8004338:	f380 8811 	msr	BASEPRI, r0
 800433c:	2404      	movs	r4, #4
 800433e:	4607      	mov	r7, r0
 8004340:	f388 8811 	msr	BASEPRI, r8
  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
    char c;

    chSysLock();
    c = chOQGetI(&oq);
 8004344:	4d7b      	ldr	r5, [pc, #492]	; (8004534 <queues2_execute.9486+0x254>)
 8004346:	4628      	mov	r0, r5
 8004348:	f7ff ffa2 	bl	8004290 <chOQGetI.4259>
 800434c:	f387 8811 	msr	BASEPRI, r7
    chSysUnlock();
    test_emit_token(c);
 8004350:	b2c0      	uxtb	r0, r0
 8004352:	f7ff fa85 	bl	8003860 <test_emit_token>
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
 8004356:	3c01      	subs	r4, #1
 8004358:	d1f2      	bne.n	8004340 <queues2_execute.9486+0x60>
 800435a:	2320      	movs	r3, #32
 800435c:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8004360:	696a      	ldr	r2, [r5, #20]
 8004362:	69ab      	ldr	r3, [r5, #24]
 8004364:	429a      	cmp	r2, r3
 8004366:	bf18      	it	ne
 8004368:	4621      	movne	r1, r4
 800436a:	d029      	beq.n	80043c0 <queues2_execute.9486+0xe0>
    chSysLock();
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
 800436c:	2003      	movs	r0, #3
 800436e:	f7ff f977 	bl	8003660 <_test_assert>
 8004372:	b128      	cbz	r0, 8004380 <queues2_execute.9486+0xa0>
 8004374:	2300      	movs	r3, #0
 8004376:	f383 8811 	msr	BASEPRI, r3
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
}
 800437a:	b002      	add	sp, #8
 800437c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004380:	f380 8811 	msr	BASEPRI, r0
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
  test_assert_sequence(4, "ABCD");
 8004384:	2004      	movs	r0, #4
 8004386:	496c      	ldr	r1, [pc, #432]	; (8004538 <queues2_execute.9486+0x258>)
 8004388:	f7ff f93a 	bl	8003600 <_test_assert_sequence>
 800438c:	4604      	mov	r4, r0
 800438e:	2800      	cmp	r0, #0
 8004390:	d1f3      	bne.n	800437a <queues2_execute.9486+0x9a>
 8004392:	2720      	movs	r7, #32
 8004394:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(5, chOQGetI(&oq) == Q_EMPTY, "failed to report Q_EMPTY");
 8004398:	4d66      	ldr	r5, [pc, #408]	; (8004534 <queues2_execute.9486+0x254>)
 800439a:	4628      	mov	r0, r5
 800439c:	f7ff ff78 	bl	8004290 <chOQGetI.4259>
 80043a0:	3003      	adds	r0, #3
 80043a2:	bf14      	ite	ne
 80043a4:	2100      	movne	r1, #0
 80043a6:	2101      	moveq	r1, #1
 80043a8:	2005      	movs	r0, #5
 80043aa:	f7ff f959 	bl	8003660 <_test_assert>
 80043ae:	b160      	cbz	r0, 80043ca <queues2_execute.9486+0xea>
 80043b0:	f384 8811 	msr	BASEPRI, r4
 80043b4:	e7e1      	b.n	800437a <queues2_execute.9486+0x9a>
 80043b6:	68b1      	ldr	r1, [r6, #8]
 80043b8:	3100      	adds	r1, #0
 80043ba:	bf18      	it	ne
 80043bc:	2101      	movne	r1, #1
 80043be:	e79b      	b.n	80042f8 <queues2_execute.9486+0x18>
 80043c0:	68a9      	ldr	r1, [r5, #8]
 80043c2:	3100      	adds	r1, #0
 80043c4:	bf18      	it	ne
 80043c6:	2101      	movne	r1, #1
 80043c8:	e7d0      	b.n	800436c <queues2_execute.9486+0x8c>
 80043ca:	f380 8811 	msr	BASEPRI, r0

  /* Writing the whole thing */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 80043ce:	2208      	movs	r2, #8
 80043d0:	4603      	mov	r3, r0
 80043d2:	495a      	ldr	r1, [pc, #360]	; (800453c <queues2_execute.9486+0x25c>)
 80043d4:	4628      	mov	r0, r5
 80043d6:	f7fd fb9b 	bl	8001b10 <chOQWriteTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 80043da:	1f03      	subs	r3, r0, #4
 80043dc:	4259      	negs	r1, r3
 80043de:	4159      	adcs	r1, r3
 80043e0:	2006      	movs	r0, #6
 80043e2:	f7ff f93d 	bl	8003660 <_test_assert>
 80043e6:	4604      	mov	r4, r0
 80043e8:	2800      	cmp	r0, #0
 80043ea:	d1c6      	bne.n	800437a <queues2_execute.9486+0x9a>
 80043ec:	f387 8811 	msr	BASEPRI, r7
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 80043f0:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(7, chOQIsFullI(&oq), "not full");
 80043f2:	2007      	movs	r0, #7
 80043f4:	f1d1 0101 	rsbs	r1, r1, #1
 80043f8:	bf38      	it	cc
 80043fa:	2100      	movcc	r1, #0
 80043fc:	f7ff f930 	bl	8003660 <_test_assert>
 8004400:	4680      	mov	r8, r0
 8004402:	2800      	cmp	r0, #0
 8004404:	d1d4      	bne.n	80043b0 <queues2_execute.9486+0xd0>
 8004406:	f380 8811 	msr	BASEPRI, r0
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800440a:	4a4d      	ldr	r2, [pc, #308]	; (8004540 <queues2_execute.9486+0x260>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 800440c:	4b4d      	ldr	r3, [pc, #308]	; (8004544 <queues2_execute.9486+0x264>)
 800440e:	6992      	ldr	r2, [r2, #24]
 8004410:	484d      	ldr	r0, [pc, #308]	; (8004548 <queues2_execute.9486+0x268>)
 8004412:	6892      	ldr	r2, [r2, #8]
 8004414:	f8cd 8000 	str.w	r8, [sp]
 8004418:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800441c:	3201      	adds	r2, #1
 800441e:	f000 fe77 	bl	8005110 <chThdCreateStatic>
 8004422:	4b4a      	ldr	r3, [pc, #296]	; (800454c <queues2_execute.9486+0x26c>)
 8004424:	6018      	str	r0, [r3, #0]
 8004426:	f387 8811 	msr	BASEPRI, r7
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 800442a:	692a      	ldr	r2, [r5, #16]
 800442c:	68eb      	ldr	r3, [r5, #12]
 800442e:	68a9      	ldr	r1, [r5, #8]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	1a59      	subs	r1, r3, r1
  test_assert_lock(8, chOQGetFullI(&oq) == TEST_QUEUES_SIZE, "not empty");
 8004434:	2008      	movs	r0, #8
 8004436:	f1b1 0c04 	subs.w	ip, r1, #4
 800443a:	f1dc 0100 	rsbs	r1, ip, #0
 800443e:	eb51 010c 	adcs.w	r1, r1, ip
 8004442:	f7ff f90d 	bl	8003660 <_test_assert>
 8004446:	b110      	cbz	r0, 800444e <queues2_execute.9486+0x16e>
 8004448:	f388 8811 	msr	BASEPRI, r8
 800444c:	e795      	b.n	800437a <queues2_execute.9486+0x9a>
 800444e:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 8004452:	f7ff fd9d 	bl	8003f90 <test_wait_threads>
 8004456:	f387 8811 	msr	BASEPRI, r7
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 800445a:	68eb      	ldr	r3, [r5, #12]
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 800445c:	692a      	ldr	r2, [r5, #16]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800445e:	6828      	ldr	r0, [r5, #0]
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 8004460:	61ab      	str	r3, [r5, #24]
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8004462:	1ad2      	subs	r2, r2, r3
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  while (queue_notempty(tqp)) {
 8004464:	42a8      	cmp	r0, r5
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
 8004466:	616b      	str	r3, [r5, #20]
  oqp->q_counter = chQSizeX(oqp);
 8004468:	60aa      	str	r2, [r5, #8]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800446a:	bf18      	it	ne
 800446c:	f06f 0401 	mvnne.w	r4, #1
 8004470:	d008      	beq.n	8004484 <queues2_execute.9486+0x1a4>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8004472:	6803      	ldr	r3, [r0, #0]
 8004474:	6204      	str	r4, [r0, #32]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8004476:	605e      	str	r6, [r3, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8004478:	6033      	str	r3, [r6, #0]
  (void) chSchReadyI(tp);
 800447a:	f000 fee1 	bl	8005240 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800447e:	6830      	ldr	r0, [r6, #0]
 8004480:	42b0      	cmp	r0, r6
 8004482:	d1f6      	bne.n	8004472 <queues2_execute.9486+0x192>
 8004484:	2700      	movs	r7, #0
 8004486:	f387 8811 	msr	BASEPRI, r7
 800448a:	2520      	movs	r5, #32
 800448c:	f385 8811 	msr	BASEPRI, r5
 8004490:	6931      	ldr	r1, [r6, #16]
 8004492:	68f2      	ldr	r2, [r6, #12]
 8004494:	68b3      	ldr	r3, [r6, #8]
 8004496:	4c27      	ldr	r4, [pc, #156]	; (8004534 <queues2_execute.9486+0x254>)
 8004498:	1a89      	subs	r1, r1, r2

  /* Testing reset */
  chSysLock();
  chOQResetI(&oq);
  chSysUnlock();
  test_assert_lock(9, chOQGetFullI(&oq) == 0, "still full");
 800449a:	2009      	movs	r0, #9
 800449c:	ebb1 0e03 	subs.w	lr, r1, r3
 80044a0:	f1de 0100 	rsbs	r1, lr, #0
 80044a4:	eb51 010e 	adcs.w	r1, r1, lr
 80044a8:	f7ff f8da 	bl	8003660 <_test_assert>
 80044ac:	4603      	mov	r3, r0
 80044ae:	b110      	cbz	r0, 80044b6 <queues2_execute.9486+0x1d6>
 80044b0:	f387 8811 	msr	BASEPRI, r7
 80044b4:	e761      	b.n	800437a <queues2_execute.9486+0x9a>
 80044b6:	f380 8811 	msr	BASEPRI, r0

  /* Partial writes */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 80044ba:	2202      	movs	r2, #2
 80044bc:	491f      	ldr	r1, [pc, #124]	; (800453c <queues2_execute.9486+0x25c>)
 80044be:	4620      	mov	r0, r4
 80044c0:	f7fd fb26 	bl	8001b10 <chOQWriteTimeout>
  test_assert(10, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 80044c4:	3802      	subs	r0, #2
 80044c6:	4241      	negs	r1, r0
 80044c8:	4141      	adcs	r1, r0
 80044ca:	200a      	movs	r0, #10
 80044cc:	f7ff f8c8 	bl	8003660 <_test_assert>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2800      	cmp	r0, #0
 80044d4:	f47f af51 	bne.w	800437a <queues2_execute.9486+0x9a>
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 80044d8:	4918      	ldr	r1, [pc, #96]	; (800453c <queues2_execute.9486+0x25c>)
 80044da:	2202      	movs	r2, #2
 80044dc:	4620      	mov	r0, r4
 80044de:	f7fd fb17 	bl	8001b10 <chOQWriteTimeout>
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 80044e2:	1e82      	subs	r2, r0, #2
 80044e4:	4251      	negs	r1, r2
 80044e6:	4151      	adcs	r1, r2
 80044e8:	200b      	movs	r0, #11
 80044ea:	f7ff f8b9 	bl	8003660 <_test_assert>
 80044ee:	4606      	mov	r6, r0
 80044f0:	2800      	cmp	r0, #0
 80044f2:	f47f af42 	bne.w	800437a <queues2_execute.9486+0x9a>
 80044f6:	f385 8811 	msr	BASEPRI, r5
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 80044fa:	68a1      	ldr	r1, [r4, #8]
  test_assert_lock(12, chOQIsFullI(&oq), "not full");
 80044fc:	200c      	movs	r0, #12
 80044fe:	f1d1 0101 	rsbs	r1, r1, #1
 8004502:	bf38      	it	cc
 8004504:	2100      	movcc	r1, #0
 8004506:	f7ff f8ab 	bl	8003660 <_test_assert>
 800450a:	4601      	mov	r1, r0
 800450c:	b110      	cbz	r0, 8004514 <queues2_execute.9486+0x234>
 800450e:	f386 8811 	msr	BASEPRI, r6
 8004512:	e732      	b.n	800437a <queues2_execute.9486+0x9a>
 8004514:	f380 8811 	msr	BASEPRI, r0

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 8004518:	220a      	movs	r2, #10
 800451a:	4620      	mov	r0, r4
 800451c:	f7fd fab0 	bl	8001a80 <chOQPutTimeout>
 8004520:	f1b0 33ff 	subs.w	r3, r0, #4294967295
 8004524:	4259      	negs	r1, r3
 8004526:	4159      	adcs	r1, r3
 8004528:	200d      	movs	r0, #13
}
 800452a:	b002      	add	sp, #8
 800452c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 8004530:	f7ff b896 	b.w	8003660 <_test_assert>
 8004534:	20000830 	.word	0x20000830
 8004538:	08005eb0 	.word	0x08005eb0
 800453c:	20000ae0 	.word	0x20000ae0
 8004540:	200011e0 	.word	0x200011e0
 8004544:	08001af1 	.word	0x08001af1
 8004548:	20000998 	.word	0x20000998
 800454c:	20001330 	.word	0x20001330

08004550 <evt2_execute.8913>:
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
  chEvtBroadcast(&es2);
}

static void evt2_execute(void) {
 8004550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004554:	2520      	movs	r5, #32
 8004556:	b08d      	sub	sp, #52	; 0x34
 8004558:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
eventmask_t chEvtAddEvents(eventmask_t events) {

  chSysLock();
  currp->p_epending |= events;
 800455c:	4cac      	ldr	r4, [pc, #688]	; (8004810 <evt2_execute.8913+0x2c0>)
 800455e:	69a3      	ldr	r3, [r4, #24]
 8004560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004562:	f042 0207 	orr.w	r2, r2, #7
 8004566:	635a      	str	r2, [r3, #52]	; 0x34
 8004568:	2300      	movs	r3, #0
 800456a:	f383 8811 	msr	BASEPRI, r3

  /*
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
 800456e:	f7fc fd07 	bl	8000f80 <chEvtWaitOne.constprop.33>
  test_assert(1, m == 1, "single event error");
 8004572:	f1b0 0c01 	subs.w	ip, r0, #1
 8004576:	f1dc 0100 	rsbs	r1, ip, #0
 800457a:	eb51 010c 	adcs.w	r1, r1, ip
 800457e:	2001      	movs	r0, #1
 8004580:	f7ff f86e 	bl	8003660 <_test_assert>
 8004584:	b110      	cbz	r0, 800458c <evt2_execute.8913+0x3c>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
}
 8004586:	b00d      	add	sp, #52	; 0x34
 8004588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert(1, m == 1, "single event error");
  m = chEvtWaitOne(ALL_EVENTS);
 800458c:	f7fc fcf8 	bl	8000f80 <chEvtWaitOne.constprop.33>
  test_assert(2, m == 2, "single event error");
 8004590:	f1b0 0e02 	subs.w	lr, r0, #2
 8004594:	f1de 0100 	rsbs	r1, lr, #0
 8004598:	eb51 010e 	adcs.w	r1, r1, lr
 800459c:	2002      	movs	r0, #2
 800459e:	f7ff f85f 	bl	8003660 <_test_assert>
 80045a2:	2800      	cmp	r0, #0
 80045a4:	d1ef      	bne.n	8004586 <evt2_execute.8913+0x36>
  m = chEvtWaitOne(ALL_EVENTS);
 80045a6:	f7fc fceb 	bl	8000f80 <chEvtWaitOne.constprop.33>
  test_assert(3, m == 4, "single event error");
 80045aa:	3804      	subs	r0, #4
 80045ac:	4241      	negs	r1, r0
 80045ae:	4141      	adcs	r1, r0
 80045b0:	2003      	movs	r0, #3
 80045b2:	f7ff f855 	bl	8003660 <_test_assert>
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d1e5      	bne.n	8004586 <evt2_execute.8913+0x36>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 80045ba:	f7fc fcb9 	bl	8000f30 <chEvtGetAndClearEvents.constprop.37>
  test_assert(4, m == 0, "stuck event");
 80045be:	f1d0 0101 	rsbs	r1, r0, #1
 80045c2:	bf38      	it	cc
 80045c4:	2100      	movcc	r1, #0
 80045c6:	2004      	movs	r0, #4
 80045c8:	f7ff f84a 	bl	8003660 <_test_assert>
 80045cc:	4606      	mov	r6, r0
 80045ce:	2800      	cmp	r0, #0
 80045d0:	d1d9      	bne.n	8004586 <evt2_execute.8913+0x36>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
 80045d2:	f7fc ff4d 	bl	8001470 <test_wait_tick>
 80045d6:	f385 8811 	msr	BASEPRI, r5
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80045da:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 80045de:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
 80045e2:	f386 8811 	msr	BASEPRI, r6
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80045e6:	69a1      	ldr	r1, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80045e8:	4b8a      	ldr	r3, [pc, #552]	; (8004814 <evt2_execute.8913+0x2c4>)
 80045ea:	688a      	ldr	r2, [r1, #8]
 80045ec:	488a      	ldr	r0, [pc, #552]	; (8004818 <evt2_execute.8913+0x2c8>)
 80045ee:	9100      	str	r1, [sp, #0]
 80045f0:	3a01      	subs	r2, #1
 80045f2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80045f6:	f000 fd8b 	bl	8005110 <chThdCreateStatic>
 80045fa:	4e88      	ldr	r6, [pc, #544]	; (800481c <evt2_execute.8913+0x2cc>)
 80045fc:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 80045fe:	f7fc fcbf 	bl	8000f80 <chEvtWaitOne.constprop.33>
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 8004602:	f507 71fa 	add.w	r1, r7, #500	; 0x1f4
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 8004606:	4681      	mov	r9, r0
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 8004608:	f207 2226 	addw	r2, r7, #550	; 0x226
 800460c:	2005      	movs	r0, #5
 800460e:	f7fe ffd7 	bl	80035c0 <_test_assert_time_window>
 8004612:	2800      	cmp	r0, #0
 8004614:	d1b7      	bne.n	8004586 <evt2_execute.8913+0x36>
  test_assert(6, m == 1, "single event error");
 8004616:	2006      	movs	r0, #6
 8004618:	f1b9 0201 	subs.w	r2, r9, #1
 800461c:	4251      	negs	r1, r2
 800461e:	4151      	adcs	r1, r2
 8004620:	f7ff f81e 	bl	8003660 <_test_assert>
 8004624:	2800      	cmp	r0, #0
 8004626:	d1ae      	bne.n	8004586 <evt2_execute.8913+0x36>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8004628:	f7fc fc82 	bl	8000f30 <chEvtGetAndClearEvents.constprop.37>
  test_assert(7, m == 0, "stuck event");
 800462c:	f1d0 0101 	rsbs	r1, r0, #1
 8004630:	bf38      	it	cc
 8004632:	2100      	movcc	r1, #0
 8004634:	2007      	movs	r0, #7
 8004636:	f7ff f813 	bl	8003660 <_test_assert>
 800463a:	4607      	mov	r7, r0
 800463c:	2800      	cmp	r0, #0
 800463e:	d1a2      	bne.n	8004586 <evt2_execute.8913+0x36>
  test_wait_threads();
 8004640:	f7ff fca6 	bl	8003f90 <test_wait_threads>
 8004644:	f385 8811 	msr	BASEPRI, r5
 8004648:	69a3      	ldr	r3, [r4, #24]
 800464a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800464c:	f042 0205 	orr.w	r2, r2, #5
 8004650:	635a      	str	r2, [r3, #52]	; 0x34
 8004652:	f387 8811 	msr	BASEPRI, r7

  /*
   * Test on chEvtWaitAny() without wait.
   */
  chEvtAddEvents(5);
  m = chEvtWaitAny(ALL_EVENTS);
 8004656:	f7fc fcb3 	bl	8000fc0 <chEvtWaitAny.constprop.32>
  test_assert(8, m == 5, "unexpected pending bit");
 800465a:	1f43      	subs	r3, r0, #5
 800465c:	4259      	negs	r1, r3
 800465e:	4159      	adcs	r1, r3
 8004660:	2008      	movs	r0, #8
 8004662:	f7fe fffd 	bl	8003660 <_test_assert>
 8004666:	2800      	cmp	r0, #0
 8004668:	d18d      	bne.n	8004586 <evt2_execute.8913+0x36>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 800466a:	f7fc fc61 	bl	8000f30 <chEvtGetAndClearEvents.constprop.37>
  test_assert(9, m == 0, "stuck event");
 800466e:	f1d0 0101 	rsbs	r1, r0, #1
 8004672:	bf38      	it	cc
 8004674:	2100      	movcc	r1, #0
 8004676:	2009      	movs	r0, #9
 8004678:	f7fe fff2 	bl	8003660 <_test_assert>
 800467c:	4607      	mov	r7, r0
 800467e:	2800      	cmp	r0, #0
 8004680:	d181      	bne.n	8004586 <evt2_execute.8913+0x36>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
 8004682:	f7fc fef5 	bl	8001470 <test_wait_tick>
 8004686:	f385 8811 	msr	BASEPRI, r5
 800468a:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
 800468e:	f387 8811 	msr	BASEPRI, r7
 8004692:	69a1      	ldr	r1, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8004694:	4b5f      	ldr	r3, [pc, #380]	; (8004814 <evt2_execute.8913+0x2c4>)
 8004696:	688a      	ldr	r2, [r1, #8]
 8004698:	485f      	ldr	r0, [pc, #380]	; (8004818 <evt2_execute.8913+0x2c8>)
 800469a:	9100      	str	r1, [sp, #0]
 800469c:	3a01      	subs	r2, #1
 800469e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80046a2:	f000 fd35 	bl	8005110 <chThdCreateStatic>
 80046a6:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 80046a8:	f7fc fc8a 	bl	8000fc0 <chEvtWaitAny.constprop.32>
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 80046ac:	f505 71fa 	add.w	r1, r5, #500	; 0x1f4
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 80046b0:	4607      	mov	r7, r0
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 80046b2:	f205 2226 	addw	r2, r5, #550	; 0x226
 80046b6:	200a      	movs	r0, #10
 80046b8:	f7fe ff82 	bl	80035c0 <_test_assert_time_window>
 80046bc:	2800      	cmp	r0, #0
 80046be:	f47f af62 	bne.w	8004586 <evt2_execute.8913+0x36>
  test_assert(11, m == 1, "single event error");
 80046c2:	200b      	movs	r0, #11
 80046c4:	f1b7 0c01 	subs.w	ip, r7, #1
 80046c8:	f1dc 0100 	rsbs	r1, ip, #0
 80046cc:	eb51 010c 	adcs.w	r1, r1, ip
 80046d0:	f7fe ffc6 	bl	8003660 <_test_assert>
 80046d4:	2800      	cmp	r0, #0
 80046d6:	f47f af56 	bne.w	8004586 <evt2_execute.8913+0x36>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 80046da:	f7fc fc29 	bl	8000f30 <chEvtGetAndClearEvents.constprop.37>
  test_assert(12, m == 0, "stuck event");
 80046de:	f1d0 0101 	rsbs	r1, r0, #1
 80046e2:	bf38      	it	cc
 80046e4:	2100      	movcc	r1, #0
 80046e6:	200c      	movs	r0, #12
 80046e8:	f7fe ffba 	bl	8003660 <_test_assert>
 80046ec:	4607      	mov	r7, r0
 80046ee:	2800      	cmp	r0, #0
 80046f0:	f47f af49 	bne.w	8004586 <evt2_execute.8913+0x36>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 80046f4:	4d4a      	ldr	r5, [pc, #296]	; (8004820 <evt2_execute.8913+0x2d0>)
  test_wait_threads();
 80046f6:	f7ff fc4b 	bl	8003f90 <test_wait_threads>
 80046fa:	4b4a      	ldr	r3, [pc, #296]	; (8004824 <evt2_execute.8913+0x2d4>)
 80046fc:	602d      	str	r5, [r5, #0]
 80046fe:	601b      	str	r3, [r3, #0]
 8004700:	f04f 0a20 	mov.w	sl, #32
 8004704:	f38a 8811 	msr	BASEPRI, sl
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8004708:	6829      	ldr	r1, [r5, #0]
  esp->es_next     = elp;
  elp->el_listener = currp;
 800470a:	69a2      	ldr	r2, [r4, #24]
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 800470c:	9705      	str	r7, [sp, #20]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 800470e:	f10d 0930 	add.w	r9, sp, #48	; 0x30
  esp->es_next     = elp;
  elp->el_listener = currp;
 8004712:	9203      	str	r2, [sp, #12]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8004714:	f849 1d28 	str.w	r1, [r9, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
  elp->el_wflags   = wflags;
 8004718:	f04f 30ff 	mov.w	r0, #4294967295

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 800471c:	2201      	movs	r2, #1

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 800471e:	f8c5 9000 	str.w	r9, [r5]
  elp->el_listener = currp;
  elp->el_events   = events;
 8004722:	9204      	str	r2, [sp, #16]
  elp->el_flags    = (eventflags_t)0;
  elp->el_wflags   = wflags;
 8004724:	9006      	str	r0, [sp, #24]
 8004726:	f387 8811 	msr	BASEPRI, r7
 800472a:	f38a 8811 	msr	BASEPRI, sl
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 800472e:	6819      	ldr	r1, [r3, #0]
  esp->es_next     = elp;
  elp->el_listener = currp;
 8004730:	69a2      	ldr	r2, [r4, #24]
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 8004732:	970a      	str	r7, [sp, #40]	; 0x28
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8004734:	f10d 0830 	add.w	r8, sp, #48	; 0x30
  esp->es_next     = elp;
  elp->el_listener = currp;
 8004738:	9208      	str	r2, [sp, #32]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 800473a:	f848 1d14 	str.w	r1, [r8, #-20]!
  esp->es_next     = elp;
 800473e:	f8c3 8000 	str.w	r8, [r3]
  elp->el_listener = currp;
  elp->el_events   = events;
 8004742:	2304      	movs	r3, #4
 8004744:	9309      	str	r3, [sp, #36]	; 0x24
  elp->el_flags    = (eventflags_t)0;
  elp->el_wflags   = wflags;
 8004746:	900b      	str	r0, [sp, #44]	; 0x2c
 8004748:	f387 8811 	msr	BASEPRI, r7
   */
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
 800474c:	f7fc fe90 	bl	8001470 <test_wait_tick>
 8004750:	f38a 8811 	msr	BASEPRI, sl
 8004754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004758:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 800475c:	f387 8811 	msr	BASEPRI, r7
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004760:	69a3      	ldr	r3, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8004762:	4931      	ldr	r1, [pc, #196]	; (8004828 <evt2_execute.8913+0x2d8>)
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	482c      	ldr	r0, [pc, #176]	; (8004818 <evt2_execute.8913+0x2c8>)
 8004768:	9100      	str	r1, [sp, #0]
 800476a:	4b30      	ldr	r3, [pc, #192]	; (800482c <evt2_execute.8913+0x2dc>)
 800476c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004770:	3a01      	subs	r2, #1
 8004772:	f000 fccd 	bl	8005110 <chThdCreateStatic>
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 8004776:	f50b 77fa 	add.w	r7, fp, #500	; 0x1f4
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800477a:	6030      	str	r0, [r6, #0]
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
 800477c:	69a4      	ldr	r4, [r4, #24]
 800477e:	f38a 8811 	msr	BASEPRI, sl

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 8004782:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004784:	f003 0205 	and.w	r2, r3, #5
 8004788:	2a05      	cmp	r2, #5
 800478a:	d005      	beq.n	8004798 <evt2_execute.8913+0x248>
    ctp->p_u.ewmask = events;
 800478c:	2305      	movs	r3, #5
 800478e:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTANDEVT);
 8004790:	200b      	movs	r0, #11
 8004792:	f000 fcfd 	bl	8005190 <chSchGoSleepS>
 8004796:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~events;
 8004798:	f023 0305 	bic.w	r3, r3, #5
 800479c:	6363      	str	r3, [r4, #52]	; 0x34
 800479e:	2300      	movs	r3, #0
 80047a0:	f383 8811 	msr	BASEPRI, r3
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
 80047a4:	200d      	movs	r0, #13
 80047a6:	4639      	mov	r1, r7
 80047a8:	f20b 2226 	addw	r2, fp, #550	; 0x226
 80047ac:	f7fe ff08 	bl	80035c0 <_test_assert_time_window>
 80047b0:	2800      	cmp	r0, #0
 80047b2:	f47f aee8 	bne.w	8004586 <evt2_execute.8913+0x36>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 80047b6:	f7fc fbbb 	bl	8000f30 <chEvtGetAndClearEvents.constprop.37>
  test_assert(14, m == 0, "stuck event");
 80047ba:	f1d0 0101 	rsbs	r1, r0, #1
 80047be:	bf38      	it	cc
 80047c0:	2100      	movcc	r1, #0
 80047c2:	200e      	movs	r0, #14
 80047c4:	f7fe ff4c 	bl	8003660 <_test_assert>
 80047c8:	2800      	cmp	r0, #0
 80047ca:	f47f aedc 	bne.w	8004586 <evt2_execute.8913+0x36>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
 80047ce:	4c15      	ldr	r4, [pc, #84]	; (8004824 <evt2_execute.8913+0x2d4>)
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
  m = chEvtGetAndClearEvents(ALL_EVENTS);
  test_assert(14, m == 0, "stuck event");
  test_wait_threads();
 80047d0:	f7ff fbde 	bl	8003f90 <test_wait_threads>
  chEvtUnregister(&es1, &el1);
 80047d4:	4812      	ldr	r0, [pc, #72]	; (8004820 <evt2_execute.8913+0x2d0>)
 80047d6:	4649      	mov	r1, r9
 80047d8:	f000 fb52 	bl	8004e80 <chEvtUnregister>
  chEvtUnregister(&es2, &el2);
 80047dc:	4620      	mov	r0, r4
 80047de:	4641      	mov	r1, r8
 80047e0:	f000 fb4e 	bl	8004e80 <chEvtUnregister>
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
 80047e4:	6829      	ldr	r1, [r5, #0]
 80047e6:	200f      	movs	r0, #15
 80047e8:	ebb1 0e05 	subs.w	lr, r1, r5
 80047ec:	f1de 0100 	rsbs	r1, lr, #0
 80047f0:	eb51 010e 	adcs.w	r1, r1, lr
 80047f4:	f7fe ff34 	bl	8003660 <_test_assert>
 80047f8:	2800      	cmp	r0, #0
 80047fa:	f47f aec4 	bne.w	8004586 <evt2_execute.8913+0x36>
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
 80047fe:	6821      	ldr	r1, [r4, #0]
 8004800:	2010      	movs	r0, #16
 8004802:	1b0a      	subs	r2, r1, r4
 8004804:	4251      	negs	r1, r2
 8004806:	4151      	adcs	r1, r2
 8004808:	f7fe ff2a 	bl	8003660 <_test_assert>
 800480c:	e6bb      	b.n	8004586 <evt2_execute.8913+0x36>
 800480e:	bf00      	nop
 8004810:	200011e0 	.word	0x200011e0
 8004814:	08001791 	.word	0x08001791
 8004818:	20000998 	.word	0x20000998
 800481c:	20001330 	.word	0x20001330
 8004820:	200008b4 	.word	0x200008b4
 8004824:	200008a0 	.word	0x200008a0
 8004828:	08005de0 	.word	0x08005de0
 800482c:	08004981 	.word	0x08004981

08004830 <thread4.8224>:
 * <h2>Description</h2>
 * This test case tests the binary semaphores functionality. The test both
 * checks the binary semaphore status and the expected status of the underlying
 * counting semaphore.
 */
static THD_FUNCTION(thread4, p) {
 8004830:	b508      	push	{r3, lr}
 8004832:	2220      	movs	r2, #32
 8004834:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 8004838:	6883      	ldr	r3, [r0, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	dd05      	ble.n	800484a <thread4.8224+0x1a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800483e:	f000 fbe7 	bl	8005010 <chSchRescheduleS>
 8004842:	2300      	movs	r3, #0
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	bd08      	pop	{r3, pc}
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 800484a:	f000 fe91 	bl	8005570 <chSemSignalI>
 800484e:	e7f6      	b.n	800483e <thread4.8224+0xe>

08004850 <VectorD8.4240>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8004850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8004854:	4e44      	ldr	r6, [pc, #272]	; (8004968 <VectorD8.4240+0x118>)
 8004856:	6f75      	ldr	r5, [r6, #116]	; 0x74
  uint32_t cr1 = u->CR1;
 8004858:	682f      	ldr	r7, [r5, #0]
  uint32_t isr;

  /* Reading and clearing status.*/
  isr = u->ISR;
 800485a:	69ec      	ldr	r4, [r5, #28]
  u->ICR = isr;

  /* Error condition detection.*/
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
 800485c:	0722      	lsls	r2, r4, #28
  uint32_t cr1 = u->CR1;
  uint32_t isr;

  /* Reading and clearing status.*/
  isr = u->ISR;
  u->ICR = isr;
 800485e:	622c      	str	r4, [r5, #32]

  /* Error condition detection.*/
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
 8004860:	d13b      	bne.n	80048da <VectorD8.4240+0x8a>
    set_error(sdp, isr);

  /* Special case, LIN break detection.*/
  if (isr & USART_ISR_LBDF) {
 8004862:	05e3      	lsls	r3, r4, #23
 8004864:	d42d      	bmi.n	80048c2 <VectorD8.4240+0x72>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  if (isr & USART_ISR_RXNE) {
 8004866:	06a0      	lsls	r0, r4, #26
 8004868:	d417      	bmi.n	800489a <VectorD8.4240+0x4a>
    sdIncomingDataI(sdp, (uint8_t)u->RDR);
    osalSysUnlockFromISR();
  }

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
 800486a:	0639      	lsls	r1, r7, #24
 800486c:	d501      	bpl.n	8004872 <VectorD8.4240+0x22>
 800486e:	0622      	lsls	r2, r4, #24
 8004870:	d44e      	bmi.n	8004910 <VectorD8.4240+0xc0>
      u->TDR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (isr & USART_ISR_TC) {
 8004872:	0663      	lsls	r3, r4, #25
 8004874:	d50d      	bpl.n	8004892 <VectorD8.4240+0x42>
 8004876:	2320      	movs	r3, #32
 8004878:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 800487c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800487e:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8004880:	4839      	ldr	r0, [pc, #228]	; (8004968 <VectorD8.4240+0x118>)
 8004882:	429a      	cmp	r2, r3
 8004884:	d053      	beq.n	800492e <VectorD8.4240+0xde>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8004886:	f027 0740 	bic.w	r7, r7, #64	; 0x40
 800488a:	602f      	str	r7, [r5, #0]
 800488c:	2300      	movs	r3, #0
 800488e:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
}
 8004892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
 8004896:	f7ff b8d3 	b.w	8003a40 <_port_irq_epilogue>
 800489a:	2320      	movs	r3, #32
 800489c:	f383 8811 	msr	BASEPRI, r3
  }

  /* Data available.*/
  if (isr & USART_ISR_RXNE) {
    osalSysLockFromISR();
    sdIncomingDataI(sdp, (uint8_t)u->RDR);
 80048a0:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 80048a4:	6973      	ldr	r3, [r6, #20]
 80048a6:	fa5f f888 	uxtb.w	r8, r8
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d047      	beq.n	800493e <VectorD8.4240+0xee>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < Q_OK)
 80048ae:	482f      	ldr	r0, [pc, #188]	; (800496c <VectorD8.4240+0x11c>)
 80048b0:	4641      	mov	r1, r8
 80048b2:	f7fd ffe5 	bl	8002880 <chIQPutI>
 80048b6:	2800      	cmp	r0, #0
 80048b8:	db46      	blt.n	8004948 <VectorD8.4240+0xf8>
 80048ba:	2300      	movs	r3, #0
 80048bc:	f383 8811 	msr	BASEPRI, r3
 80048c0:	e7d3      	b.n	800486a <VectorD8.4240+0x1a>
 80048c2:	2320      	movs	r3, #32
 80048c4:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80048c8:	4829      	ldr	r0, [pc, #164]	; (8004970 <VectorD8.4240+0x120>)
 80048ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048ce:	f000 fcff 	bl	80052d0 <chEvtBroadcastFlagsI>
 80048d2:	2300      	movs	r3, #0
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	e7c5      	b.n	8004866 <VectorD8.4240+0x16>
 */
static void set_error(SerialDriver *sdp, uint32_t isr) {
  eventflags_t sts = 0;

  if (isr & USART_ISR_ORE)
    sts |= SD_OVERRUN_ERROR;
 80048da:	f014 0f08 	tst.w	r4, #8
 80048de:	bf0c      	ite	eq
 80048e0:	2100      	moveq	r1, #0
 80048e2:	2180      	movne	r1, #128	; 0x80
  if (isr & USART_ISR_PE)
 80048e4:	07e3      	lsls	r3, r4, #31
    sts |= SD_PARITY_ERROR;
 80048e6:	bf48      	it	mi
 80048e8:	f041 0120 	orrmi.w	r1, r1, #32
  if (isr & USART_ISR_FE)
 80048ec:	07a0      	lsls	r0, r4, #30
    sts |= SD_FRAMING_ERROR;
 80048ee:	bf48      	it	mi
 80048f0:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (isr & USART_ISR_NE)
 80048f4:	0762      	lsls	r2, r4, #29
    sts |= SD_NOISE_ERROR;
 80048f6:	bf48      	it	mi
 80048f8:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 80048fc:	2320      	movs	r3, #32
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	481b      	ldr	r0, [pc, #108]	; (8004970 <VectorD8.4240+0x120>)
 8004904:	f000 fce4 	bl	80052d0 <chEvtBroadcastFlagsI>
 8004908:	2300      	movs	r3, #0
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	e7a8      	b.n	8004862 <VectorD8.4240+0x12>
 8004910:	2320      	movs	r3, #32
 8004912:	f383 8811 	msr	BASEPRI, r3

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
 8004916:	4817      	ldr	r0, [pc, #92]	; (8004974 <VectorD8.4240+0x124>)
 8004918:	f7ff fcba 	bl	8004290 <chOQGetI.4259>
    if (b < Q_OK) {
 800491c:	2800      	cmp	r0, #0
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->TDR = b;
 800491e:	bfa4      	itt	ge
 8004920:	b280      	uxthge	r0, r0
 8004922:	8528      	strhge	r0, [r5, #40]	; 0x28
  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
 8004924:	db15      	blt.n	8004952 <VectorD8.4240+0x102>
 8004926:	2300      	movs	r3, #0
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	e7a1      	b.n	8004872 <VectorD8.4240+0x22>
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 800492e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0a8      	beq.n	8004886 <VectorD8.4240+0x36>
 8004934:	3004      	adds	r0, #4
 8004936:	2110      	movs	r1, #16
 8004938:	f000 fcca 	bl	80052d0 <chEvtBroadcastFlagsI>
 800493c:	e7a3      	b.n	8004886 <VectorD8.4240+0x36>
 800493e:	480c      	ldr	r0, [pc, #48]	; (8004970 <VectorD8.4240+0x120>)
 8004940:	2104      	movs	r1, #4
 8004942:	f000 fcc5 	bl	80052d0 <chEvtBroadcastFlagsI>
 8004946:	e7b2      	b.n	80048ae <VectorD8.4240+0x5e>
 8004948:	4809      	ldr	r0, [pc, #36]	; (8004970 <VectorD8.4240+0x120>)
 800494a:	2180      	movs	r1, #128	; 0x80
 800494c:	f000 fcc0 	bl	80052d0 <chEvtBroadcastFlagsI>
 8004950:	e7b3      	b.n	80048ba <VectorD8.4240+0x6a>
 8004952:	4807      	ldr	r0, [pc, #28]	; (8004970 <VectorD8.4240+0x120>)
 8004954:	2108      	movs	r1, #8
 8004956:	f000 fcbb 	bl	80052d0 <chEvtBroadcastFlagsI>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 800495a:	f027 03c0 	bic.w	r3, r7, #192	; 0xc0
 800495e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004962:	602b      	str	r3, [r5, #0]
 8004964:	e7df      	b.n	8004926 <VectorD8.4240+0xd6>
 8004966:	bf00      	nop
 8004968:	20001160 	.word	0x20001160
 800496c:	2000116c 	.word	0x2000116c
 8004970:	20001164 	.word	0x20001164
 8004974:	20001190 	.word	0x20001190
 8004978:	f3af 8000 	nop.w
 800497c:	f3af 8000 	nop.w

08004980 <thread2.8896.4190>:

  chThdSleepMilliseconds(50);
  chEvtSignal((thread_t *)p, 1);
}

static THD_FUNCTION(thread2, p) {
 8004980:	b538      	push	{r3, r4, r5, lr}
 8004982:	2520      	movs	r5, #32
 8004984:	f385 8811 	msr	BASEPRI, r5

  (void)p;
  chEvtBroadcast(&es1);
 8004988:	f640 00b4 	movw	r0, #2228	; 0x8b4
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 800498c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004990:	2100      	movs	r1, #0
 8004992:	f000 fc9d 	bl	80052d0 <chEvtBroadcastFlagsI>
 8004996:	2400      	movs	r4, #0
  chSchRescheduleS();
 8004998:	f000 fb3a 	bl	8005010 <chSchRescheduleS>
 800499c:	f384 8811 	msr	BASEPRI, r4
  chThdSleepMilliseconds(50);
 80049a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049a4:	f7fc fd54 	bl	8001450 <chThdSleep>
 80049a8:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcast(&es2);
 80049ac:	f640 00a0 	movw	r0, #2208	; 0x8a0
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 80049b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80049b4:	4621      	mov	r1, r4
 80049b6:	f000 fc8b 	bl	80052d0 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 80049ba:	f000 fb29 	bl	8005010 <chSchRescheduleS>
 80049be:	f384 8811 	msr	BASEPRI, r4
 80049c2:	bd38      	pop	{r3, r4, r5, pc}
 80049c4:	f3af 8000 	nop.w
 80049c8:	f3af 8000 	nop.w
 80049cc:	f3af 8000 	nop.w

080049d0 <mtx5_execute.8481>:
static void mtx5_setup(void) {

  chMtxObjectInit(&m1);
}

static void mtx5_execute(void) {
 80049d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80049d4:	4d3c      	ldr	r5, [pc, #240]	; (8004ac8 <mtx5_execute.8481+0xf8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80049d6:	69ab      	ldr	r3, [r5, #24]
 80049d8:	689e      	ldr	r6, [r3, #8]
 80049da:	2320      	movs	r3, #32
 80049dc:	f383 8811 	msr	BASEPRI, r3
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 80049e0:	4c3a      	ldr	r4, [pc, #232]	; (8004acc <mtx5_execute.8481+0xfc>)
 80049e2:	68a3      	ldr	r3, [r4, #8]
    if (mp->m_owner == currp) {
      mp->m_cnt++;
      return true;
    }
#endif
    return false;
 80049e4:	2100      	movs	r1, #0
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d061      	beq.n	8004aae <mtx5_execute.8481+0xde>
 80049ea:	2300      	movs	r3, #0
 80049ec:	f383 8811 	msr	BASEPRI, r3
#if !CH_CFG_USE_MUTEXES_RECURSIVE
  bool b;
  tprio_t prio = chThdGetPriorityX();

  b = chMtxTryLock(&m1);
  test_assert(1, b, "already locked");
 80049f0:	2001      	movs	r0, #1
 80049f2:	f7fe fe35 	bl	8003660 <_test_assert>
 80049f6:	b108      	cbz	r0, 80049fc <mtx5_execute.8481+0x2c>
 80049f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049fc:	2320      	movs	r3, #32
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	68a1      	ldr	r1, [r4, #8]
 8004a04:	4b31      	ldr	r3, [pc, #196]	; (8004acc <mtx5_execute.8481+0xfc>)
 8004a06:	2900      	cmp	r1, #0
 8004a08:	d058      	beq.n	8004abc <mtx5_execute.8481+0xec>
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f383 8811 	msr	BASEPRI, r3

  b = chMtxTryLock(&m1);
  test_assert(2, !b, "not locked");
 8004a12:	2002      	movs	r0, #2
 8004a14:	f7fe fe24 	bl	8003660 <_test_assert>
 8004a18:	4607      	mov	r7, r0
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	d1ec      	bne.n	80049f8 <mtx5_execute.8481+0x28>
 8004a1e:	2320      	movs	r3, #32
 8004a20:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxUnlockS(&m1);
 8004a24:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8004acc <mtx5_execute.8481+0xfc>
 8004a28:	4640      	mov	r0, r8
 8004a2a:	f000 fc91 	bl	8005350 <chMtxUnlockS>
 8004a2e:	f387 8811 	msr	BASEPRI, r7
 *
 * @notapi
 */
static inline bool queue_isempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (const thread_t *)tqp);
 8004a32:	6821      	ldr	r1, [r4, #0]
  chSysUnlock();

  test_assert(3, queue_isempty(&m1.m_queue), "queue not empty");
 8004a34:	2003      	movs	r0, #3
 8004a36:	1b0b      	subs	r3, r1, r4
 8004a38:	4259      	negs	r1, r3
 8004a3a:	4159      	adcs	r1, r3
 8004a3c:	f7fe fe10 	bl	8003660 <_test_assert>
 8004a40:	2800      	cmp	r0, #0
 8004a42:	d1d9      	bne.n	80049f8 <mtx5_execute.8481+0x28>
  test_assert(4, m1.m_owner == NULL, "still owned");
 8004a44:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8004a48:	2004      	movs	r0, #4
 8004a4a:	f1d1 0101 	rsbs	r1, r1, #1
 8004a4e:	bf38      	it	cc
 8004a50:	2100      	movcc	r1, #0
 8004a52:	f7fe fe05 	bl	8003660 <_test_assert>
 8004a56:	2800      	cmp	r0, #0
 8004a58:	d1ce      	bne.n	80049f8 <mtx5_execute.8481+0x28>
 8004a5a:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == prio, "wrong priority level");
 8004a5c:	6899      	ldr	r1, [r3, #8]
 8004a5e:	2005      	movs	r0, #5
 8004a60:	ebb6 0c01 	subs.w	ip, r6, r1
 8004a64:	f1dc 0100 	rsbs	r1, ip, #0
 8004a68:	eb51 010c 	adcs.w	r1, r1, ip
 8004a6c:	f7fe fdf8 	bl	8003660 <_test_assert>
 8004a70:	2800      	cmp	r0, #0
 8004a72:	d1c1      	bne.n	80049f8 <mtx5_execute.8481+0x28>
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
 8004a74:	4640      	mov	r0, r8
 8004a76:	f000 fd23 	bl	80054c0 <chMtxLock>
  chMtxUnlockAll();
 8004a7a:	f000 fc41 	bl	8005300 <chMtxUnlockAll>
 8004a7e:	f8d8 1000 	ldr.w	r1, [r8]
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
 8004a82:	2006      	movs	r0, #6
 8004a84:	ebb1 0e08 	subs.w	lr, r1, r8
 8004a88:	f1de 0100 	rsbs	r1, lr, #0
 8004a8c:	eb51 010e 	adcs.w	r1, r1, lr
 8004a90:	f7fe fde6 	bl	8003660 <_test_assert>
 8004a94:	2800      	cmp	r0, #0
 8004a96:	d1af      	bne.n	80049f8 <mtx5_execute.8481+0x28>
  test_assert(7, m1.m_owner == NULL, "still owned");
 8004a98:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8004a9c:	2007      	movs	r0, #7
 8004a9e:	f1d1 0101 	rsbs	r1, r1, #1
 8004aa2:	bf38      	it	cc
 8004aa4:	2100      	movcc	r1, #0
}
 8004aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
  chMtxUnlockAll();
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
  test_assert(7, m1.m_owner == NULL, "still owned");
 8004aaa:	f7fe bdd9 	b.w	8003660 <_test_assert>

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8004aae:	69ab      	ldr	r3, [r5, #24]
  mp->m_next = currp->p_mtxlist;
 8004ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8004ab2:	60a3      	str	r3, [r4, #8]
  mp->m_next = currp->p_mtxlist;
 8004ab4:	60e2      	str	r2, [r4, #12]
  currp->p_mtxlist = mp;
 8004ab6:	639c      	str	r4, [r3, #56]	; 0x38
 8004ab8:	2101      	movs	r1, #1
 8004aba:	e796      	b.n	80049ea <mtx5_execute.8481+0x1a>

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8004abc:	69aa      	ldr	r2, [r5, #24]
  mp->m_next = currp->p_mtxlist;
 8004abe:	6b90      	ldr	r0, [r2, #56]	; 0x38

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8004ac0:	609a      	str	r2, [r3, #8]
  mp->m_next = currp->p_mtxlist;
 8004ac2:	60d8      	str	r0, [r3, #12]
  currp->p_mtxlist = mp;
 8004ac4:	6393      	str	r3, [r2, #56]	; 0x38
 8004ac6:	e7a1      	b.n	8004a0c <mtx5_execute.8481+0x3c>
 8004ac8:	200011e0 	.word	0x200011e0
 8004acc:	200008a4 	.word	0x200008a4

08004ad0 <queues1_execute.9490>:

  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
}

static void queues1_execute(void) {
 8004ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ad2:	2620      	movs	r6, #32
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8004ada:	4ca2      	ldr	r4, [pc, #648]	; (8004d64 <queues1_execute.9490+0x294>)
 8004adc:	68a1      	ldr	r1, [r4, #8]
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");
 8004ade:	2001      	movs	r0, #1
 8004ae0:	f1d1 0101 	rsbs	r1, r1, #1
 8004ae4:	bf38      	it	cc
 8004ae6:	2100      	movcc	r1, #0
 8004ae8:	f7fe fdba 	bl	8003660 <_test_assert>
 8004aec:	4605      	mov	r5, r0
 8004aee:	bb18      	cbnz	r0, 8004b38 <queues1_execute.9490+0x68>
 8004af0:	f380 8811 	msr	BASEPRI, r0
 8004af4:	f386 8811 	msr	BASEPRI, r6

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8004af8:	2141      	movs	r1, #65	; 0x41
 8004afa:	4620      	mov	r0, r4
 8004afc:	f7fd fec0 	bl	8002880 <chIQPutI>
 8004b00:	2142      	movs	r1, #66	; 0x42
 8004b02:	4620      	mov	r0, r4
 8004b04:	f7fd febc 	bl	8002880 <chIQPutI>
 8004b08:	2143      	movs	r1, #67	; 0x43
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	f7fd feb8 	bl	8002880 <chIQPutI>
 8004b10:	4620      	mov	r0, r4
 8004b12:	2144      	movs	r1, #68	; 0x44
 8004b14:	f7fd feb4 	bl	8002880 <chIQPutI>
 8004b18:	f385 8811 	msr	BASEPRI, r5
 8004b1c:	f386 8811 	msr	BASEPRI, r6
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8004b20:	6962      	ldr	r2, [r4, #20]
 8004b22:	69a3      	ldr	r3, [r4, #24]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	bf18      	it	ne
 8004b28:	4629      	movne	r1, r5
 8004b2a:	f000 80e6 	beq.w	8004cfa <queues1_execute.9490+0x22a>
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
 8004b2e:	2002      	movs	r0, #2
 8004b30:	f7fe fd96 	bl	8003660 <_test_assert>
 8004b34:	4605      	mov	r5, r0
 8004b36:	b120      	cbz	r0, 8004b42 <queues1_execute.9490+0x72>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8004b3e:	b003      	add	sp, #12
 8004b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b42:	f380 8811 	msr	BASEPRI, r0
 8004b46:	2320      	movs	r3, #32
 8004b48:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");
 8004b4c:	4885      	ldr	r0, [pc, #532]	; (8004d64 <queues1_execute.9490+0x294>)
 8004b4e:	4629      	mov	r1, r5
 8004b50:	f7fd fe96 	bl	8002880 <chIQPutI>
 8004b54:	3004      	adds	r0, #4
 8004b56:	bf14      	ite	ne
 8004b58:	2100      	movne	r1, #0
 8004b5a:	2101      	moveq	r1, #1
 8004b5c:	2003      	movs	r0, #3
 8004b5e:	f7fe fd7f 	bl	8003660 <_test_assert>
 8004b62:	2800      	cmp	r0, #0
 8004b64:	f040 80c6 	bne.w	8004cf4 <queues1_execute.9490+0x224>
 8004b68:	f380 8811 	msr	BASEPRI, r0
 8004b6c:	2504      	movs	r5, #4
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 8004b6e:	4e7d      	ldr	r6, [pc, #500]	; (8004d64 <queues1_execute.9490+0x294>)
 8004b70:	f04f 31ff 	mov.w	r1, #4294967295
 8004b74:	4630      	mov	r0, r6
 8004b76:	f7fc fef3 	bl	8001960 <chIQGetTimeout>

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
 8004b7a:	b2c0      	uxtb	r0, r0
 8004b7c:	f7fe fe70 	bl	8003860 <test_emit_token>
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8004b80:	3d01      	subs	r5, #1
 8004b82:	d1f4      	bne.n	8004b6e <queues1_execute.9490+0x9e>
 8004b84:	2720      	movs	r7, #32
 8004b86:	f387 8811 	msr	BASEPRI, r7
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8004b8a:	68b1      	ldr	r1, [r6, #8]
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
 8004b8c:	2004      	movs	r0, #4
 8004b8e:	f1d1 0101 	rsbs	r1, r1, #1
 8004b92:	bf38      	it	cc
 8004b94:	2100      	movcc	r1, #0
 8004b96:	f7fe fd63 	bl	8003660 <_test_assert>
 8004b9a:	f385 8811 	msr	BASEPRI, r5
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	d1cd      	bne.n	8004b3e <queues1_execute.9490+0x6e>
  test_assert_sequence(5, "ABCD");
 8004ba2:	2005      	movs	r0, #5
 8004ba4:	4970      	ldr	r1, [pc, #448]	; (8004d68 <queues1_execute.9490+0x298>)
 8004ba6:	f7fe fd2b 	bl	8003600 <_test_assert_sequence>
 8004baa:	2800      	cmp	r0, #0
 8004bac:	d1c7      	bne.n	8004b3e <queues1_execute.9490+0x6e>
 8004bae:	f387 8811 	msr	BASEPRI, r7

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8004bb2:	2141      	movs	r1, #65	; 0x41
 8004bb4:	4630      	mov	r0, r6
 8004bb6:	f7fd fe63 	bl	8002880 <chIQPutI>
 8004bba:	2142      	movs	r1, #66	; 0x42
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	f7fd fe5f 	bl	8002880 <chIQPutI>
 8004bc2:	2143      	movs	r1, #67	; 0x43
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	f7fd fe5b 	bl	8002880 <chIQPutI>
 8004bca:	4630      	mov	r0, r6
 8004bcc:	2144      	movs	r1, #68	; 0x44
 8004bce:	f7fd fe57 	bl	8002880 <chIQPutI>
 8004bd2:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  /* Reading the whole thing */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 8004bd6:	4965      	ldr	r1, [pc, #404]	; (8004d6c <queues1_execute.9490+0x29c>)
 8004bd8:	2208      	movs	r2, #8
 8004bda:	462b      	mov	r3, r5
 8004bdc:	4630      	mov	r0, r6
 8004bde:	f7fc feff 	bl	80019e0 <chIQReadTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 8004be2:	1f03      	subs	r3, r0, #4
 8004be4:	4259      	negs	r1, r3
 8004be6:	4159      	adcs	r1, r3
 8004be8:	2006      	movs	r0, #6
 8004bea:	f7fe fd39 	bl	8003660 <_test_assert>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	d1a5      	bne.n	8004b3e <queues1_execute.9490+0x6e>
 8004bf2:	f387 8811 	msr	BASEPRI, r7
 8004bf6:	68b1      	ldr	r1, [r6, #8]
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");
 8004bf8:	2007      	movs	r0, #7
 8004bfa:	f1d1 0101 	rsbs	r1, r1, #1
 8004bfe:	bf38      	it	cc
 8004c00:	2100      	movcc	r1, #0
 8004c02:	f7fe fd2d 	bl	8003660 <_test_assert>
 8004c06:	f385 8811 	msr	BASEPRI, r5
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	d197      	bne.n	8004b3e <queues1_execute.9490+0x6e>
 8004c0e:	f387 8811 	msr	BASEPRI, r7

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8004c12:	2141      	movs	r1, #65	; 0x41
 8004c14:	4630      	mov	r0, r6
 8004c16:	f7fd fe33 	bl	8002880 <chIQPutI>
 8004c1a:	2142      	movs	r1, #66	; 0x42
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	f7fd fe2f 	bl	8002880 <chIQPutI>
 8004c22:	2143      	movs	r1, #67	; 0x43
 8004c24:	4630      	mov	r0, r6
 8004c26:	f7fd fe2b 	bl	8002880 <chIQPutI>
 8004c2a:	4630      	mov	r0, r6
 8004c2c:	2144      	movs	r1, #68	; 0x44
 8004c2e:	f7fd fe27 	bl	8002880 <chIQPutI>
 8004c32:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  /* Partial reads */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8004c36:	494d      	ldr	r1, [pc, #308]	; (8004d6c <queues1_execute.9490+0x29c>)
 8004c38:	2202      	movs	r2, #2
 8004c3a:	4630      	mov	r0, r6
 8004c3c:	462b      	mov	r3, r5
 8004c3e:	f7fc fecf 	bl	80019e0 <chIQReadTimeout>
  test_assert(8, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8004c42:	f1b0 0c02 	subs.w	ip, r0, #2
 8004c46:	f1dc 0100 	rsbs	r1, ip, #0
 8004c4a:	eb51 010c 	adcs.w	r1, r1, ip
 8004c4e:	2008      	movs	r0, #8
 8004c50:	f7fe fd06 	bl	8003660 <_test_assert>
 8004c54:	2800      	cmp	r0, #0
 8004c56:	f47f af72 	bne.w	8004b3e <queues1_execute.9490+0x6e>
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8004c5a:	4944      	ldr	r1, [pc, #272]	; (8004d6c <queues1_execute.9490+0x29c>)
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	4630      	mov	r0, r6
 8004c60:	462b      	mov	r3, r5
 8004c62:	f7fc febd 	bl	80019e0 <chIQReadTimeout>
  test_assert(9, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8004c66:	f1b0 0e02 	subs.w	lr, r0, #2
 8004c6a:	f1de 0100 	rsbs	r1, lr, #0
 8004c6e:	eb51 010e 	adcs.w	r1, r1, lr
 8004c72:	2009      	movs	r0, #9
 8004c74:	f7fe fcf4 	bl	8003660 <_test_assert>
 8004c78:	2800      	cmp	r0, #0
 8004c7a:	f47f af60 	bne.w	8004b3e <queues1_execute.9490+0x6e>
 8004c7e:	f387 8811 	msr	BASEPRI, r7
 8004c82:	68b1      	ldr	r1, [r6, #8]
  test_assert_lock(10, chIQIsEmptyI(&iq), "still full");
 8004c84:	200a      	movs	r0, #10
 8004c86:	f1d1 0101 	rsbs	r1, r1, #1
 8004c8a:	bf38      	it	cc
 8004c8c:	2100      	movcc	r1, #0
 8004c8e:	f7fe fce7 	bl	8003660 <_test_assert>
 8004c92:	f385 8811 	msr	BASEPRI, r5
 8004c96:	2800      	cmp	r0, #0
 8004c98:	f47f af51 	bne.w	8004b3e <queues1_execute.9490+0x6e>
 8004c9c:	f387 8811 	msr	BASEPRI, r7

  /* Testing reset */
  chSysLock();
  chIQPutI(&iq, 0);
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	4630      	mov	r0, r6
 8004ca4:	f7fd fdec 	bl	8002880 <chIQPutI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8004ca8:	6830      	ldr	r0, [r6, #0]
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 8004caa:	68f3      	ldr	r3, [r6, #12]
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 8004cac:	60b5      	str	r5, [r6, #8]
 8004cae:	42b0      	cmp	r0, r6
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 8004cb0:	61b3      	str	r3, [r6, #24]
  iqp->q_wrptr = iqp->q_buffer;
 8004cb2:	6173      	str	r3, [r6, #20]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8004cb4:	bf18      	it	ne
 8004cb6:	f06f 0501 	mvnne.w	r5, #1
 8004cba:	d008      	beq.n	8004cce <queues1_execute.9490+0x1fe>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8004cbc:	6803      	ldr	r3, [r0, #0]
 8004cbe:	6205      	str	r5, [r0, #32]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8004cc0:	605c      	str	r4, [r3, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8004cc2:	6023      	str	r3, [r4, #0]
  (void) chSchReadyI(tp);
 8004cc4:	f000 fabc 	bl	8005240 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8004cc8:	6820      	ldr	r0, [r4, #0]
 8004cca:	42a0      	cmp	r0, r4
 8004ccc:	d1f6      	bne.n	8004cbc <queues1_execute.9490+0x1ec>
 8004cce:	2700      	movs	r7, #0
 8004cd0:	f387 8811 	msr	BASEPRI, r7
 8004cd4:	2620      	movs	r6, #32
 8004cd6:	f386 8811 	msr	BASEPRI, r6
 */
static inline size_t chIQGetFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)chQSpaceI(iqp);
 8004cda:	68a1      	ldr	r1, [r4, #8]
 8004cdc:	4d21      	ldr	r5, [pc, #132]	; (8004d64 <queues1_execute.9490+0x294>)
  chIQResetI(&iq);
  chSysUnlock();
  test_assert_lock(11, chIQGetFullI(&iq) == 0, "still full");
 8004cde:	200b      	movs	r0, #11
 8004ce0:	1bcc      	subs	r4, r1, r7
 8004ce2:	4261      	negs	r1, r4
 8004ce4:	4161      	adcs	r1, r4
 8004ce6:	f7fe fcbb 	bl	8003660 <_test_assert>
 8004cea:	4604      	mov	r4, r0
 8004cec:	b150      	cbz	r0, 8004d04 <queues1_execute.9490+0x234>
 8004cee:	f387 8811 	msr	BASEPRI, r7
 8004cf2:	e724      	b.n	8004b3e <queues1_execute.9490+0x6e>
 8004cf4:	f385 8811 	msr	BASEPRI, r5
 8004cf8:	e721      	b.n	8004b3e <queues1_execute.9490+0x6e>
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8004cfa:	68a1      	ldr	r1, [r4, #8]
 8004cfc:	3100      	adds	r1, #0
 8004cfe:	bf18      	it	ne
 8004d00:	2101      	movne	r1, #1
 8004d02:	e714      	b.n	8004b2e <queues1_execute.9490+0x5e>
 8004d04:	f380 8811 	msr	BASEPRI, r0
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004d08:	4a19      	ldr	r2, [pc, #100]	; (8004d70 <queues1_execute.9490+0x2a0>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
 8004d0a:	4b1a      	ldr	r3, [pc, #104]	; (8004d74 <queues1_execute.9490+0x2a4>)
 8004d0c:	6992      	ldr	r2, [r2, #24]
 8004d0e:	481a      	ldr	r0, [pc, #104]	; (8004d78 <queues1_execute.9490+0x2a8>)
 8004d10:	6892      	ldr	r2, [r2, #8]
 8004d12:	9400      	str	r4, [sp, #0]
 8004d14:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004d18:	3201      	adds	r2, #1
 8004d1a:	f000 f9f9 	bl	8005110 <chThdCreateStatic>
 8004d1e:	4b17      	ldr	r3, [pc, #92]	; (8004d7c <queues1_execute.9490+0x2ac>)
 8004d20:	6018      	str	r0, [r3, #0]
 8004d22:	f386 8811 	msr	BASEPRI, r6
 */
static inline size_t chIQGetFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)chQSpaceI(iqp);
 8004d26:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
 8004d28:	200c      	movs	r0, #12
 8004d2a:	f1d1 0101 	rsbs	r1, r1, #1
 8004d2e:	bf38      	it	cc
 8004d30:	2100      	movcc	r1, #0
 8004d32:	f7fe fc95 	bl	8003660 <_test_assert>
 8004d36:	b110      	cbz	r0, 8004d3e <queues1_execute.9490+0x26e>
 8004d38:	f384 8811 	msr	BASEPRI, r4
 8004d3c:	e6ff      	b.n	8004b3e <queues1_execute.9490+0x6e>
 8004d3e:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 8004d42:	f7ff f925 	bl	8003f90 <test_wait_threads>

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 8004d46:	210a      	movs	r1, #10
 8004d48:	4628      	mov	r0, r5
 8004d4a:	f7fc fe09 	bl	8001960 <chIQGetTimeout>
 8004d4e:	f1b0 32ff 	subs.w	r2, r0, #4294967295
 8004d52:	4251      	negs	r1, r2
 8004d54:	4151      	adcs	r1, r2
 8004d56:	200d      	movs	r0, #13
}
 8004d58:	b003      	add	sp, #12
 8004d5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 8004d5e:	f7fe bc7f 	b.w	8003660 <_test_assert>
 8004d62:	bf00      	nop
 8004d64:	2000087c 	.word	0x2000087c
 8004d68:	08005eb0 	.word	0x08005eb0
 8004d6c:	20000ae0 	.word	0x20000ae0
 8004d70:	200011e0 	.word	0x200011e0
 8004d74:	080019d1 	.word	0x080019d1
 8004d78:	20000998 	.word	0x20000998
 8004d7c:	20001330 	.word	0x20001330

08004d80 <chMBPost.constprop.25>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPost(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 8004d80:	b538      	push	{r3, r4, r5, lr}
 8004d82:	4605      	mov	r5, r0
 8004d84:	2320      	movs	r3, #32
 8004d86:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
 8004d8a:	480c      	ldr	r0, [pc, #48]	; (8004dbc <chMBPost.constprop.25+0x3c>)
 8004d8c:	f7fc ff10 	bl	8001bb0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8004d90:	4604      	mov	r4, r0
 8004d92:	b970      	cbnz	r0, 8004db2 <chMBPost.constprop.25+0x32>
    *mbp->mb_wrptr++ = msg;
 8004d94:	4b0a      	ldr	r3, [pc, #40]	; (8004dc0 <chMBPost.constprop.25+0x40>)
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
    }
    chSemSignalI(&mbp->mb_fullsem);
 8004d96:	480b      	ldr	r0, [pc, #44]	; (8004dc4 <chMBPost.constprop.25+0x44>)
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8004d98:	689a      	ldr	r2, [r3, #8]
    if (mbp->mb_wrptr >= mbp->mb_top) {
 8004d9a:	6859      	ldr	r1, [r3, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8004d9c:	f842 5b04 	str.w	r5, [r2], #4
    if (mbp->mb_wrptr >= mbp->mb_top) {
 8004da0:	428a      	cmp	r2, r1
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8004da2:	609a      	str	r2, [r3, #8]
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
 8004da4:	bf24      	itt	cs
 8004da6:	681a      	ldrcs	r2, [r3, #0]
 8004da8:	609a      	strcs	r2, [r3, #8]
    }
    chSemSignalI(&mbp->mb_fullsem);
 8004daa:	f000 fbe1 	bl	8005570 <chSemSignalI>
    chSchRescheduleS();
 8004dae:	f000 f92f 	bl	8005010 <chSchRescheduleS>
 8004db2:	2300      	movs	r3, #0
 8004db4:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostS(mbp, msg, timeout);
  chSysUnlock();

  return rdymsg;
}
 8004db8:	4620      	mov	r0, r4
 8004dba:	bd38      	pop	{r3, r4, r5, pc}
 8004dbc:	20000870 	.word	0x20000870
 8004dc0:	20000854 	.word	0x20000854
 8004dc4:	20000864 	.word	0x20000864
 8004dc8:	f3af 8000 	nop.w
 8004dcc:	f3af 8000 	nop.w

08004dd0 <chCoreAlloc>:
 8004dd0:	2320      	movs	r3, #32
 8004dd2:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8004dd6:	4a09      	ldr	r2, [pc, #36]	; (8004dfc <chCoreAlloc+0x2c>)
 8004dd8:	4909      	ldr	r1, [pc, #36]	; (8004e00 <chCoreAlloc+0x30>)
 8004dda:	6813      	ldr	r3, [r2, #0]
 8004ddc:	6809      	ldr	r1, [r1, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8004dde:	3007      	adds	r0, #7
 8004de0:	f020 0007 	bic.w	r0, r0, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8004de4:	1ac9      	subs	r1, r1, r3
 8004de6:	4288      	cmp	r0, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 8004de8:	bf9a      	itte	ls
 8004dea:	1818      	addls	r0, r3, r0
 8004dec:	6010      	strls	r0, [r2, #0]

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 8004dee:	2300      	movhi	r3, #0
 8004df0:	2200      	movs	r2, #0
 8004df2:	f382 8811 	msr	BASEPRI, r2
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	20001374 	.word	0x20001374
 8004e00:	20001368 	.word	0x20001368
 8004e04:	f3af 8000 	nop.w
 8004e08:	f3af 8000 	nop.w
 8004e0c:	f3af 8000 	nop.w

08004e10 <wakeup.4598>:
 8004e10:	2320      	movs	r3, #32
 8004e12:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8004e16:	7f03      	ldrb	r3, [r0, #28]
 8004e18:	2b07      	cmp	r3, #7
 8004e1a:	d80e      	bhi.n	8004e3a <wakeup.4598+0x2a>
 8004e1c:	e8df f003 	tbb	[pc, r3]
 8004e20:	210d0d1d 	.word	0x210d0d1d
 8004e24:	080d0408 	.word	0x080d0408
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 8004e28:	6a03      	ldr	r3, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	3201      	adds	r2, #1
 8004e2e:	609a      	str	r2, [r3, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8004e30:	e890 000c 	ldmia.w	r0, {r2, r3}
 8004e34:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8004e36:	6802      	ldr	r2, [r0, #0]
 8004e38:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8004e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e3e:	6202      	str	r2, [r0, #32]
 8004e40:	6881      	ldr	r1, [r0, #8]
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.r_queue;
 8004e42:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <wakeup.4598+0x5c>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8004e44:	2200      	movs	r2, #0
 8004e46:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8004e48:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	428a      	cmp	r2, r1
 8004e4e:	d2fb      	bcs.n	8004e48 <wakeup.4598+0x38>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8004e50:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8004e52:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 8004e54:	6042      	str	r2, [r0, #4]
  tp->p_prev->p_next = tp;
 8004e56:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 8004e58:	6058      	str	r0, [r3, #4]
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 8004e62:	6a03      	ldr	r3, [r0, #32]
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	e7e7      	b.n	8004e3a <wakeup.4598+0x2a>
 8004e6a:	bf00      	nop
 8004e6c:	200011e0 	.word	0x200011e0

08004e70 <_idle_thread.4292>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8004e70:	e7fe      	b.n	8004e70 <_idle_thread.4292>
 8004e72:	bf00      	nop
 8004e74:	f3af 8000 	nop.w
 8004e78:	f3af 8000 	nop.w
 8004e7c:	f3af 8000 	nop.w

08004e80 <chEvtUnregister>:
 8004e80:	2320      	movs	r3, #32
 8004e82:	f383 8811 	msr	BASEPRI, r3
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
 8004e86:	4602      	mov	r2, r0
 8004e88:	e000      	b.n	8004e8c <chEvtUnregister+0xc>
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
  /*lint -restore*/
    if (p->el_next == elp) {
 8004e8a:	461a      	mov	r2, r3
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
 8004e8c:	6813      	ldr	r3, [r2, #0]
 8004e8e:	4283      	cmp	r3, r0
 8004e90:	d003      	beq.n	8004e9a <chEvtUnregister+0x1a>
  /*lint -restore*/
    if (p->el_next == elp) {
 8004e92:	428b      	cmp	r3, r1
 8004e94:	d1f9      	bne.n	8004e8a <chEvtUnregister+0xa>
      p->el_next = elp->el_next;
 8004e96:	680b      	ldr	r3, [r1, #0]
 8004e98:	6013      	str	r3, [r2, #0]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	f3af 8000 	nop.w
 8004ea8:	f3af 8000 	nop.w
 8004eac:	f3af 8000 	nop.w

08004eb0 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8004eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eb4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8004eb8:	b4f0      	push	{r4, r5, r6, r7}
 8004eba:	6859      	ldr	r1, [r3, #4]

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8004ebc:	4b0c      	ldr	r3, [pc, #48]	; (8004ef0 <chTMStopMeasurementX+0x40>)
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8004ebe:	6886      	ldr	r6, [r0, #8]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8004ec0:	6f5f      	ldr	r7, [r3, #116]	; 0x74

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8004ec2:	68c5      	ldr	r5, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 8004ec4:	6844      	ldr	r4, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8004ec6:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8004eca:	1b89      	subs	r1, r1, r6
 8004ecc:	1bc9      	subs	r1, r1, r7

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8004ece:	3501      	adds	r5, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8004ed0:	1852      	adds	r2, r2, r1
 8004ed2:	f143 0300 	adc.w	r3, r3, #0
 8004ed6:	e9c0 2304 	strd	r2, r3, [r0, #16]
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 8004eda:	6803      	ldr	r3, [r0, #0]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8004edc:	60c5      	str	r5, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 8004ede:	42a1      	cmp	r1, r4
    tmp->worst = tmp->last;
 8004ee0:	bf88      	it	hi
 8004ee2:	6041      	strhi	r1, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 8004ee4:	4299      	cmp	r1, r3
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8004ee6:	6081      	str	r1, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 8004ee8:	bf38      	it	cc
 8004eea:	6001      	strcc	r1, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8004eec:	bcf0      	pop	{r4, r5, r6, r7}
 8004eee:	4770      	bx	lr
 8004ef0:	200011e0 	.word	0x200011e0
 8004ef4:	f3af 8000 	nop.w
 8004ef8:	f3af 8000 	nop.w
 8004efc:	f3af 8000 	nop.w

08004f00 <chTMStartMeasurementX>:
 8004f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f04:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8004f08:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8004f0a:	6083      	str	r3, [r0, #8]
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop

08004f10 <chThdYield>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal priority, if any.
 *
 * @api
 */
void chThdYield(void) {
 8004f10:	b538      	push	{r3, r4, r5, lr}
 8004f12:	2320      	movs	r3, #32
 8004f14:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 8004f18:	4a0f      	ldr	r2, [pc, #60]	; (8004f58 <chThdYield+0x48>)
 8004f1a:	6810      	ldr	r0, [r2, #0]
 8004f1c:	6991      	ldr	r1, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 8004f1e:	6883      	ldr	r3, [r0, #8]
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 8004f20:	688c      	ldr	r4, [r1, #8]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 8004f22:	42a3      	cmp	r3, r4
 8004f24:	d203      	bcs.n	8004f2e <chThdYield+0x1e>
 8004f26:	2300      	movs	r3, #0
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	bd38      	pop	{r3, r4, r5, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8004f2e:	6803      	ldr	r3, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8004f30:	2501      	movs	r5, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 8004f32:	605a      	str	r2, [r3, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8004f34:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8004f36:	6190      	str	r0, [r2, #24]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8004f38:	2200      	movs	r2, #0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8004f3a:	7705      	strb	r5, [r0, #28]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8004f3c:	770a      	strb	r2, [r1, #28]
 8004f3e:	e000      	b.n	8004f42 <chThdYield+0x32>
 8004f40:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	4294      	cmp	r4, r2
 8004f46:	d9fb      	bls.n	8004f40 <chThdYield+0x30>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8004f48:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8004f4a:	600b      	str	r3, [r1, #0]
  tp->p_prev = cp->p_prev;
 8004f4c:	604a      	str	r2, [r1, #4]
  tp->p_prev->p_next = tp;
 8004f4e:	6011      	str	r1, [r2, #0]
  cp->p_prev = tp;
 8004f50:	6059      	str	r1, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 8004f52:	f7fb f9c5 	bl	80002e0 <_port_switch>
 8004f56:	e7e6      	b.n	8004f26 <chThdYield+0x16>
 8004f58:	200011e0 	.word	0x200011e0
 8004f5c:	f3af 8000 	nop.w

08004f60 <chThdCreateI>:
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 8004f60:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8004f64:	f241 15e0 	movw	r5, #4576	; 0x11e0
 8004f68:	f2c2 0500 	movt	r5, #8192	; 0x2000

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8004f6c:	f1a1 0c24 	sub.w	ip, r1, #36	; 0x24
 8004f70:	eb00 070c 	add.w	r7, r0, ip
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8004f74:	6969      	ldr	r1, [r5, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8004f76:	60c7      	str	r7, [r0, #12]
 8004f78:	f840 300c 	str.w	r3, [r0, ip]
 8004f7c:	9b06      	ldr	r3, [sp, #24]
 8004f7e:	607b      	str	r3, [r7, #4]
 8004f80:	f240 23f1 	movw	r3, #753	; 0x2f1
 8004f84:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004f88:	623b      	str	r3, [r7, #32]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8004f8a:	2302      	movs	r3, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8004f8c:	2600      	movs	r6, #0
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 8004f8e:	4690      	mov	r8, r2
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8004f90:	f100 0924 	add.w	r9, r0, #36	; 0x24
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8004f94:	f100 0228 	add.w	r2, r0, #40	; 0x28
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8004f98:	7703      	strb	r3, [r0, #28]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8004f9a:	2301      	movs	r3, #1
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8004f9c:	6105      	str	r5, [r0, #16]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8004f9e:	f8c0 8008 	str.w	r8, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8004fa2:	6108      	str	r0, [r1, #16]
 8004fa4:	6141      	str	r1, [r0, #20]
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 8004fa6:	4604      	mov	r4, r0
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8004fa8:	7746      	strb	r6, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8004faa:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
  tp->p_mtxlist = NULL;
 8004fae:	6386      	str	r6, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8004fb0:	6346      	str	r6, [r0, #52]	; 0x34
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8004fb2:	7783      	strb	r3, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8004fb4:	6186      	str	r6, [r0, #24]
  REG_INSERT(tp);
 8004fb6:	6168      	str	r0, [r5, #20]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8004fb8:	f8c0 9024 	str.w	r9, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004fbc:	6282      	str	r2, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8004fbe:	62c2      	str	r2, [r0, #44]	; 0x2c
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);

  return _thread_init(tp, prio);
}
 8004fc0:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	f3af 8000 	nop.w
 8004fcc:	f3af 8000 	nop.w

08004fd0 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8004fd0:	4a0c      	ldr	r2, [pc, #48]	; (8005004 <chSchDoRescheduleAhead+0x34>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8004fd2:	6810      	ldr	r0, [r2, #0]
 8004fd4:	6991      	ldr	r1, [r2, #24]

  tqp->p_next = tp->p_next;
 8004fd6:	6803      	ldr	r3, [r0, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8004fd8:	b430      	push	{r4, r5}
  tqp->p_next->p_prev = (thread_t *)tqp;
 8004fda:	605a      	str	r2, [r3, #4]
 8004fdc:	688c      	ldr	r4, [r1, #8]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8004fde:	6013      	str	r3, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8004fe0:	2501      	movs	r5, #1
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8004fe2:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 8004fe4:	2200      	movs	r2, #0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8004fe6:	7705      	strb	r5, [r0, #28]

  otp->p_state = CH_STATE_READY;
 8004fe8:	770a      	strb	r2, [r1, #28]
 8004fea:	e000      	b.n	8004fee <chSchDoRescheduleAhead+0x1e>
 8004fec:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	42a2      	cmp	r2, r4
 8004ff2:	d8fb      	bhi.n	8004fec <chSchDoRescheduleAhead+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8004ff4:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 8004ff6:	600b      	str	r3, [r1, #0]
  otp->p_prev = cp->p_prev;
 8004ff8:	604a      	str	r2, [r1, #4]
  otp->p_prev->p_next = otp;
 8004ffa:	6011      	str	r1, [r2, #0]
  cp->p_prev = otp;
 8004ffc:	6059      	str	r1, [r3, #4]

  chSysSwitch(currp, otp);
}
 8004ffe:	bc30      	pop	{r4, r5}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8005000:	f7fb b96e 	b.w	80002e0 <_port_switch>
 8005004:	200011e0 	.word	0x200011e0
 8005008:	f3af 8000 	nop.w
 800500c:	f3af 8000 	nop.w

08005010 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 8005010:	4b04      	ldr	r3, [pc, #16]	; (8005024 <chSchRescheduleS+0x14>)
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 8005016:	6892      	ldr	r2, [r2, #8]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	429a      	cmp	r2, r3
 800501c:	d800      	bhi.n	8005020 <chSchRescheduleS+0x10>
 800501e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 8005020:	f7ff bfd6 	b.w	8004fd0 <chSchDoRescheduleAhead>
 8005024:	200011e0 	.word	0x200011e0
 8005028:	f3af 8000 	nop.w
 800502c:	f3af 8000 	nop.w

08005030 <chThdSetPriority>:
 * @param[in] newprio   the new priority level of the running thread
 * @return              The old priority level.
 *
 * @api
 */
tprio_t chThdSetPriority(tprio_t newprio) {
 8005030:	b510      	push	{r4, lr}
 8005032:	2320      	movs	r3, #32
 8005034:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck(newprio <= HIGHPRIO);

  chSysLock();
#if CH_CFG_USE_MUTEXES == TRUE
  oldprio = currp->p_realprio;
 8005038:	4b08      	ldr	r3, [pc, #32]	; (800505c <chThdSetPriority+0x2c>)
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if ((currp->p_prio == currp->p_realprio) || (newprio > currp->p_prio)) {
 800503e:	6899      	ldr	r1, [r3, #8]
 8005040:	428c      	cmp	r4, r1
 8005042:	d001      	beq.n	8005048 <chThdSetPriority+0x18>
 8005044:	4281      	cmp	r1, r0
 8005046:	d200      	bcs.n	800504a <chThdSetPriority+0x1a>
    currp->p_prio = newprio;
 8005048:	6098      	str	r0, [r3, #8]
  }
  currp->p_realprio = newprio;
 800504a:	63d8      	str	r0, [r3, #60]	; 0x3c
#else
  oldprio = currp->p_prio;
  currp->p_prio = newprio;
#endif
  chSchRescheduleS();
 800504c:	f7ff ffe0 	bl	8005010 <chSchRescheduleS>
 8005050:	2300      	movs	r3, #0
 8005052:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return oldprio;
}
 8005056:	4620      	mov	r0, r4
 8005058:	bd10      	pop	{r4, pc}
 800505a:	bf00      	nop
 800505c:	200011e0 	.word	0x200011e0

08005060 <chSysRestoreStatusX.part.2.4306>:
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 8005060:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005062:	f3ef 8405 	mrs	r4, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
static inline bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8005066:	05e4      	lsls	r4, r4, #23
 8005068:	0de4      	lsrs	r4, r4, #23

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 800506a:	b11c      	cbz	r4, 8005074 <chSysRestoreStatusX.part.2.4306+0x14>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800506c:	2300      	movs	r3, #0
 800506e:	f383 8811 	msr	BASEPRI, r3
 8005072:	bd10      	pop	{r4, pc}
      chSysUnlockFromISR();
    }
    else {
      chSchRescheduleS();
 8005074:	f7ff ffcc 	bl	8005010 <chSchRescheduleS>
 8005078:	f384 8811 	msr	BASEPRI, r4
 800507c:	bd10      	pop	{r4, pc}
 800507e:	bf00      	nop

08005080 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8005080:	b4f0      	push	{r4, r5, r6, r7}

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8005082:	4f14      	ldr	r7, [pc, #80]	; (80050d4 <chSchWakeupS+0x54>)
 8005084:	6885      	ldr	r5, [r0, #8]
 8005086:	69be      	ldr	r6, [r7, #24]
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8005088:	4604      	mov	r4, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800508a:	68b0      	ldr	r0, [r6, #8]
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 800508c:	6221      	str	r1, [r4, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800508e:	2300      	movs	r3, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8005090:	4285      	cmp	r5, r0
 8005092:	d80c      	bhi.n	80050ae <chSchWakeupS+0x2e>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8005094:	7723      	strb	r3, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 8005096:	463b      	mov	r3, r7
  do {
    cp = cp->p_next;
 8005098:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	4295      	cmp	r5, r2
 800509e:	d9fb      	bls.n	8005098 <chSchWakeupS+0x18>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80050a0:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80050a2:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 80050a4:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 80050a6:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80050a8:	605c      	str	r4, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 80050aa:	bcf0      	pop	{r4, r5, r6, r7}
 80050ac:	4770      	bx	lr
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80050ae:	7733      	strb	r3, [r6, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 80050b0:	463b      	mov	r3, r7
  do {
    cp = cp->p_next;
 80050b2:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	4290      	cmp	r0, r2
 80050b8:	d9fb      	bls.n	80050b2 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80050ba:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80050bc:	6033      	str	r3, [r6, #0]
  tp->p_prev = cp->p_prev;
 80050be:	6072      	str	r2, [r6, #4]
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 80050c0:	4620      	mov	r0, r4
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;
 80050c2:	605e      	str	r6, [r3, #4]
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 80050c4:	4631      	mov	r1, r6
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 80050c6:	2301      	movs	r3, #1
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80050c8:	6016      	str	r6, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 80050ca:	7723      	strb	r3, [r4, #28]
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 80050cc:	61bc      	str	r4, [r7, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 80050ce:	bcf0      	pop	{r4, r5, r6, r7}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 80050d0:	f7fb b906 	b.w	80002e0 <_port_switch>
 80050d4:	200011e0 	.word	0x200011e0
 80050d8:	f3af 8000 	nop.w
 80050dc:	f3af 8000 	nop.w

080050e0 <chSemSignal>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @api
 */
void chSemSignal(semaphore_t *sp) {
 80050e0:	b508      	push	{r3, lr}
 80050e2:	2220      	movs	r2, #32
 80050e4:	4603      	mov	r3, r0
 80050e6:	f382 8811 	msr	BASEPRI, r2
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sp->s_cnt <= (cnt_t)0) {
 80050ea:	6882      	ldr	r2, [r0, #8]
 80050ec:	3201      	adds	r2, #1
 80050ee:	2a00      	cmp	r2, #0
 80050f0:	6082      	str	r2, [r0, #8]
 80050f2:	dd03      	ble.n	80050fc <chSemSignal+0x1c>
 80050f4:	2300      	movs	r3, #0
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	bd08      	pop	{r3, pc}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80050fc:	6800      	ldr	r0, [r0, #0]

  tqp->p_next = tp->p_next;
 80050fe:	6802      	ldr	r2, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&sp->s_queue), MSG_OK);
 8005100:	2100      	movs	r1, #0
 8005102:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8005104:	6053      	str	r3, [r2, #4]
 8005106:	f7ff ffbb 	bl	8005080 <chSchWakeupS>
 800510a:	e7f3      	b.n	80050f4 <chSemSignal+0x14>
 800510c:	f3af 8000 	nop.w

08005110 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8005110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005114:	4698      	mov	r8, r3
 8005116:	4604      	mov	r4, r0
 8005118:	2320      	movs	r3, #32
 800511a:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800511e:	f241 16e0 	movw	r6, #4576	; 0x11e0
 8005122:	f2c2 0600 	movt	r6, #8192	; 0x2000

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8005126:	3924      	subs	r1, #36	; 0x24
 8005128:	1847      	adds	r7, r0, r1
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800512a:	f8d6 e014 	ldr.w	lr, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800512e:	60c7      	str	r7, [r0, #12]
 8005130:	f840 8001 	str.w	r8, [r0, r1]
 8005134:	9906      	ldr	r1, [sp, #24]
 8005136:	6079      	str	r1, [r7, #4]
 8005138:	f240 21f1 	movw	r1, #753	; 0x2f1
 800513c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005140:	6239      	str	r1, [r7, #32]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8005142:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8005144:	f100 0328 	add.w	r3, r0, #40	; 0x28
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8005148:	6082      	str	r2, [r0, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800514a:	f100 0c24 	add.w	ip, r0, #36	; 0x24
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800514e:	63c2      	str	r2, [r0, #60]	; 0x3c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8005150:	2702      	movs	r7, #2
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8005152:	2201      	movs	r2, #1
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8005154:	6106      	str	r6, [r0, #16]
 8005156:	f8c0 e014 	str.w	lr, [r0, #20]
 800515a:	f8ce 0010 	str.w	r0, [lr, #16]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800515e:	4629      	mov	r1, r5
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8005160:	7707      	strb	r7, [r0, #28]
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8005162:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8005164:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8005166:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8005168:	7782      	strb	r2, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800516a:	6185      	str	r5, [r0, #24]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800516c:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005170:	6283      	str	r3, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8005172:	62c3      	str	r3, [r0, #44]	; 0x2c
  REG_INSERT(tp);
 8005174:	6170      	str	r0, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8005176:	f7ff ff83 	bl	8005080 <chSchWakeupS>
 800517a:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 800517e:	4620      	mov	r0, r4
 8005180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005184:	f3af 8000 	nop.w
 8005188:	f3af 8000 	nop.w
 800518c:	f3af 8000 	nop.w

08005190 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8005190:	f241 13e0 	movw	r3, #4576	; 0x11e0
 8005194:	f2c2 0300 	movt	r3, #8192	; 0x2000
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8005198:	b410      	push	{r4}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800519a:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 800519c:	6999      	ldr	r1, [r3, #24]

  tqp->p_next = tp->p_next;
 800519e:	6814      	ldr	r4, [r2, #0]
  otp->p_state = newstate;
 80051a0:	7708      	strb	r0, [r1, #28]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80051a2:	2001      	movs	r0, #1
 80051a4:	7710      	strb	r0, [r2, #28]
  chSysSwitch(currp, otp);
 80051a6:	4610      	mov	r0, r2
  tqp->p_next->p_prev = (thread_t *)tqp;
 80051a8:	6063      	str	r3, [r4, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80051aa:	601c      	str	r4, [r3, #0]
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 80051ac:	619a      	str	r2, [r3, #24]
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
}
 80051ae:	bc10      	pop	{r4}
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 80051b0:	f7fb b896 	b.w	80002e0 <_port_switch>
 80051b4:	f3af 8000 	nop.w
 80051b8:	f3af 8000 	nop.w
 80051bc:	f3af 8000 	nop.w

080051c0 <chMsgWait>:
 *
 * @return              A reference to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 80051c0:	b510      	push	{r4, lr}
 80051c2:	2320      	movs	r3, #32
 80051c4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
 80051c8:	4c0b      	ldr	r4, [pc, #44]	; (80051f8 <chMsgWait+0x38>)
 80051ca:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->p_msgqueue.p_next != (thread_t *)&tp->p_msgqueue);
 80051cc:	4613      	mov	r3, r2
 80051ce:	f853 0f28 	ldr.w	r0, [r3, #40]!
 80051d2:	4298      	cmp	r0, r3
 80051d4:	d008      	beq.n	80051e8 <chMsgWait+0x28>
 80051d6:	6801      	ldr	r1, [r0, #0]
 80051d8:	6291      	str	r1, [r2, #40]	; 0x28
  tqp->p_next->p_prev = (thread_t *)tqp;
 80051da:	604b      	str	r3, [r1, #4]
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->p_msgqueue);
  tp->p_state = CH_STATE_SNDMSG;
 80051dc:	230d      	movs	r3, #13
 80051de:	7703      	strb	r3, [r0, #28]
 80051e0:	2300      	movs	r3, #0
 80051e2:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 80051e6:	bd10      	pop	{r4, pc}
thread_t *chMsgWait(void) {
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
    chSchGoSleepS(CH_STATE_WTMSG);
 80051e8:	200e      	movs	r0, #14
 80051ea:	f7ff ffd1 	bl	8005190 <chSchGoSleepS>
 80051ee:	69a2      	ldr	r2, [r4, #24]
 80051f0:	4613      	mov	r3, r2
 80051f2:	f853 0f28 	ldr.w	r0, [r3, #40]!
 80051f6:	e7ee      	b.n	80051d6 <chMsgWait+0x16>
 80051f8:	200011e0 	.word	0x200011e0
 80051fc:	f3af 8000 	nop.w

08005200 <chSemWait>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemWait(semaphore_t *sp) {
 8005200:	b510      	push	{r4, lr}
 8005202:	4603      	mov	r3, r0
 8005204:	2220      	movs	r2, #32
 8005206:	f382 8811 	msr	BASEPRI, r2
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
 800520a:	6882      	ldr	r2, [r0, #8]
 800520c:	3a01      	subs	r2, #1
 800520e:	6082      	str	r2, [r0, #8]
    chSchGoSleepS(CH_STATE_WTSEM);

    return currp->p_u.rdymsg;
  }

  return MSG_OK;
 8005210:	2000      	movs	r0, #0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
 8005212:	2a00      	cmp	r2, #0
 8005214:	db03      	blt.n	800521e <chSemWait+0x1e>
 8005216:	2300      	movs	r3, #0
 8005218:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();

  return msg;
}
 800521c:	bd10      	pop	{r4, pc}
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    currp->p_u.wtsemp = sp;
 800521e:	4c07      	ldr	r4, [pc, #28]	; (800523c <chSemWait+0x3c>)
 8005220:	69a2      	ldr	r2, [r4, #24]
 8005222:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8005224:	6859      	ldr	r1, [r3, #4]
  cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 8005226:	6013      	str	r3, [r2, #0]
  tp->p_prev = tqp->p_prev;
 8005228:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tp;
 800522a:	600a      	str	r2, [r1, #0]
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 800522c:	2005      	movs	r0, #5
  tqp->p_prev = tp;
 800522e:	605a      	str	r2, [r3, #4]
 8005230:	f7ff ffae 	bl	8005190 <chSchGoSleepS>

    return currp->p_u.rdymsg;
 8005234:	69a3      	ldr	r3, [r4, #24]
 8005236:	6a18      	ldr	r0, [r3, #32]
 8005238:	e7ed      	b.n	8005216 <chSemWait+0x16>
 800523a:	bf00      	nop
 800523c:	200011e0 	.word	0x200011e0

08005240 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8005240:	2200      	movs	r2, #0
 8005242:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8005244:	4b05      	ldr	r3, [pc, #20]	; (800525c <chSchReadyI+0x1c>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8005246:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8005248:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	428a      	cmp	r2, r1
 800524e:	d2fb      	bcs.n	8005248 <chSchReadyI+0x8>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8005250:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8005252:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 8005254:	6042      	str	r2, [r0, #4]
  tp->p_prev->p_next = tp;
 8005256:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 8005258:	6058      	str	r0, [r3, #4]

  return tp;
}
 800525a:	4770      	bx	lr
 800525c:	200011e0 	.word	0x200011e0

08005260 <chMsgSend>:
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8005260:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8005262:	4a0e      	ldr	r2, [pc, #56]	; (800529c <chMsgSend+0x3c>)
 8005264:	6994      	ldr	r4, [r2, #24]
 8005266:	2220      	movs	r2, #32
 8005268:	f382 8811 	msr	BASEPRI, r2

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 800526c:	f100 0528 	add.w	r5, r0, #40	; 0x28
 8005270:	6225      	str	r5, [r4, #32]
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 8005272:	7f06      	ldrb	r6, [r0, #28]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8005274:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 8005276:	6025      	str	r5, [r4, #0]
 8005278:	2e0e      	cmp	r6, #14
  thread_t *ctp = currp;

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
 800527a:	6321      	str	r1, [r4, #48]	; 0x30
  tp->p_prev = tqp->p_prev;
 800527c:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 800527e:	6014      	str	r4, [r2, #0]
  tqp->p_prev = tp;
 8005280:	62c4      	str	r4, [r0, #44]	; 0x2c
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 8005282:	d007      	beq.n	8005294 <chMsgSend+0x34>
    (void) chSchReadyI(tp);
  }
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 8005284:	200c      	movs	r0, #12
 8005286:	f7ff ff83 	bl	8005190 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
 800528a:	6a20      	ldr	r0, [r4, #32]
 800528c:	2300      	movs	r3, #0
 800528e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return msg;
}
 8005292:	bd70      	pop	{r4, r5, r6, pc}
  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
    (void) chSchReadyI(tp);
 8005294:	f7ff ffd4 	bl	8005240 <chSchReadyI>
 8005298:	e7f4      	b.n	8005284 <chMsgSend+0x24>
 800529a:	bf00      	nop
 800529c:	200011e0 	.word	0x200011e0

080052a0 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80052a0:	6b42      	ldr	r2, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80052a2:	7f03      	ldrb	r3, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80052a4:	4311      	orrs	r1, r2
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80052a6:	2b0a      	cmp	r3, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80052a8:	6341      	str	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80052aa:	d00a      	beq.n	80052c2 <chEvtSignalI+0x22>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 80052ac:	2b0b      	cmp	r3, #11
 80052ae:	d000      	beq.n	80052b2 <chEvtSignalI+0x12>
 80052b0:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 80052b2:	6a03      	ldr	r3, [r0, #32]
 80052b4:	4019      	ands	r1, r3

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 80052b6:	428b      	cmp	r3, r1
 80052b8:	d1fa      	bne.n	80052b0 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	6203      	str	r3, [r0, #32]
    (void) chSchReadyI(tp);
 80052be:	f7ff bfbf 	b.w	8005240 <chSchReadyI>
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 80052c2:	6a03      	ldr	r3, [r0, #32]
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80052c4:	4219      	tst	r1, r3
 80052c6:	d1f8      	bne.n	80052ba <chEvtSignalI+0x1a>
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	f3af 8000 	nop.w

080052d0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80052d0:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 80052d2:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80052d4:	42a0      	cmp	r0, r4
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80052d6:	4606      	mov	r6, r0
 80052d8:	460d      	mov	r5, r1
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80052da:	d00d      	beq.n	80052f8 <chEvtBroadcastFlagsI+0x28>
  /*lint -restore*/
    elp->el_flags |= flags;
 80052dc:	68e3      	ldr	r3, [r4, #12]
 80052de:	432b      	orrs	r3, r5
 80052e0:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 80052e2:	b115      	cbz	r5, 80052ea <chEvtBroadcastFlagsI+0x1a>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 80052e4:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->el_flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 80052e6:	4213      	tst	r3, r2
 80052e8:	d003      	beq.n	80052f2 <chEvtBroadcastFlagsI+0x22>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 80052ea:	6860      	ldr	r0, [r4, #4]
 80052ec:	68a1      	ldr	r1, [r4, #8]
 80052ee:	f7ff ffd7 	bl	80052a0 <chEvtSignalI>
    }
    elp = elp->el_next;
 80052f2:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80052f4:	42a6      	cmp	r6, r4
 80052f6:	d1f1      	bne.n	80052dc <chEvtBroadcastFlagsI+0xc>
 80052f8:	bd70      	pop	{r4, r5, r6, pc}
 80052fa:	bf00      	nop
 80052fc:	f3af 8000 	nop.w

08005300 <chMtxUnlockAll>:
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 8005300:	4b12      	ldr	r3, [pc, #72]	; (800534c <chMtxUnlockAll+0x4c>)
 *          this function does not have any overhead related to the priority
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
 8005302:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8005304:	699c      	ldr	r4, [r3, #24]
 8005306:	2320      	movs	r3, #32
 8005308:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
 800530c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800530e:	b1c3      	cbz	r3, 8005342 <chMtxUnlockAll+0x42>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
 8005310:	2600      	movs	r6, #0
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8005312:	681a      	ldr	r2, [r3, #0]

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 8005314:	68d9      	ldr	r1, [r3, #12]
      if (chMtxQueueNotEmptyS(mp)) {
 8005316:	4293      	cmp	r3, r2

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 8005318:	63a1      	str	r1, [r4, #56]	; 0x38
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
 800531a:	bf08      	it	eq
 800531c:	609e      	streq	r6, [r3, #8]
  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
      if (chMtxQueueNotEmptyS(mp)) {
 800531e:	d009      	beq.n	8005334 <chMtxUnlockAll+0x34>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8005320:	6811      	ldr	r1, [r2, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
        mp->m_next = tp->p_mtxlist;
 8005322:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8005324:	6019      	str	r1, [r3, #0]
        tp->p_mtxlist = mp;
        (void) chSchReadyI(tp);
 8005326:	4610      	mov	r0, r2
  tqp->p_next->p_prev = (thread_t *)tqp;
 8005328:	604b      	str	r3, [r1, #4]
      if (chMtxQueueNotEmptyS(mp)) {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
 800532a:	609a      	str	r2, [r3, #8]
        mp->m_next = tp->p_mtxlist;
 800532c:	60dd      	str	r5, [r3, #12]
        tp->p_mtxlist = mp;
 800532e:	6393      	str	r3, [r2, #56]	; 0x38
        (void) chSchReadyI(tp);
 8005330:	f7ff ff86 	bl	8005240 <chSchReadyI>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
      }
    } while (ctp->p_mtxlist != NULL);
 8005334:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1eb      	bne.n	8005312 <chMtxUnlockAll+0x12>
    ctp->p_prio = ctp->p_realprio;
 800533a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800533c:	60a3      	str	r3, [r4, #8]
    chSchRescheduleS();
 800533e:	f7ff fe67 	bl	8005010 <chSchRescheduleS>
 8005342:	2300      	movs	r3, #0
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	bd70      	pop	{r4, r5, r6, pc}
 800534a:	bf00      	nop
 800534c:	200011e0 	.word	0x200011e0

08005350 <chMtxUnlockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
 8005350:	b430      	push	{r4, r5}
 8005352:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 8005354:	4a11      	ldr	r2, [pc, #68]	; (800539c <chMtxUnlockS+0x4c>)
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8005356:	6825      	ldr	r5, [r4, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8005358:	68c3      	ldr	r3, [r0, #12]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 800535a:	6990      	ldr	r0, [r2, #24]
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 800535c:	42ac      	cmp	r4, r5
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 800535e:	6383      	str	r3, [r0, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8005360:	d017      	beq.n	8005392 <chMtxUnlockS+0x42>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8005362:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8005364:	b14b      	cbz	r3, 800537a <chMtxUnlockS+0x2a>
 8005366:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8005368:	4293      	cmp	r3, r2
 800536a:	d003      	beq.n	8005374 <chMtxUnlockS+0x24>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 800536c:	6892      	ldr	r2, [r2, #8]
 800536e:	4291      	cmp	r1, r2
 8005370:	bf38      	it	cc
 8005372:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 8005374:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1f5      	bne.n	8005366 <chMtxUnlockS+0x16>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800537a:	682b      	ldr	r3, [r5, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 800537c:	6baa      	ldr	r2, [r5, #56]	; 0x38
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 800537e:	6081      	str	r1, [r0, #8]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      (void) chSchReadyI(tp);
 8005380:	4628      	mov	r0, r5
 8005382:	6023      	str	r3, [r4, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8005384:	605c      	str	r4, [r3, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 8005386:	60a5      	str	r5, [r4, #8]
      mp->m_next = tp->p_mtxlist;
 8005388:	60e2      	str	r2, [r4, #12]
      tp->p_mtxlist = mp;
 800538a:	63ac      	str	r4, [r5, #56]	; 0x38
      mp->m_owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 800538c:	bc30      	pop	{r4, r5}
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      (void) chSchReadyI(tp);
 800538e:	f7ff bf57 	b.w	8005240 <chSchReadyI>
    }
    else {
      mp->m_owner = NULL;
 8005392:	2300      	movs	r3, #0
 8005394:	60a3      	str	r3, [r4, #8]
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8005396:	bc30      	pop	{r4, r5}
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	200011e0 	.word	0x200011e0

080053a0 <chMtxUnlock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 80053a0:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 80053a2:	4b15      	ldr	r3, [pc, #84]	; (80053f8 <chMtxUnlock+0x58>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 80053a4:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 80053a6:	6998      	ldr	r0, [r3, #24]
 80053a8:	2320      	movs	r3, #32
 80053aa:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80053ae:	6825      	ldr	r5, [r4, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 80053b0:	68e3      	ldr	r3, [r4, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80053b2:	42ac      	cmp	r4, r5
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 80053b4:	6383      	str	r3, [r0, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80053b6:	d01c      	beq.n	80053f2 <chMtxUnlock+0x52>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 80053b8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 80053ba:	b14b      	cbz	r3, 80053d0 <chMtxUnlock+0x30>
 80053bc:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 80053be:	4293      	cmp	r3, r2
 80053c0:	d003      	beq.n	80053ca <chMtxUnlock+0x2a>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 80053c2:	6892      	ldr	r2, [r2, #8]
 80053c4:	4291      	cmp	r1, r2
 80053c6:	bf38      	it	cc
 80053c8:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 80053ca:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1f5      	bne.n	80053bc <chMtxUnlock+0x1c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80053d0:	682b      	ldr	r3, [r5, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 80053d2:	6baa      	ldr	r2, [r5, #56]	; 0x38
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 80053d4:	6081      	str	r1, [r0, #8]
 80053d6:	6023      	str	r3, [r4, #0]

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 80053d8:	4628      	mov	r0, r5
  tqp->p_next->p_prev = (thread_t *)tqp;
 80053da:	605c      	str	r4, [r3, #4]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 80053dc:	60e2      	str	r2, [r4, #12]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 80053de:	60a5      	str	r5, [r4, #8]
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
 80053e0:	63ac      	str	r4, [r5, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 80053e2:	f7ff ff2d 	bl	8005240 <chSchReadyI>
      chSchRescheduleS();
 80053e6:	f7ff fe13 	bl	8005010 <chSchRescheduleS>
 80053ea:	2300      	movs	r3, #0
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	bd38      	pop	{r3, r4, r5, pc}
    }
    else {
      mp->m_owner = NULL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60a3      	str	r3, [r4, #8]
 80053f6:	e7f8      	b.n	80053ea <chMtxUnlock+0x4a>
 80053f8:	200011e0 	.word	0x200011e0
 80053fc:	f3af 8000 	nop.w

08005400 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8005400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *ctp = currp;
 8005402:	4a2e      	ldr	r2, [pc, #184]	; (80054bc <chMtxLockS+0xbc>)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8005404:	6883      	ldr	r3, [r0, #8]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8005406:	6994      	ldr	r4, [r2, #24]
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8005408:	4605      	mov	r5, r0

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 800540a:	2b00      	cmp	r3, #0
 800540c:	d051      	beq.n	80054b2 <chMtxLockS+0xb2>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800540e:	68a1      	ldr	r1, [r4, #8]
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	4291      	cmp	r1, r2
 8005414:	d906      	bls.n	8005424 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8005416:	7f1a      	ldrb	r2, [r3, #28]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 8005418:	6099      	str	r1, [r3, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 800541a:	2a06      	cmp	r2, #6
 800541c:	d031      	beq.n	8005482 <chMtxLockS+0x82>
 800541e:	2a07      	cmp	r2, #7
 8005420:	d01c      	beq.n	800545c <chMtxLockS+0x5c>
 8005422:	b192      	cbz	r2, 800544a <chMtxLockS+0x4a>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8005424:	462b      	mov	r3, r5
  do {
    cp = cp->p_next;
 8005426:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8005428:	429d      	cmp	r5, r3
 800542a:	d003      	beq.n	8005434 <chMtxLockS+0x34>
 800542c:	6899      	ldr	r1, [r3, #8]
 800542e:	68a2      	ldr	r2, [r4, #8]
 8005430:	4291      	cmp	r1, r2
 8005432:	d2f8      	bcs.n	8005426 <chMtxLockS+0x26>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8005434:	685a      	ldr	r2, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8005436:	6023      	str	r3, [r4, #0]
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8005438:	2006      	movs	r0, #6
  tp->p_prev = cp->p_prev;
 800543a:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 800543c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800543e:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
 8005440:	6225      	str	r5, [r4, #32]
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
  }
}
 8005442:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8005446:	f7ff bea3 	b.w	8005190 <chSchGoSleepS>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800544a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800544e:	6011      	str	r1, [r2, #0]
  tp->p_next->p_prev = tp->p_prev;
 8005450:	6819      	ldr	r1, [r3, #0]
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 8005452:	4618      	mov	r0, r3
 8005454:	604a      	str	r2, [r1, #4]
 8005456:	f7ff fef3 	bl	8005240 <chSchReadyI>
 800545a:	e7e3      	b.n	8005424 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800545c:	6858      	ldr	r0, [r3, #4]
 800545e:	681a      	ldr	r2, [r3, #0]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 8005460:	6a1e      	ldr	r6, [r3, #32]
 8005462:	6002      	str	r2, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 8005464:	681f      	ldr	r7, [r3, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8005466:	4632      	mov	r2, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 8005468:	6078      	str	r0, [r7, #4]

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 800546a:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800546c:	4296      	cmp	r6, r2
 800546e:	d002      	beq.n	8005476 <chMtxLockS+0x76>
 8005470:	6890      	ldr	r0, [r2, #8]
 8005472:	4288      	cmp	r0, r1
 8005474:	d2f9      	bcs.n	800546a <chMtxLockS+0x6a>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8005476:	6851      	ldr	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8005478:	601a      	str	r2, [r3, #0]
  tp->p_prev = cp->p_prev;
 800547a:	6059      	str	r1, [r3, #4]
  tp->p_prev->p_next = tp;
 800547c:	600b      	str	r3, [r1, #0]
  cp->p_prev = tp;
 800547e:	6053      	str	r3, [r2, #4]
 8005480:	e7d0      	b.n	8005424 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8005482:	6858      	ldr	r0, [r3, #4]
 8005484:	681a      	ldr	r2, [r3, #0]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 8005486:	6a1e      	ldr	r6, [r3, #32]
 8005488:	6002      	str	r2, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 800548a:	681f      	ldr	r7, [r3, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 800548c:	4632      	mov	r2, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 800548e:	6078      	str	r0, [r7, #4]

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8005490:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8005492:	4296      	cmp	r6, r2
 8005494:	d002      	beq.n	800549c <chMtxLockS+0x9c>
 8005496:	6890      	ldr	r0, [r2, #8]
 8005498:	4288      	cmp	r0, r1
 800549a:	d2f9      	bcs.n	8005490 <chMtxLockS+0x90>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800549c:	6851      	ldr	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 800549e:	601a      	str	r2, [r3, #0]
  tp->p_prev = cp->p_prev;
 80054a0:	6059      	str	r1, [r3, #4]
  tp->p_prev->p_next = tp;
 80054a2:	600b      	str	r3, [r1, #0]
  cp->p_prev = tp;
 80054a4:	6053      	str	r3, [r2, #4]
          tp = tp->p_u.wtmtxp->m_owner;
 80054a6:	68b3      	ldr	r3, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 80054a8:	68a1      	ldr	r1, [r4, #8]
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	428a      	cmp	r2, r1
 80054ae:	d3b2      	bcc.n	8005416 <chMtxLockS+0x16>
 80054b0:	e7b8      	b.n	8005424 <chMtxLockS+0x24>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 80054b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 80054b4:	6084      	str	r4, [r0, #8]
    mp->m_next = ctp->p_mtxlist;
 80054b6:	60c3      	str	r3, [r0, #12]
    ctp->p_mtxlist = mp;
 80054b8:	63a0      	str	r0, [r4, #56]	; 0x38
 80054ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054bc:	200011e0 	.word	0x200011e0

080054c0 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 80054c0:	b508      	push	{r3, lr}
 80054c2:	2320      	movs	r3, #32
 80054c4:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxLockS(mp);
 80054c8:	f7ff ff9a 	bl	8005400 <chMtxLockS>
 80054cc:	2300      	movs	r3, #0
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	bd08      	pop	{r3, pc}
 80054d4:	f3af 8000 	nop.w
 80054d8:	f3af 8000 	nop.w
 80054dc:	f3af 8000 	nop.w

080054e0 <chHeapAlloc>:
 * @return              A pointer to the allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
 80054e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL) {
    heapp = &default_heap;
 80054e2:	4e22      	ldr	r6, [pc, #136]	; (800556c <chHeapAlloc+0x8c>)
 80054e4:	2800      	cmp	r0, #0
 80054e6:	bf18      	it	ne
 80054e8:	4606      	movne	r6, r0
  }

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
 80054ea:	f106 0710 	add.w	r7, r6, #16

  if (heapp == NULL) {
    heapp = &default_heap;
  }

  size = MEM_ALIGN_NEXT(size);
 80054ee:	3107      	adds	r1, #7
  qp = &heapp->h_free;

  H_LOCK(heapp);
 80054f0:	4638      	mov	r0, r7

  if (heapp == NULL) {
    heapp = &default_heap;
  }

  size = MEM_ALIGN_NEXT(size);
 80054f2:	f021 0507 	bic.w	r5, r1, #7
  qp = &heapp->h_free;
 80054f6:	f106 0408 	add.w	r4, r6, #8

  H_LOCK(heapp);
 80054fa:	f7ff ffe1 	bl	80054c0 <chMtxLock>
 80054fe:	e000      	b.n	8005502 <chHeapAlloc+0x22>
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 8005500:	461c      	mov	r4, r3

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	b30b      	cbz	r3, 800554a <chHeapAlloc+0x6a>
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	4295      	cmp	r5, r2
 800550a:	d8f9      	bhi.n	8005500 <chHeapAlloc+0x20>
      if (hp->h.size < (size + sizeof(union heap_header))) {
 800550c:	f105 0108 	add.w	r1, r5, #8
 8005510:	4291      	cmp	r1, r2
 8005512:	d817      	bhi.n	8005544 <chHeapAlloc+0x64>
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8005514:	f64f 7ef8 	movw	lr, #65528	; 0xfff8
 8005518:	f6cf 7eff 	movt	lr, #65535	; 0xffff
        qp->h.u.next = hp->h.u.next;
      }
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
 800551c:	eb03 0c01 	add.w	ip, r3, r1
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 8005520:	6818      	ldr	r0, [r3, #0]
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8005522:	ebc5 0e0e 	rsb	lr, r5, lr
 8005526:	4472      	add	r2, lr
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 8005528:	5058      	str	r0, [r3, r1]
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 800552a:	f8cc 2004 	str.w	r2, [ip, #4]
        qp->h.u.next = fp;
 800552e:	f8c4 c000 	str.w	ip, [r4]
        hp->h.size = size;
 8005532:	605d      	str	r5, [r3, #4]
      }
      hp->h.u.heap = heapp;
 8005534:	461c      	mov	r4, r3
      H_UNLOCK(heapp);
 8005536:	4638      	mov	r0, r7
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 8005538:	f844 6b08 	str.w	r6, [r4], #8
      H_UNLOCK(heapp);
 800553c:	f7ff ff30 	bl	80053a0 <chMtxUnlock>
      /*lint -restore*/
    }
  }

  return NULL;
}
 8005540:	4620      	mov	r0, r4
 8005542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hp->h.size >= size) {
      if (hp->h.size < (size + sizeof(union heap_header))) {
        /* Gets the whole block even if it is slightly bigger than the
           requested size because the fragment would be too small to be
           useful.*/
        qp->h.u.next = hp->h.u.next;
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	6022      	str	r2, [r4, #0]
 8005548:	e7f4      	b.n	8005534 <chHeapAlloc+0x54>
      return (void *)(hp + 1);
      /*lint -restore*/
    }
    qp = hp;
  }
  H_UNLOCK(heapp);
 800554a:	4638      	mov	r0, r7
 800554c:	f7ff ff28 	bl	80053a0 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider != NULL) {
 8005550:	6833      	ldr	r3, [r6, #0]
 8005552:	b14b      	cbz	r3, 8005568 <chHeapAlloc+0x88>
    hp = heapp->h_provider(size + sizeof(union heap_header));
 8005554:	f105 0008 	add.w	r0, r5, #8
 8005558:	4798      	blx	r3
    if (hp != NULL) {
 800555a:	b128      	cbz	r0, 8005568 <chHeapAlloc+0x88>
      hp->h.u.heap = heapp;
      hp->h.size = size;
      hp++;

      /*lint -save -e9087 [11.3] Safe cast.*/
      return (void *)hp;
 800555c:	f100 0408 	add.w	r4, r0, #8
  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider != NULL) {
    hp = heapp->h_provider(size + sizeof(union heap_header));
    if (hp != NULL) {
      hp->h.u.heap = heapp;
 8005560:	6006      	str	r6, [r0, #0]
      hp->h.size = size;
 8005562:	6045      	str	r5, [r0, #4]
      /*lint -restore*/
    }
  }

  return NULL;
}
 8005564:	4620      	mov	r0, r4
 8005566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return (void *)hp;
      /*lint -restore*/
    }
  }

  return NULL;
 8005568:	2400      	movs	r4, #0
 800556a:	e7e9      	b.n	8005540 <chHeapAlloc+0x60>
 800556c:	20001348 	.word	0x20001348

08005570 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= (cnt_t)0) {
 8005570:	6882      	ldr	r2, [r0, #8]
 8005572:	3201      	adds	r2, #1
 8005574:	2a00      	cmp	r2, #0
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 8005576:	4603      	mov	r3, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= (cnt_t)0) {
 8005578:	6082      	str	r2, [r0, #8]
 800557a:	dd00      	ble.n	800557e <chSemSignalI+0xe>
 800557c:	4770      	bx	lr
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800557e:	6802      	ldr	r2, [r0, #0]

  tqp->p_next = tp->p_next;
 8005580:	6811      	ldr	r1, [r2, #0]
 8005582:	6001      	str	r1, [r0, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8005584:	604b      	str	r3, [r1, #4]
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
 8005586:	4610      	mov	r0, r2

  if (++sp->s_cnt <= (cnt_t)0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
 8005588:	2300      	movs	r3, #0
 800558a:	6213      	str	r3, [r2, #32]
    (void) chSchReadyI(tp);
 800558c:	f7ff be58 	b.w	8005240 <chSchReadyI>

08005590 <chSemResetI>:
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @iclass
 */
void chSemResetI(semaphore_t *sp, cnt_t n) {
 8005590:	b570      	push	{r4, r5, r6, lr}
  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
 8005592:	6885      	ldr	r5, [r0, #8]
  sp->s_cnt = n;
 8005594:	6081      	str	r1, [r0, #8]
  while (++cnt <= (cnt_t)0) {
 8005596:	3501      	adds	r5, #1
 8005598:	2d00      	cmp	r5, #0
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @iclass
 */
void chSemResetI(semaphore_t *sp, cnt_t n) {
 800559a:	4604      	mov	r4, r0
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= (cnt_t)0) {
 800559c:	dc0b      	bgt.n	80055b6 <chSemResetI+0x26>
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 800559e:	f06f 0601 	mvn.w	r6, #1

  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_prev;
 80055a2:	6860      	ldr	r0, [r4, #4]

  tqp->p_prev = tp->p_prev;
 80055a4:	6843      	ldr	r3, [r0, #4]
 80055a6:	6063      	str	r3, [r4, #4]
  tqp->p_prev->p_next = (thread_t *)tqp;
 80055a8:	601c      	str	r4, [r3, #0]
 80055aa:	f7ff fe49 	bl	8005240 <chSchReadyI>
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= (cnt_t)0) {
 80055ae:	3501      	adds	r5, #1
 80055b0:	2d01      	cmp	r5, #1
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 80055b2:	6206      	str	r6, [r0, #32]
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= (cnt_t)0) {
 80055b4:	d1f5      	bne.n	80055a2 <chSemResetI+0x12>
 80055b6:	bd70      	pop	{r4, r5, r6, pc}
 80055b8:	f3af 8000 	nop.w
 80055bc:	f3af 8000 	nop.w

080055c0 <chSysIntegrityCheckI>:
  cnt_t n;

  chDbgCheckClassI();

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 80055c0:	07c2      	lsls	r2, r0, #31
 * @retval false        The test succeeded.
 * @retval true         Test failed.
 *
 * @iclass
 */
bool chSysIntegrityCheckI(unsigned testmask) {
 80055c2:	b410      	push	{r4}
  cnt_t n;

  chDbgCheckClassI();

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 80055c4:	d511      	bpl.n	80055ea <chSysIntegrityCheckI+0x2a>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
 80055c6:	4b20      	ldr	r3, [pc, #128]	; (8005648 <chSysIntegrityCheckI+0x88>)
 80055c8:	6819      	ldr	r1, [r3, #0]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 80055ca:	2200      	movs	r2, #0
 80055cc:	4299      	cmp	r1, r3
 80055ce:	d003      	beq.n	80055d8 <chSysIntegrityCheckI+0x18>
      n++;
      tp = tp->p_next;
 80055d0:	6809      	ldr	r1, [r1, #0]

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
      n++;
 80055d2:	3201      	adds	r2, #1
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 80055d4:	4299      	cmp	r1, r3
 80055d6:	d1fb      	bne.n	80055d0 <chSysIntegrityCheckI+0x10>
      n++;
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
 80055d8:	6859      	ldr	r1, [r3, #4]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 80055da:	4299      	cmp	r1, r3
 80055dc:	d003      	beq.n	80055e6 <chSysIntegrityCheckI+0x26>
      n--;
      tp = tp->p_prev;
 80055de:	6849      	ldr	r1, [r1, #4]
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
      n--;
 80055e0:	3a01      	subs	r2, #1
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 80055e2:	4299      	cmp	r1, r3
 80055e4:	d1fb      	bne.n	80055de <chSysIntegrityCheckI+0x1e>
      n--;
      tp = tp->p_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 80055e6:	2a00      	cmp	r2, #0
 80055e8:	d12c      	bne.n	8005644 <chSysIntegrityCheckI+0x84>
      return true;
    }
  }

  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 80055ea:	0783      	lsls	r3, r0, #30
 80055ec:	d512      	bpl.n	8005614 <chSysIntegrityCheckI+0x54>
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
 80055ee:	4b16      	ldr	r3, [pc, #88]	; (8005648 <chSysIntegrityCheckI+0x88>)
 80055f0:	461c      	mov	r4, r3
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80055f2:	2200      	movs	r2, #0
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
 80055f4:	f854 1f1c 	ldr.w	r1, [r4, #28]!
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80055f8:	42a1      	cmp	r1, r4
 80055fa:	d003      	beq.n	8005604 <chSysIntegrityCheckI+0x44>
      n++;
      vtp = vtp->vt_next;
 80055fc:	6809      	ldr	r1, [r1, #0]

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
      n++;
 80055fe:	3201      	adds	r2, #1
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8005600:	42a1      	cmp	r1, r4
 8005602:	d1fb      	bne.n	80055fc <chSysIntegrityCheckI+0x3c>
      n++;
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
 8005604:	6a1b      	ldr	r3, [r3, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8005606:	42a3      	cmp	r3, r4
 8005608:	d003      	beq.n	8005612 <chSysIntegrityCheckI+0x52>
      n--;
      vtp = vtp->vt_prev;
 800560a:	685b      	ldr	r3, [r3, #4]
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
      n--;
 800560c:	3a01      	subs	r2, #1
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800560e:	42a3      	cmp	r3, r4
 8005610:	d1fb      	bne.n	800560a <chSysIntegrityCheckI+0x4a>
      n--;
      vtp = vtp->vt_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8005612:	b9ba      	cbnz	r2, 8005644 <chSysIntegrityCheckI+0x84>
      return true;
    }
  }

#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 8005614:	f010 0004 	ands.w	r0, r0, #4
 8005618:	d012      	beq.n	8005640 <chSysIntegrityCheckI+0x80>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
 800561a:	4b0b      	ldr	r3, [pc, #44]	; (8005648 <chSysIntegrityCheckI+0x88>)
 800561c:	691a      	ldr	r2, [r3, #16]
    while (tp != (thread_t *)&ch.rlist) {
 800561e:	2000      	movs	r0, #0
 8005620:	429a      	cmp	r2, r3
 8005622:	d003      	beq.n	800562c <chSysIntegrityCheckI+0x6c>
      n++;
      tp = tp->p_newer;
 8005624:	6912      	ldr	r2, [r2, #16]

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
    while (tp != (thread_t *)&ch.rlist) {
      n++;
 8005626:	3001      	adds	r0, #1
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
    while (tp != (thread_t *)&ch.rlist) {
 8005628:	429a      	cmp	r2, r3
 800562a:	d1fb      	bne.n	8005624 <chSysIntegrityCheckI+0x64>
      n++;
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
 800562c:	695a      	ldr	r2, [r3, #20]
    while (tp != (thread_t *)&ch.rlist) {
 800562e:	429a      	cmp	r2, r3
 8005630:	d003      	beq.n	800563a <chSysIntegrityCheckI+0x7a>
      n--;
      tp = tp->p_older;
 8005632:	6952      	ldr	r2, [r2, #20]
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
      n--;
 8005634:	3801      	subs	r0, #1
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
 8005636:	429a      	cmp	r2, r3
 8005638:	d1fb      	bne.n	8005632 <chSysIntegrityCheckI+0x72>
      n--;
      tp = tp->p_older;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 800563a:	3000      	adds	r0, #0
 800563c:	bf18      	it	ne
 800563e:	2001      	movne	r0, #1
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
}
 8005640:	bc10      	pop	{r4}
 8005642:	4770      	bx	lr
      tp = tp->p_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
      return true;
 8005644:	2001      	movs	r0, #1
 8005646:	e7fb      	b.n	8005640 <chSysIntegrityCheckI+0x80>
 8005648:	200011e0 	.word	0x200011e0
 800564c:	f3af 8000 	nop.w

08005650 <chSysGetStatusAndLockX.part.1.4303>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005650:	f3ef 8305 	mrs	r3, IPSR
 8005654:	05db      	lsls	r3, r3, #23
 8005656:	0ddb      	lsrs	r3, r3, #23
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8005658:	b91b      	cbnz	r3, 8005662 <chSysGetStatusAndLockX.part.1.4303+0x12>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800565a:	2320      	movs	r3, #32
 800565c:	f383 8811 	msr	BASEPRI, r3
    else {
      chSysLock();
    }
  }
  return sts;
}
 8005660:	4770      	bx	lr
 8005662:	2320      	movs	r3, #32
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	f3af 8000 	nop.w

08005670 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8005670:	e7fe      	b.n	8005670 <BusFault_Handler>
 8005672:	bf00      	nop
 8005674:	f3af 8000 	nop.w
 8005678:	f3af 8000 	nop.w
 800567c:	f3af 8000 	nop.w

08005680 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAHB(0xFFFFFFFF);
 8005680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005684:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005688:	2200      	movs	r2, #0
 800568a:	f04f 31ff 	mov.w	r1, #4294967295
 800568e:	6a98      	ldr	r0, [r3, #40]	; 0x28
}

/*
 * Application entry point.
 */
int main(void) {
 8005690:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8005694:	6299      	str	r1, [r3, #40]	; 0x28
 8005696:	629a      	str	r2, [r3, #40]	; 0x28
  rccResetAPB1(0xFFFFFFFF);
 8005698:	6918      	ldr	r0, [r3, #16]
 800569a:	6119      	str	r1, [r3, #16]
 800569c:	611a      	str	r2, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 800569e:	68d8      	ldr	r0, [r3, #12]
 80056a0:	60d9      	str	r1, [r3, #12]
 80056a2:	60da      	str	r2, [r3, #12]

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 80056a4:	69d8      	ldr	r0, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80056a6:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80056aa:	f2c4 0100 	movt	r1, #16384	; 0x4000
  rccResetAHB(0xFFFFFFFF);
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 80056ae:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 80056b2:	61d8      	str	r0, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80056b4:	6808      	ldr	r0, [r1, #0]
 80056b6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80056ba:	6008      	str	r0, [r1, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL){
 80056bc:	6a19      	ldr	r1, [r3, #32]
 80056be:	f401 7140 	and.w	r1, r1, #768	; 0x300
 80056c2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 80056c6:	bf1e      	ittt	ne
 80056c8:	f44f 3180 	movne.w	r1, #65536	; 0x10000
 80056cc:	6219      	strne	r1, [r3, #32]
    RCC->BDCR = 0;
 80056ce:	621a      	strne	r2, [r3, #32]
#endif

#if STM32_RTCSEL != STM32_RTCSEL_NOCLOCK
  /* If the backup domain hasn't been initialized yet then proceed with
     initialization.*/
  if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 80056d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80056d8:	b08d      	sub	sp, #52	; 0x34
 80056da:	6a1a      	ldr	r2, [r3, #32]
 80056dc:	0412      	lsls	r2, r2, #16
 80056de:	d407      	bmi.n	80056f0 <main+0x70>
    /* Selects clock source.*/
    RCC->BDCR |= STM32_RTCSEL;
 80056e0:	6a1a      	ldr	r2, [r3, #32]
 80056e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056e6:	621a      	str	r2, [r3, #32]

    /* RTC clock enabled.*/
    RCC->BDCR |= RCC_BDCR_RTCEN;
 80056e8:	6a1a      	ldr	r2, [r3, #32]
 80056ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056ee:	621a      	str	r2, [r3, #32]
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 80056f0:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 80056f4:	f2c4 0802 	movt	r8, #16386	; 0x4002

#if STM32_HAS_USB
  /* USB IRQ relocated to not conflict with CAN.*/
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_USB_IT_RMP;
 80056f8:	2300      	movs	r3, #0
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 80056fa:	f8d8 2018 	ldr.w	r2, [r8, #24]
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 80056fe:	4dc5      	ldr	r5, [pc, #788]	; (8005a14 <main+0x394>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005700:	4fc5      	ldr	r7, [pc, #788]	; (8005a18 <main+0x398>)

#if STM32_HAS_USB
  /* USB IRQ relocated to not conflict with CAN.*/
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_USB_IT_RMP;
 8005702:	f2c4 0301 	movt	r3, #16385	; 0x4001
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8005706:	f042 0201 	orr.w	r2, r2, #1
 800570a:	f8c8 2018 	str.w	r2, [r8, #24]

#if STM32_HAS_USB
  /* USB IRQ relocated to not conflict with CAN.*/
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_USB_IT_RMP;
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	f042 0220 	orr.w	r2, r2, #32
 8005714:	601a      	str	r2, [r3, #0]
  rccEnableAHB(AHB_EN_MASK, TRUE);
  RCC->AHBLPENR |= AHB_LPEN_MASK;
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
 8005716:	f8d8 4014 	ldr.w	r4, [r8, #20]
 800571a:	9504      	str	r5, [sp, #16]
 800571c:	f444 0ebc 	orr.w	lr, r4, #6160384	; 0x5e0000
 8005720:	f8c8 e014 	str.w	lr, [r8, #20]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005724:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
 8005728:	2600      	movs	r6, #0
  gpiop->OSPEEDR = config->ospeedr;
 800572a:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
  gpiop->PUPDR   = config->pupdr;
 800572e:	f245 5a05 	movw	sl, #21765	; 0x5505
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005732:	f8ce 6004 	str.w	r6, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8005736:	f2c6 5a55 	movt	sl, #25941	; 0x6555
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 800573a:	f46f 6e0a 	mvn.w	lr, #2208	; 0x8a0
 800573e:	f8c5 e008 	str.w	lr, [r5, #8]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005742:	f44f 6080 	mov.w	r0, #1024	; 0x400
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8005746:	f8c5 a00c 	str.w	sl, [r5, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 800574a:	f04f 09a0 	mov.w	r9, #160	; 0xa0
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 800574e:	f64f 7adf 	movw	sl, #65503	; 0xffdf
 8005752:	f8c5 a014 	str.w	sl, [r5, #20]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005756:	f6c4 0000 	movt	r0, #18432	; 0x4800
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 800575a:	f6c2 0900 	movt	r9, #10240	; 0x2800

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 800575e:	f44f 4aee 	mov.w	sl, #30464	; 0x7700
 8005762:	f8c5 a020 	str.w	sl, [r5, #32]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005766:	f44f 6100 	mov.w	r1, #2048	; 0x800
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 800576a:	626e      	str	r6, [r5, #36]	; 0x24

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 800576c:	f245 5c55 	movw	ip, #21845	; 0x5555
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8005770:	f8c5 9000 	str.w	r9, [r5]
 8005774:	f04f 0b80 	mov.w	fp, #128	; 0x80
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8005778:	f04f 35ff 	mov.w	r5, #4294967295
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800577c:	6046      	str	r6, [r0, #4]
 800577e:	f6c4 0100 	movt	r1, #18432	; 0x4800
  gpiop->OSPEEDR = config->ospeedr;
 8005782:	6085      	str	r5, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8005784:	f2c5 1c55 	movt	ip, #20821	; 0x5155
  gpiop->ODR     = config->odr;
 8005788:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 800578c:	f2c0 4b00 	movt	fp, #1024	; 0x400
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8005790:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8005794:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8005798:	f8c0 c00c 	str.w	ip, [r0, #12]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800579c:	f6c4 0200 	movt	r2, #18432	; 0x4800
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 80057a0:	6145      	str	r5, [r0, #20]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80057a2:	f6c4 0300 	movt	r3, #18432	; 0x4800
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 80057a6:	6206      	str	r6, [r0, #32]
  gpiop->AFRH    = config->afrh;
 80057a8:	6246      	str	r6, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80057aa:	f8c0 b000 	str.w	fp, [r0]
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 80057ae:	f04f 30ff 	mov.w	r0, #4294967295
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80057b2:	604e      	str	r6, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80057b4:	6088      	str	r0, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 80057b6:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->ODR     = config->odr;
 80057ba:	614d      	str	r5, [r1, #20]
  gpiop->AFRL    = config->afrl;
 80057bc:	620e      	str	r6, [r1, #32]
  gpiop->AFRH    = config->afrh;
 80057be:	624e      	str	r6, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80057c0:	600e      	str	r6, [r1, #0]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 80057c2:	f04f 3155 	mov.w	r1, #1431655765	; 0x55555555
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80057c6:	6056      	str	r6, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80057c8:	6090      	str	r0, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 80057ca:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 80057cc:	6155      	str	r5, [r2, #20]
  gpiop->AFRL    = config->afrl;
 80057ce:	6216      	str	r6, [r2, #32]
  gpiop->AFRH    = config->afrh;
 80057d0:	6256      	str	r6, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80057d2:	6016      	str	r6, [r2, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80057d4:	605e      	str	r6, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80057d6:	6098      	str	r0, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 80057d8:	60d9      	str	r1, [r3, #12]
  gpiop->ODR     = config->odr;
 80057da:	615d      	str	r5, [r3, #20]
  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 80057dc:	f241 1560 	movw	r5, #4448	; 0x1160
 80057e0:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80057e4:	4628      	mov	r0, r5
 80057e6:	f100 0b30 	add.w	fp, r0, #48	; 0x30
#endif
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 80057ea:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 80057ee:	f2c4 0000 	movt	r0, #16384	; 0x4000
  gpiop->AFRL    = config->afrl;
 80057f2:	621e      	str	r6, [r3, #32]
 80057f4:	9a04      	ldr	r2, [sp, #16]
  gpiop->AFRH    = config->afrh;
 80057f6:	625e      	str	r6, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80057f8:	601e      	str	r6, [r3, #0]
 80057fa:	9005      	str	r0, [sp, #20]
 80057fc:	4b87      	ldr	r3, [pc, #540]	; (8005a1c <main+0x39c>)
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 80057fe:	f241 1060 	movw	r0, #4448	; 0x1160
 8005802:	f2c2 0000 	movt	r0, #8192	; 0x2000
  SD2.clock = STM32_USART2CLK;
 8005806:	f44f 5e58 	mov.w	lr, #13824	; 0x3600
 800580a:	f842 3b04 	str.w	r3, [r2], #4
 800580e:	f2c0 1e6e 	movt	lr, #366	; 0x16e
 8005812:	f8c0 e078 	str.w	lr, [r0, #120]	; 0x78
 8005816:	f241 1e60 	movw	lr, #4448	; 0x1160
 800581a:	f2c2 0e00 	movt	lr, #8192	; 0x2000
 800581e:	9204      	str	r2, [sp, #16]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8005820:	2110      	movs	r1, #16
  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8005822:	f105 0364 	add.w	r3, r5, #100	; 0x64
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8005826:	f100 0c74 	add.w	ip, r0, #116	; 0x74
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800582a:	6146      	str	r6, [r0, #20]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800582c:	6381      	str	r1, [r0, #56]	; 0x38
 800582e:	9804      	ldr	r0, [sp, #16]
  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8005830:	f8ce 301c 	str.w	r3, [lr, #28]
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8005834:	f8ce 303c 	str.w	r3, [lr, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8005838:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
  oqp->q_wrptr   = bp;
 800583c:	f8ce 3044 	str.w	r3, [lr, #68]	; 0x44

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8005840:	f44f 4461 	mov.w	r4, #57600	; 0xe100
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8005844:	4b76      	ldr	r3, [pc, #472]	; (8005a20 <main+0x3a0>)
 8005846:	f8ce 0004 	str.w	r0, [lr, #4]
 800584a:	f2ce 0400 	movt	r4, #57344	; 0xe000
#endif
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 800584e:	9805      	ldr	r0, [sp, #20]
 8005850:	f8ce 304c 	str.w	r3, [lr, #76]	; 0x4c
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8005854:	f04f 0901 	mov.w	r9, #1
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005858:	f04f 0a40 	mov.w	sl, #64	; 0x40
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 800585c:	f105 0254 	add.w	r2, r5, #84	; 0x54

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8005860:	23c0      	movs	r3, #192	; 0xc0
 8005862:	f105 050c 	add.w	r5, r5, #12
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8005866:	f8ce c040 	str.w	ip, [lr, #64]	; 0x40
 800586a:	f8ce 500c 	str.w	r5, [lr, #12]
  tqp->p_prev = (thread_t *)tqp;
 800586e:	f8ce 5010 	str.w	r5, [lr, #16]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8005872:	f8ce 2018 	str.w	r2, [lr, #24]
  iqp->q_rdptr   = bp;
 8005876:	f8ce 2024 	str.w	r2, [lr, #36]	; 0x24
  iqp->q_wrptr   = bp;
 800587a:	f8ce 2020 	str.w	r2, [lr, #32]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800587e:	f8ce b030 	str.w	fp, [lr, #48]	; 0x30
  tqp->p_prev = (thread_t *)tqp;
 8005882:	f8ce b034 	str.w	fp, [lr, #52]	; 0x34
 8005886:	f8ce 0074 	str.w	r0, [lr, #116]	; 0x74
 800588a:	f88e 9008 	strb.w	r9, [lr, #8]
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 800588e:	f8ce 6028 	str.w	r6, [lr, #40]	; 0x28
  iqp->q_link    = link;
 8005892:	f8ce e02c 	str.w	lr, [lr, #44]	; 0x2c
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8005896:	f8ce e050 	str.w	lr, [lr, #80]	; 0x50
 800589a:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800589e:	f8c4 a184 	str.w	sl, [r4, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80058a2:	f8c4 a004 	str.w	sl, [r4, #4]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80058a6:	f8d8 301c 	ldr.w	r3, [r8, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80058aa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80058ae:	f2ce 0004 	movt	r0, #57348	; 0xe004

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80058b2:	ea43 0309 	orr.w	r3, r3, r9
 80058b6:	f8c8 301c 	str.w	r3, [r8, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80058ba:	6885      	ldr	r5, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80058bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80058c0:	ea45 0e09 	orr.w	lr, r5, r9
 80058c4:	f8c0 e008 	str.w	lr, [r0, #8]
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 80058c8:	f44f 426d 	mov.w	r2, #60672	; 0xed00

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80058cc:	f241 20bf 	movw	r0, #4799	; 0x12bf
 80058d0:	6298      	str	r0, [r3, #40]	; 0x28
 80058d2:	f2ce 0200 	movt	r2, #57344	; 0xe000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80058d6:	f04f 30ff 	mov.w	r0, #4294967295
 80058da:	62d8      	str	r0, [r3, #44]	; 0x2c
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80058dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  STM32_ST_TIM->CCMR1  = 0;
 80058e0:	619e      	str	r6, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 80058e2:	635e      	str	r6, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 80058e4:	60de      	str	r6, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 80058e6:	605e      	str	r6, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80058e8:	f8c3 9014 	str.w	r9, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80058ec:	f8c3 9000 	str.w	r9, [r3]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80058f0:	2380      	movs	r3, #128	; 0x80
 80058f2:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80058f6:	f8c4 5180 	str.w	r5, [r4, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80058fa:	6025      	str	r5, [r4, #0]
 80058fc:	6096      	str	r6, [r2, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058fe:	68d0      	ldr	r0, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8005900:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 8005904:	f44f 7340 	mov.w	r3, #768	; 0x300
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8005908:	4004      	ands	r4, r0
  reg_value  =  (reg_value                                   |
 800590a:	f2c0 53fa 	movt	r3, #1530	; 0x5fa

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800590e:	f64e 50f0 	movw	r0, #60912	; 0xedf0
 8005912:	f2ce 0000 	movt	r0, #57344	; 0xe000
 8005916:	4323      	orrs	r3, r4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8005918:	60d3      	str	r3, [r2, #12]
 800591a:	68c4      	ldr	r4, [r0, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800591c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005920:	f2ce 0300 	movt	r3, #57344	; 0xe000

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005924:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 8005928:	60c4      	str	r4, [r0, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800592a:	681d      	ldr	r5, [r3, #0]
 800592c:	ea45 0509 	orr.w	r5, r5, r9
 8005930:	601d      	str	r5, [r3, #0]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8005932:	f107 041c 	add.w	r4, r7, #28
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005936:	77d1      	strb	r1, [r2, #31]
 8005938:	f04f 0b20 	mov.w	fp, #32
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800593c:	f04f 31ff 	mov.w	r1, #4294967295
 8005940:	f882 b022 	strb.w	fp, [r2, #34]	; 0x22
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8005944:	a806      	add	r0, sp, #24
 8005946:	6279      	str	r1, [r7, #36]	; 0x24
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8005948:	9106      	str	r1, [sp, #24]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800594a:	61fc      	str	r4, [r7, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 800594c:	623c      	str	r4, [r7, #32]
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800594e:	2500      	movs	r5, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005950:	603f      	str	r7, [r7, #0]
 8005952:	2400      	movs	r4, #0
  tqp->p_prev = (thread_t *)tqp;
 8005954:	607f      	str	r7, [r7, #4]
 8005956:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 800595a:	60be      	str	r6, [r7, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 800595c:	613f      	str	r7, [r7, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 800595e:	617f      	str	r7, [r7, #20]
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 8005960:	62be      	str	r6, [r7, #40]	; 0x28
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8005962:	677e      	str	r6, [r7, #116]	; 0x74
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8005964:	9607      	str	r6, [sp, #28]
  tmp->last       = (rtcnt_t)0;
 8005966:	9608      	str	r6, [sp, #32]
  tmp->n          = (ucnt_t)0;
 8005968:	9609      	str	r6, [sp, #36]	; 0x24
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800596a:	f7ff fac9 	bl	8004f00 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 800596e:	a806      	add	r0, sp, #24
 8005970:	f7ff fa9e 	bl	8004eb0 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8005974:	4a2b      	ldr	r2, [pc, #172]	; (8005a24 <main+0x3a4>)
  ch.tm.offset = tm.last;
 8005976:	9b08      	ldr	r3, [sp, #32]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8005978:	6979      	ldr	r1, [r7, #20]
 800597a:	677b      	str	r3, [r7, #116]	; 0x74
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800597c:	f102 0010 	add.w	r0, r2, #16
 8005980:	f107 0330 	add.w	r3, r7, #48	; 0x30
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8005984:	f107 0454 	add.w	r4, r7, #84	; 0x54
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8005988:	6196      	str	r6, [r2, #24]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800598a:	6110      	str	r0, [r2, #16]
  tqp->p_prev = (thread_t *)tqp;
 800598c:	6150      	str	r0, [r2, #20]
 800598e:	643f      	str	r7, [r7, #64]	; 0x40
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005990:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8005994:	610b      	str	r3, [r1, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8005996:	657c      	str	r4, [r7, #84]	; 0x54
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8005998:	4c23      	ldr	r4, [pc, #140]	; (8005a28 <main+0x3a8>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800599a:	65b8      	str	r0, [r7, #88]	; 0x58
  tqp->p_prev = (thread_t *)tqp;
 800599c:	65f8      	str	r0, [r7, #92]	; 0x5c
 800599e:	4823      	ldr	r0, [pc, #140]	; (8005a2c <main+0x3ac>)
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 80059a0:	61bb      	str	r3, [r7, #24]
 80059a2:	f024 0407 	bic.w	r4, r4, #7
 80059a6:	6004      	str	r4, [r0, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80059a8:	4c21      	ldr	r4, [pc, #132]	; (8005a30 <main+0x3b0>)
 80059aa:	4822      	ldr	r0, [pc, #136]	; (8005a34 <main+0x3b4>)
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80059ac:	64be      	str	r6, [r7, #72]	; 0x48
 80059ae:	f024 0407 	bic.w	r4, r4, #7
 80059b2:	6004      	str	r4, [r0, #0]
 80059b4:	4820      	ldr	r0, [pc, #128]	; (8005a38 <main+0x3b8>)
  default_heap.h_free.h.u.next = NULL;
 80059b6:	6096      	str	r6, [r2, #8]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 80059b8:	6010      	str	r0, [r2, #0]
  default_heap.h_free.h.u.next = NULL;
  default_heap.h_free.h.size = 0;
 80059ba:	60d6      	str	r6, [r2, #12]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80059bc:	f8c7 a038 	str.w	sl, [r7, #56]	; 0x38
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80059c0:	f887 604d 	strb.w	r6, [r7, #77]	; 0x4d
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80059c4:	f8c7 a06c 	str.w	sl, [r7, #108]	; 0x6c
  tp->p_mtxlist = NULL;
 80059c8:	66be      	str	r6, [r7, #104]	; 0x68
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80059ca:	667e      	str	r6, [r7, #100]	; 0x64
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80059cc:	f887 904e 	strb.w	r9, [r7, #78]	; 0x4e
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80059d0:	6479      	str	r1, [r7, #68]	; 0x44
 80059d2:	617b      	str	r3, [r7, #20]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 80059d4:	f887 904c 	strb.w	r9, [r7, #76]	; 0x4c
 80059d8:	f386 8811 	msr	BASEPRI, r6
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80059dc:	b662      	cpsie	i
 80059de:	4917      	ldr	r1, [pc, #92]	; (8005a3c <main+0x3bc>)
 80059e0:	69ba      	ldr	r2, [r7, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 80059e2:	4b17      	ldr	r3, [pc, #92]	; (8005a40 <main+0x3c0>)
 80059e4:	6191      	str	r1, [r2, #24]
 80059e6:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80059ea:	9600      	str	r6, [sp, #0]
 80059ec:	21d8      	movs	r1, #216	; 0xd8
 80059ee:	464a      	mov	r2, r9
 80059f0:	f7ff fb8e 	bl	8005110 <chThdCreateStatic>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 80059f4:	4b13      	ldr	r3, [pc, #76]	; (8005a44 <main+0x3c4>)
 80059f6:	6183      	str	r3, [r0, #24]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80059f8:	f38b 8811 	msr	BASEPRI, fp
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 80059fc:	f241 1260 	movw	r2, #4448	; 0x1160
 8005a00:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005a04:	7a13      	ldrb	r3, [r2, #8]
 8005a06:	454b      	cmp	r3, r9
      rccEnableUSART1(FALSE);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(FALSE);
 8005a08:	bf04      	itt	eq
 8005a0a:	f8d8 301c 	ldreq.w	r3, [r8, #28]
 8005a0e:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8005a12:	e019      	b.n	8005a48 <main+0x3c8>
 8005a14:	20001160 	.word	0x20001160
 8005a18:	200011e0 	.word	0x200011e0
 8005a1c:	08006aa0 	.word	0x08006aa0
 8005a20:	08003511 	.word	0x08003511
 8005a24:	20001348 	.word	0x20001348
 8005a28:	2000137f 	.word	0x2000137f
 8005a2c:	20001374 	.word	0x20001374
 8005a30:	20004000 	.word	0x20004000
 8005a34:	20001368 	.word	0x20001368
 8005a38:	08004dd1 	.word	0x08004dd1
 8005a3c:	08006060 	.word	0x08006060
 8005a40:	08004e71 	.word	0x08004e71
 8005a44:	08006210 	.word	0x08006210
 8005a48:	bf08      	it	eq
 8005a4a:	f8c8 301c 	streq.w	r3, [r8, #28]
  {
      u->BRR = (uint32_t)( ( (uint64_t)sdp->clock * 256 ) / config->speed);
  }
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);
 8005a4e:	f241 1360 	movw	r3, #4448	; 0x1160
 8005a52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a56:	f248 12b5 	movw	r2, #33205	; 0x81b5
 8005a5a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005a5c:	f6c1 324e 	movt	r2, #6990	; 0x1b4e
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 8005a60:	461d      	mov	r5, r3
  {
      u->BRR = (uint32_t)( ( (uint64_t)sdp->clock * 256 ) / config->speed);
  }
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);
 8005a62:	fba2 6201 	umull	r6, r2, r2, r1
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 8005a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  {
      u->BRR = (uint32_t)( ( (uint64_t)sdp->clock * 256 ) / config->speed);
  }
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);
 8005a68:	0b12      	lsrs	r2, r2, #12

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8005a6a:	f244 0140 	movw	r1, #16448	; 0x4040
  {
      u->BRR = (uint32_t)( ( (uint64_t)sdp->clock * 256 ) / config->speed);
  }
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);
 8005a6e:	60da      	str	r2, [r3, #12]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8005a70:	6059      	str	r1, [r3, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8005a72:	2101      	movs	r1, #1
 8005a74:	6099      	str	r1, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8005a76:	f501 7196 	add.w	r1, r1, #300	; 0x12c
 8005a7a:	6019      	str	r1, [r3, #0]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->ICR = 0xFFFFFFFFU;
 8005a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8005a80:	6219      	str	r1, [r3, #32]

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8005a82:	2302      	movs	r3, #2
 8005a84:	722b      	strb	r3, [r5, #8]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f382 8811 	msr	BASEPRI, r2
  sdStart(&SD2, NULL);

  /*
   * Creates the blinker thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 8005a8c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005a90:	9200      	str	r2, [sp, #0]
 8005a92:	4b06      	ldr	r3, [pc, #24]	; (8005aac <main+0x42c>)
 8005a94:	4806      	ldr	r0, [pc, #24]	; (8005ab0 <main+0x430>)
 8005a96:	4c07      	ldr	r4, [pc, #28]	; (8005ab4 <main+0x434>)
 8005a98:	4e07      	ldr	r6, [pc, #28]	; (8005ab8 <main+0x438>)
 8005a9a:	f8df a024 	ldr.w	sl, [pc, #36]	; 8005ac0 <main+0x440>
 8005a9e:	f8df b024 	ldr.w	fp, [pc, #36]	; 8005ac4 <main+0x444>
 8005aa2:	4f06      	ldr	r7, [pc, #24]	; (8005abc <main+0x43c>)
 8005aa4:	2240      	movs	r2, #64	; 0x40
 8005aa6:	f7ff fb33 	bl	8005110 <chThdCreateStatic>
 8005aaa:	e011      	b.n	8005ad0 <main+0x450>
 8005aac:	080018f1 	.word	0x080018f1
 8005ab0:	20001010 	.word	0x20001010
 8005ab4:	20001370 	.word	0x20001370
 8005ab8:	2000136c 	.word	0x2000136c
 8005abc:	20001330 	.word	0x20001330
 8005ac0:	20001000 	.word	0x20001000
 8005ac4:	20001344 	.word	0x20001344
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (!palReadPad(GPIOC, GPIOC_BUTTON))
      TestThread(&SD2);
    chThdSleepMilliseconds(500);
 8005ac8:	f241 3088 	movw	r0, #5000	; 0x1388
 8005acc:	f7fb fcc0 	bl	8001450 <chThdSleep>
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (!palReadPad(GPIOC, GPIOC_BUTTON))
 8005ad0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ad4:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	049b      	lsls	r3, r3, #18
 8005adc:	d4f4      	bmi.n	8005ac8 <main+0x448>
 * @param[in] p         pointer to a @p BaseChannel object for test output
 */
void TestThread(void *p) {
  int i, j;

  chp = p;
 8005ade:	f241 1160 	movw	r1, #4448	; 0x1160
 8005ae2:	f2c2 0100 	movt	r1, #8192	; 0x2000
  test_println("");
 8005ae6:	489c      	ldr	r0, [pc, #624]	; (8005d58 <main+0x6d8>)
 * @param[in] p         pointer to a @p BaseChannel object for test output
 */
void TestThread(void *p) {
  int i, j;

  chp = p;
 8005ae8:	6021      	str	r1, [r4, #0]
  test_println("");
 8005aea:	f7fd ff31 	bl	8003950 <test_println>
  test_println("*** ChibiOS/RT test suite");
 8005aee:	489b      	ldr	r0, [pc, #620]	; (8005d5c <main+0x6dc>)
 8005af0:	4d9b      	ldr	r5, [pc, #620]	; (8005d60 <main+0x6e0>)
 8005af2:	f7fd ff2d 	bl	8003950 <test_println>
  test_println("***");
 8005af6:	489b      	ldr	r0, [pc, #620]	; (8005d64 <main+0x6e4>)
 8005af8:	f7fd ff2a 	bl	8003950 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005afc:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 8005afe:	6820      	ldr	r0, [r4, #0]
 8005b00:	6803      	ldr	r3, [r0, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005b06:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8005b0a:	2900      	cmp	r1, #0
 8005b0c:	d1f7      	bne.n	8005afe <main+0x47e>
  chp = p;
  test_println("");
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
 8005b0e:	4896      	ldr	r0, [pc, #600]	; (8005d68 <main+0x6e8>)
 8005b10:	4d96      	ldr	r5, [pc, #600]	; (8005d6c <main+0x6ec>)
 8005b12:	f7fd ff1d 	bl	8003950 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005b16:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 8005b18:	6820      	ldr	r0, [r4, #0]
 8005b1a:	6803      	ldr	r3, [r0, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005b20:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8005b24:	2900      	cmp	r1, #0
 8005b26:	d1f7      	bne.n	8005b18 <main+0x498>
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 8005b28:	4891      	ldr	r0, [pc, #580]	; (8005d70 <main+0x6f0>)
 8005b2a:	4d92      	ldr	r5, [pc, #584]	; (8005d74 <main+0x6f4>)
 8005b2c:	f7fd ff10 	bl	8003950 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005b30:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 8005b32:	6820      	ldr	r0, [r4, #0]
 8005b34:	6803      	ldr	r3, [r0, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005b3a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8005b3e:	2900      	cmp	r1, #0
 8005b40:	d1f7      	bne.n	8005b32 <main+0x4b2>
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
 8005b42:	488d      	ldr	r0, [pc, #564]	; (8005d78 <main+0x6f8>)
 8005b44:	4d8d      	ldr	r5, [pc, #564]	; (8005d7c <main+0x6fc>)
 8005b46:	f7fd ff03 	bl	8003950 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005b4a:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 8005b4c:	6820      	ldr	r0, [r4, #0]
 8005b4e:	6803      	ldr	r3, [r0, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005b54:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8005b58:	2900      	cmp	r1, #0
 8005b5a:	d1f7      	bne.n	8005b4c <main+0x4cc>
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
 8005b5c:	4888      	ldr	r0, [pc, #544]	; (8005d80 <main+0x700>)
 8005b5e:	4d89      	ldr	r5, [pc, #548]	; (8005d84 <main+0x704>)
 8005b60:	f7fd fef6 	bl	8003950 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005b64:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 8005b66:	6820      	ldr	r0, [r4, #0]
 8005b68:	6803      	ldr	r3, [r0, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005b6e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8005b72:	2900      	cmp	r1, #0
 8005b74:	d1f7      	bne.n	8005b66 <main+0x4e6>
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
#ifdef PORT_CORE_VARIANT_NAME
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
 8005b76:	4884      	ldr	r0, [pc, #528]	; (8005d88 <main+0x708>)
 8005b78:	4d84      	ldr	r5, [pc, #528]	; (8005d8c <main+0x70c>)
 8005b7a:	f7fd fee9 	bl	8003950 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005b7e:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 8005b80:	6820      	ldr	r0, [r4, #0]
 8005b82:	6803      	ldr	r3, [r0, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005b88:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8005b8c:	2900      	cmp	r1, #0
 8005b8e:	d1f7      	bne.n	8005b80 <main+0x500>
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
#endif
#ifdef PORT_INFO
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
 8005b90:	487f      	ldr	r0, [pc, #508]	; (8005d90 <main+0x710>)
 8005b92:	4d80      	ldr	r5, [pc, #512]	; (8005d94 <main+0x714>)
 8005b94:	f7fd fedc 	bl	8003950 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005b98:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 8005b9a:	6820      	ldr	r0, [r4, #0]
 8005b9c:	6803      	ldr	r3, [r0, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005ba2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8005ba6:	2900      	cmp	r1, #0
 8005ba8:	d1f7      	bne.n	8005b9a <main+0x51a>
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
#endif
#ifdef PLATFORM_NAME
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 8005baa:	487b      	ldr	r0, [pc, #492]	; (8005d98 <main+0x718>)
 8005bac:	4d7b      	ldr	r5, [pc, #492]	; (8005d9c <main+0x71c>)
 8005bae:	f7fd fecf 	bl	8003950 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005bb2:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 8005bb4:	6820      	ldr	r0, [r4, #0]
 8005bb6:	6803      	ldr	r3, [r0, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005bbc:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8005bc0:	2900      	cmp	r1, #0
 8005bc2:	d1f7      	bne.n	8005bb4 <main+0x534>
 8005bc4:	4a76      	ldr	r2, [pc, #472]	; (8005da0 <main+0x720>)
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
#endif
#ifdef BOARD_NAME
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8005bc6:	4877      	ldr	r0, [pc, #476]	; (8005da4 <main+0x724>)
 8005bc8:	9103      	str	r1, [sp, #12]
 8005bca:	9205      	str	r2, [sp, #20]
 8005bcc:	f7fd fec0 	bl	8003950 <test_println>
#endif
  test_println("");
 8005bd0:	4861      	ldr	r0, [pc, #388]	; (8005d58 <main+0x6d8>)
 8005bd2:	f7fd febd 	bl	8003950 <test_println>

  test_global_fail = FALSE;
 8005bd6:	f241 135c 	movw	r3, #4444	; 0x115c
  i = 0;
 8005bda:	9903      	ldr	r1, [sp, #12]
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
#endif
  test_println("");

  test_global_fail = FALSE;
 8005bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
  i = 0;
 8005be0:	9104      	str	r1, [sp, #16]
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
#endif
  test_println("");

  test_global_fail = FALSE;
 8005be2:	7019      	strb	r1, [r3, #0]
 8005be4:	4b70      	ldr	r3, [pc, #448]	; (8005da8 <main+0x728>)
 8005be6:	9d04      	ldr	r5, [sp, #16]
 8005be8:	3501      	adds	r5, #1
 8005bea:	9504      	str	r5, [sp, #16]
 8005bec:	4698      	mov	r8, r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005bee:	f04f 0900 	mov.w	r9, #0

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 8005bf2:	f858 3b04 	ldr.w	r3, [r8], #4
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 8085 	beq.w	8005d06 <main+0x686>
 8005bfc:	4d6b      	ldr	r5, [pc, #428]	; (8005dac <main+0x72c>)
      print_line();
 8005bfe:	f7fd ff07 	bl	8003a10 <print_line.7771>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005c02:	212d      	movs	r1, #45	; 0x2d
    chSequentialStreamPut(chp, *msgp++);
 8005c04:	6820      	ldr	r0, [r4, #0]
 8005c06:	6803      	ldr	r3, [r0, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005c0c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8005c10:	2900      	cmp	r1, #0
 8005c12:	d1f7      	bne.n	8005c04 <main+0x584>
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
 8005c14:	9804      	ldr	r0, [sp, #16]
 8005c16:	4d66      	ldr	r5, [pc, #408]	; (8005db0 <main+0x730>)
 8005c18:	f7fd fec2 	bl	80039a0 <test_printn>
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8005c1c:	4b65      	ldr	r3, [pc, #404]	; (8005db4 <main+0x734>)
 8005c1e:	6818      	ldr	r0, [r3, #0]
 8005c20:	6803      	ldr	r3, [r0, #0]
 8005c22:	212e      	movs	r1, #46	; 0x2e
 8005c24:	689b      	ldr	r3, [r3, #8]
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8005c26:	f109 0901 	add.w	r9, r9, #1
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8005c2a:	4798      	blx	r3
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8005c2c:	4648      	mov	r0, r9
 8005c2e:	f7fd feb7 	bl	80039a0 <test_printn>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005c32:	2120      	movs	r1, #32
    chSequentialStreamPut(chp, *msgp++);
 8005c34:	6820      	ldr	r0, [r4, #0]
 8005c36:	6803      	ldr	r3, [r0, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005c3c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8005c40:	2900      	cmp	r1, #0
 8005c42:	d1f7      	bne.n	8005c34 <main+0x5b4>
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
 8005c44:	f858 3c04 	ldr.w	r3, [r8, #-4]
 8005c48:	681d      	ldr	r5, [r3, #0]
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005c4a:	7829      	ldrb	r1, [r5, #0]
 8005c4c:	b139      	cbz	r1, 8005c5e <main+0x5de>
    chSequentialStreamPut(chp, *msgp++);
 8005c4e:	6820      	ldr	r0, [r4, #0]
 8005c50:	6803      	ldr	r3, [r0, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005c56:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8005c5a:	2900      	cmp	r1, #0
 8005c5c:	d1f7      	bne.n	8005c4e <main+0x5ce>
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
      test_println(")");
 8005c5e:	4856      	ldr	r0, [pc, #344]	; (8005db8 <main+0x738>)
 8005c60:	f7fd fe76 	bl	8003950 <test_println>
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
 8005c64:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005c68:	f7fb fbf2 	bl	8001450 <chThdSleep>
#endif
      execute_test(patterns[i][j]);
 8005c6c:	f858 5c04 	ldr.w	r5, [r8, #-4]
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8005c70:	f8c6 a000 	str.w	sl, [r6]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8005c74:	2300      	movs	r3, #0
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	607b      	str	r3, [r7, #4]
 8005c7a:	60bb      	str	r3, [r7, #8]
 8005c7c:	60fb      	str	r3, [r7, #12]
 8005c7e:	613b      	str	r3, [r7, #16]

  if (tcp->setup != NULL)
 8005c80:	686a      	ldr	r2, [r5, #4]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8005c82:	f88b 3000 	strb.w	r3, [fp]
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 8005c86:	b102      	cbz	r2, 8005c8a <main+0x60a>
    tcp->setup();
 8005c88:	4790      	blx	r2
  tcp->execute();
 8005c8a:	68eb      	ldr	r3, [r5, #12]
 8005c8c:	4798      	blx	r3
  if (tcp->teardown != NULL)
 8005c8e:	68ab      	ldr	r3, [r5, #8]
 8005c90:	b103      	cbz	r3, 8005c94 <main+0x614>
    tcp->teardown();
 8005c92:	4798      	blx	r3

  test_wait_threads();
 8005c94:	f7fe f97c 	bl	8003f90 <test_wait_threads>
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
 8005c98:	f89b 3000 	ldrb.w	r3, [fp]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d053      	beq.n	8005d48 <main+0x6c8>
 8005ca0:	4d46      	ldr	r5, [pc, #280]	; (8005dbc <main+0x73c>)
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005ca2:	212d      	movs	r1, #45	; 0x2d
    chSequentialStreamPut(chp, *msgp++);
 8005ca4:	6820      	ldr	r0, [r4, #0]
 8005ca6:	6803      	ldr	r3, [r0, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005cac:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8005cb0:	2900      	cmp	r1, #0
 8005cb2:	d1f7      	bne.n	8005ca4 <main+0x624>
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
 8005cb4:	f241 1558 	movw	r5, #4440	; 0x1158
 8005cb8:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8005cbc:	6828      	ldr	r0, [r5, #0]
 8005cbe:	4d40      	ldr	r5, [pc, #256]	; (8005dc0 <main+0x740>)
 8005cc0:	f7fd fe6e 	bl	80039a0 <test_printn>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005cc4:	2120      	movs	r1, #32
    chSequentialStreamPut(chp, *msgp++);
 8005cc6:	6820      	ldr	r0, [r4, #0]
 8005cc8:	6803      	ldr	r3, [r0, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005cce:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8005cd2:	2900      	cmp	r1, #0
 8005cd4:	d1f7      	bne.n	8005cc6 <main+0x646>
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8005cd6:	6833      	ldr	r3, [r6, #0]
 8005cd8:	4553      	cmp	r3, sl
}

/*
 * Application entry point.
 */
int main(void) {
 8005cda:	bf88      	it	hi
 8005cdc:	4d39      	ldrhi	r5, [pc, #228]	; (8005dc4 <main+0x744>)
 8005cde:	d90a      	bls.n	8005cf6 <main+0x676>
    chSequentialStreamPut(chp, *cp++);
 8005ce0:	6820      	ldr	r0, [r4, #0]
 8005ce2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005ce6:	6803      	ldr	r3, [r0, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	4798      	blx	r3
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8005cec:	6833      	ldr	r3, [r6, #0]
 8005cee:	462a      	mov	r2, r5
 8005cf0:	3501      	adds	r5, #1
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d3f4      	bcc.n	8005ce0 <main+0x660>
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
        test_print(" [");
        print_tokens();
        test_println("])");
 8005cf6:	4834      	ldr	r0, [pc, #208]	; (8005dc8 <main+0x748>)
 8005cf8:	f7fd fe2a 	bl	8003950 <test_println>

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 8005cfc:	f858 3b04 	ldr.w	r3, [r8], #4
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f47f af7b 	bne.w	8005bfc <main+0x57c>
#endif
  test_println("");

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
 8005d06:	9a05      	ldr	r2, [sp, #20]
 8005d08:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8005d0c:	9205      	str	r2, [sp, #20]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f47f af69 	bne.w	8005be6 <main+0x566>
        test_println("--- Result: SUCCESS");
      j++;
    }
    i++;
  }
  print_line();
 8005d14:	f7fd fe7c 	bl	8003a10 <print_line.7771>
 8005d18:	4d2c      	ldr	r5, [pc, #176]	; (8005dcc <main+0x74c>)
  test_println("");
 8005d1a:	480f      	ldr	r0, [pc, #60]	; (8005d58 <main+0x6d8>)
 8005d1c:	f7fd fe18 	bl	8003950 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005d20:	2146      	movs	r1, #70	; 0x46
    chSequentialStreamPut(chp, *msgp++);
 8005d22:	6820      	ldr	r0, [r4, #0]
 8005d24:	6803      	ldr	r3, [r0, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005d2a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8005d2e:	2900      	cmp	r1, #0
 8005d30:	d1f7      	bne.n	8005d22 <main+0x6a2>
    i++;
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
 8005d32:	f241 1e5c 	movw	lr, #4444	; 0x115c
 8005d36:	f2c2 0e00 	movt	lr, #8192	; 0x2000
 8005d3a:	f89e 3000 	ldrb.w	r3, [lr]
 8005d3e:	b93b      	cbnz	r3, 8005d50 <main+0x6d0>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8005d40:	4823      	ldr	r0, [pc, #140]	; (8005dd0 <main+0x750>)
 8005d42:	f7fd fe05 	bl	8003950 <test_println>
 8005d46:	e6bf      	b.n	8005ac8 <main+0x448>
        test_print(" [");
        print_tokens();
        test_println("])");
      }
      else
        test_println("--- Result: SUCCESS");
 8005d48:	4822      	ldr	r0, [pc, #136]	; (8005dd4 <main+0x754>)
 8005d4a:	f7fd fe01 	bl	8003950 <test_println>
 8005d4e:	e750      	b.n	8005bf2 <main+0x572>
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
    test_println("FAILURE");
 8005d50:	4821      	ldr	r0, [pc, #132]	; (8005dd8 <main+0x758>)
 8005d52:	f7fd fdfd 	bl	8003950 <test_println>
 8005d56:	e6b7      	b.n	8005ac8 <main+0x448>
 8005d58:	08005f34 	.word	0x08005f34
 8005d5c:	08006218 	.word	0x08006218
 8005d60:	08006238 	.word	0x08006238
 8005d64:	08006234 	.word	0x08006234
 8005d68:	08006298 	.word	0x08006298
 8005d6c:	080062a0 	.word	0x080062a0
 8005d70:	080062b4 	.word	0x080062b4
 8005d74:	080062cc 	.word	0x080062cc
 8005d78:	080062e0 	.word	0x080062e0
 8005d7c:	080062ec 	.word	0x080062ec
 8005d80:	08006300 	.word	0x08006300
 8005d84:	0800630c 	.word	0x0800630c
 8005d88:	08006320 	.word	0x08006320
 8005d8c:	0800632c 	.word	0x0800632c
 8005d90:	08006340 	.word	0x08006340
 8005d94:	08006358 	.word	0x08006358
 8005d98:	0800636c 	.word	0x0800636c
 8005d9c:	08006388 	.word	0x08006388
 8005da0:	080061b0 	.word	0x080061b0
 8005da4:	0800639c 	.word	0x0800639c
 8005da8:	08006190 	.word	0x08006190
 8005dac:	0800624c 	.word	0x0800624c
 8005db0:	080063c0 	.word	0x080063c0
 8005db4:	20001370 	.word	0x20001370
 8005db8:	0800625c 	.word	0x0800625c
 8005dbc:	08006260 	.word	0x08006260
 8005dc0:	080063c4 	.word	0x080063c4
 8005dc4:	20001001 	.word	0x20001001
 8005dc8:	08006278 	.word	0x08006278
 8005dcc:	080063c8 	.word	0x080063c8
 8005dd0:	08006288 	.word	0x08006288
 8005dd4:	0800627c 	.word	0x0800627c
 8005dd8:	08006290 	.word	0x08006290
 8005ddc:	f3af 8000 	nop.w
 8005de0:	00000041 	.word	0x00000041
 8005de4:	00000043 	.word	0x00000043
 8005de8:	00000042 	.word	0x00000042
 8005dec:	00434241 	.word	0x00434241
 8005df0:	00000044 	.word	0x00000044
 8005df4:	44434241 	.word	0x44434241
 8005df8:	00000045 	.word	0x00000045
 8005dfc:	202d2d2d 	.word	0x202d2d2d
 8005e00:	74737953 	.word	0x74737953
 8005e04:	203a6d65 	.word	0x203a6d65
 8005e08:	00000000 	.word	0x00000000
 8005e0c:	74796220 	.word	0x74796220
 8005e10:	00007365 	.word	0x00007365
 8005e14:	202d2d2d 	.word	0x202d2d2d
 8005e18:	65726854 	.word	0x65726854
 8005e1c:	203a6461 	.word	0x203a6461
 8005e20:	00000000 	.word	0x00000000
 8005e24:	202d2d2d 	.word	0x202d2d2d
 8005e28:	656d6954 	.word	0x656d6954
 8005e2c:	203a2072 	.word	0x203a2072
 8005e30:	00000000 	.word	0x00000000
 8005e34:	202d2d2d 	.word	0x202d2d2d
 8005e38:	616d6553 	.word	0x616d6553
 8005e3c:	203a6870 	.word	0x203a6870
 8005e40:	00000000 	.word	0x00000000
 8005e44:	202d2d2d 	.word	0x202d2d2d
 8005e48:	6e657645 	.word	0x6e657645
 8005e4c:	203a5374 	.word	0x203a5374
 8005e50:	00000000 	.word	0x00000000
 8005e54:	202d2d2d 	.word	0x202d2d2d
 8005e58:	6e657645 	.word	0x6e657645
 8005e5c:	203a4c74 	.word	0x203a4c74
 8005e60:	00000000 	.word	0x00000000
 8005e64:	202d2d2d 	.word	0x202d2d2d
 8005e68:	6574754d 	.word	0x6574754d
 8005e6c:	203a2078 	.word	0x203a2078
 8005e70:	00000000 	.word	0x00000000
 8005e74:	202d2d2d 	.word	0x202d2d2d
 8005e78:	646e6f43 	.word	0x646e6f43
 8005e7c:	203a2e56 	.word	0x203a2e56
 8005e80:	00000000 	.word	0x00000000
 8005e84:	202d2d2d 	.word	0x202d2d2d
 8005e88:	75657551 	.word	0x75657551
 8005e8c:	203a2065 	.word	0x203a2065
 8005e90:	00000000 	.word	0x00000000
 8005e94:	202d2d2d 	.word	0x202d2d2d
 8005e98:	6c69614d 	.word	0x6c69614d
 8005e9c:	203a2e42 	.word	0x203a2e42
 8005ea0:	00000000 	.word	0x00000000
 8005ea4:	00004241 	.word	0x00004241
	...
 8005eb0:	44434241 	.word	0x44434241
 8005eb4:	00000000 	.word	0x00000000
 8005eb8:	6e696c62 	.word	0x6e696c62
 8005ebc:	0072656b 	.word	0x0072656b

08005ec0 <evhndl.8959.4401>:
 8005ec0:	08003891 080038a1 080038b1 00000000     .8...8...8......
 8005ed0:	202d2d2d 726f6353 203a2065 00000000     --- Score : ....
 8005ee0:	72687420 73646165 0000532f 78746320      threads/S.. ctx
 8005ef0:	2f637773 00000053 6d697420 2f737265     swc/S... timers/
 8005f00:	00000053 636f6c20 6e752b6b 6b636f6c     S... lock+unlock
 8005f10:	0000532f 69617720 69732b74 6c616e67     /S.. wait+signal
 8005f20:	0000532f 73657220 64656863 73656c75     /S.. reschedules
 8005f30:	202c532f 00000000 67736d20 2c532f73     /S, .... msgs/S,
 8005f40:	00000020 74796220 532f7365 00000000      ... bytes/S....

08005f50 <ram_areas.4014.4352>:
 8005f50:	08006b98 20001378 20001378 20001378     .k..x.. x.. x.. 
 8005f60:	08006b98 00000000 00000000 00000000     .k..............
 8005f70:	08006b98 00000000 00000000 00000000     .k..............
 8005f80:	08006b98 00000000 00000000 00000000     .k..............
 8005f90:	08006b98 00000000 00000000 00000000     .k..............
 8005fa0:	08006b98 00000000 00000000 00000000     .k..............
 8005fb0:	08006b98 00000000 00000000 00000000     .k..............
 8005fc0:	08006b98 00000000 00000000 00000000     .k..............

08005fd0 <wa>:
 8005fd0:	20000998 20000ae0 20000c28 20000d70     ... ... (.. p.. 
 8005fe0:	20000eb8 00000000 00000000 00000000     ... ............
 8005ff0:	00000a0d 00000000 00000000 00000000     ................

08006000 <testthd3.4592>:
 8006000:	08006458 00000000 00000000 08003721     Xd..........!7..

08006010 <testthd2.4591>:
 8006010:	0800643c 00000000 00000000 08004191     <d...........A..

08006020 <testbmk3.4668>:
 8006020:	08006734 00000000 00000000 08002791     4g...........'..

08006030 <testbmk10.4675>:
 8006030:	08006820 00000000 00000000 080020c1      h........... ..

08006040 <patterndyn.4646>:
 8006040:	08006a70 080068e0 080069b0 00000000     pj...h...i......

08006050 <testmtx7.4612>:
 8006050:	0800655c 080003b1 00000000 08000941     \e..........A...

08006060 <ch_debug.4681>:
 8006060:	6e69616d 18451600 08440404 1814100c     main..E...D.....
 8006070:	1e1d1c00 00000000 00000000 00000000     ................

08006080 <testevt3.4633>:
 8006080:	080065f8 08000f71 00000000 08002991     .e..q........)..

08006090 <testbmk13.4678>:
 8006090:	08006888 00000000 00000000 08000c41     .h..........A...

080060a0 <testbmk4.4669>:
 80060a0:	0800674c 00000000 00000000 08001d91     Lg..............

080060b0 <patternheap.4634>:
 80060b0:	080060f0 00000000 00000000 00000000     .`..............

080060c0 <testmtx6.4611>:
 80060c0:	08006544 080003d1 00000000 08000851     De..........Q...

080060d0 <testsem4.4602>:
 80060d0:	080064d0 00000000 00000000 08002af1     .d...........*..

080060e0 <testbmk6.4671>:
 80060e0:	08006788 00000000 00000000 08001c81     .g..............

080060f0 <testheap1.4635>:
 80060f0:	0800660c 08000591 00000000 08003c31     .f..........1<..

08006100 <testsys2.4583>:
 8006100:	080063f0 00000000 00000000 080034c1     .c...........4..

08006110 <testevt2.4632>:
 8006110:	080065dc 08000f61 00000000 08004551     .e..a.......QE..

08006120 <testbmk11.4676>:
 8006120:	08006844 08000511 00000000 08002361     Dh..........a#..

08006130 <testsem1.4595>:
 8006130:	08006484 080004f1 00000000 080006b1     .d..............

08006140 <patternpools.4640>:
 8006140:	080061f0 00000000 00000000 00000000     .a..............

08006150 <patternmtx.4603>:
 8006150:	08006ac0 08006ad0 080069f0 080060c0     .j...j...i...`..
 8006160:	08006050 080069d0 00000000 00000000     P`...i..........

08006170 <testsys1.4578>:
 8006170:	080063d8 00000000 00000000 08002001     .c........... ..

08006180 <testbmk1.4662>:
 8006180:	08006704 00000000 00000000 08002691     .g...........&..

08006190 <patternsys.4577>:
 8006190:	08006170 08006100 08006200 00000000     pa...a...b......

080061a0 <patternmsg.4614>:
 80061a0:	08006970 00000000 00000000 00000000     pi..............

080061b0 <patterns.7925.4576>:
 80061b0:	08006190 08006900 080068c0 08006150     .a...i...h..Pa..
 80061c0:	080061a0 08006990 08006a00 080060b0     .a...i...j...`..
 80061d0:	08006140 08006040 080069a0 08006a30     @a..@`...i..0j..
	...

080061f0 <testpools1.4641>:
 80061f0:	08006634 08000571 00000000 08001141     4f..q.......A...

08006200 <testsys3.4584>:
 8006200:	0800640c 00000000 00000000 08003691     .d...........6..
 8006210:	656c6469 00000000 202a2a2a 62696843     idle....*** Chib
 8006220:	2f534f69 74205452 20747365 74697573     iOS/RT test suit
 8006230:	00000065 002a2a2a 202a2a2a 6e72654b     e...***.*** Kern
 8006240:	203a6c65 20202020 00002020 202d2d2d     el:       ..--- 
 8006250:	74736554 73614320 00002065 00000029     Test Case ..)...
 8006260:	202d2d2d 75736552 203a746c 4c494146     --- Result: FAIL
 8006270:	20455255 00002328 0000295d 202d2d2d     URE (#..])..--- 
 8006280:	75736552 203a746c 43435553 00535345     Result: SUCCESS.
 8006290:	4c494146 00455255 2e312e33 00000035     FAILURE.3.1.5...
 80062a0:	202a2a2a 706d6f43 64656c69 2020203a     *** Compiled:   
 80062b0:	00002020 2072614d 32203432 20373130       ..Mar 24 2017 
 80062c0:	3332202d 3a36313a 00003930 202a2a2a     - 23:16:09..*** 
 80062d0:	706d6f43 72656c69 2020203a 00002020     Compiler:     ..
 80062e0:	20434347 2e372e34 00000032 202a2a2a     GCC 4.7.2...*** 
 80062f0:	68637241 63657469 65727574 0000203a     Architecture: ..
 8006300:	764d5241 4d2d4537 00000000 202a2a2a     ARMv7E-M....*** 
 8006310:	65726f43 72615620 746e6169 0000203a     Core Variant: ..
 8006320:	74726f43 4d2d7865 00000034 202a2a2a     Cortex-M4...*** 
 8006330:	74726f50 666e4920 20203a6f 00002020     Port Info:    ..
 8006340:	61766441 6465636e 72656b20 206c656e     Advanced kernel 
 8006350:	65646f6d 00000000 202a2a2a 74616c50     mode....*** Plat
 8006360:	6d726f66 2020203a 00002020 334d5453     form:     ..STM3
 8006370:	30334632 20387832 6c616e41 2620676f     2F302x8 Analog &
 8006380:	50534420 00000000 202a2a2a 74736554      DSP....*** Test
 8006390:	616f4220 203a6472 00002020 694d5453      Board:   ..STMi
 80063a0:	656f7263 7463656c 696e6f72 4e207363     croelectronics N
 80063b0:	454c4355 33462d4f 38523230 00000000     UCLEO-F302R8....
 80063c0:	00002820 00005b20 616e6946 6572206c      (.. [..Final re
 80063d0:	746c7573 0000203a 74737953 202c6d65     sult: ..System, 
 80063e0:	74697263 6c616369 6e6f7a20 00007365     critical zones..
 80063f0:	74737953 202c6d65 65746e69 70757272     System, interrup
 8006400:	68207374 6c646e61 00676e69 74737953     ts handling.Syst
 8006410:	202c6d65 65746e69 74697267 00000079     em, integrity...
 8006420:	65726854 2c736461 716e6520 69756575     Threads, enqueui
 8006430:	7420676e 20747365 00003123 65726854     ng test #1..Thre
 8006440:	2c736461 716e6520 69756575 7420676e     ads, enqueuing t
 8006450:	20747365 00003223 65726854 2c736461     est #2..Threads,
 8006460:	69727020 7469726f 68632079 65676e61      priority change
 8006470:	00000000 65726854 2c736461 6c656420     ....Threads, del
 8006480:	00737961 616d6553 726f6870 202c7365     ays.Semaphores, 
 8006490:	75716e65 6e697565 00000067 616d6553     enqueuing...Sema
 80064a0:	726f6870 202c7365 656d6974 0074756f     phores, timeout.
 80064b0:	616d6553 726f6870 202c7365 6d6f7461     Semaphores, atom
 80064c0:	73206369 616e6769 61772d6c 00007469     ic signal-wait..
 80064d0:	616e6942 53207972 70616d65 65726f68     Binary Semaphore
 80064e0:	66202c73 74636e75 616e6f69 7974696c     s, functionality
 80064f0:	00000000 6574754d 2c736578 69727020     ....Mutexes, pri
 8006500:	7469726f 6e652079 75657571 20676e69     ority enqueuing 
 8006510:	74736574 00000000 6574754d 2c736578     test....Mutexes,
 8006520:	69727020 7469726f 65722079 6e727574      priority return
 8006530:	00000000 6574754d 2c736578 61747320     ....Mutexes, sta
 8006540:	00737574 646e6f43 2c726156 67697320     tus.CondVar, sig
 8006550:	206c616e 74736574 00000000 646e6f43     nal test....Cond
 8006560:	2c726156 6f726220 61636461 74207473     Var, broadcast t
 8006570:	00747365 646e6f43 2c726156 6f6f6220     est.CondVar, boo
 8006580:	74207473 00747365 7373654d 73656761     st test.Messages
 8006590:	6f6c202c 0000706f 6c69614d 65786f62     , loop..Mailboxe
 80065a0:	71202c73 69756575 6120676e 7420646e     s, queuing and t
 80065b0:	6f656d69 00737475 6e657645 202c7374     imeouts.Events, 
 80065c0:	69676572 61727473 6e6f6974 646e6120     registration and
 80065d0:	73696420 63746170 00000068 6e657645      dispatch...Even
 80065e0:	202c7374 74696177 646e6120 6f726220     ts, wait and bro
 80065f0:	61636461 00007473 6e657645 202c7374     adcast..Events, 
 8006600:	656d6974 7374756f 00000000 70616548     timeouts....Heap
 8006610:	6c61202c 61636f6c 6e6f6974 646e6120     , allocation and
 8006620:	61726620 6e656d67 69746174 74206e6f      fragmentation t
 8006630:	00747365 6f6d654d 50207972 736c6f6f     est.Memory Pools
 8006640:	7571202c 2f657565 75716564 00657565     , queue/dequeue.
 8006650:	616e7944 2063696d 73495041 6874202c     Dynamic APIs, th
 8006660:	64616572 72632073 69746165 66206e6f     reads creation f
 8006670:	206d6f72 70616568 00000000 616e7944     rom heap....Dyna
 8006680:	2063696d 73495041 6874202c 64616572     mic APIs, thread
 8006690:	72632073 69746165 66206e6f 206d6f72     s creation from 
 80066a0:	6f6d656d 70207972 006c6f6f 616e7944     memory pool.Dyna
 80066b0:	2063696d 73495041 6572202c 74736967     mic APIs, regist
 80066c0:	61207972 7220646e 72656665 65636e65     ry and reference
 80066d0:	00000073 75657551 202c7365 75706e69     s...Queues, inpu
 80066e0:	75712074 73657565 00000000 75657551     t queues....Queu
 80066f0:	202c7365 7074756f 71207475 65756575     es, output queue
 8006700:	00000073 636e6542 72616d68 6d202c6b     s...Benchmark, m
 8006710:	61737365 20736567 00003123 636e6542     essages #1..Benc
 8006720:	72616d68 6d202c6b 61737365 20736567     hmark, messages 
 8006730:	00003223 636e6542 72616d68 6d202c6b     #2..Benchmark, m
 8006740:	61737365 20736567 00003323 636e6542     essages #3..Benc
 8006750:	72616d68 63202c6b 65746e6f 73207478     hmark, context s
 8006760:	63746977 00000068 636e6542 72616d68     witch...Benchmar
 8006770:	74202c6b 61657268 202c7364 6c6c7566     k, threads, full
 8006780:	63796320 0000656c 636e6542 72616d68      cycle..Benchmar
 8006790:	74202c6b 61657268 202c7364 61657263     k, threads, crea
 80067a0:	6f206574 00796c6e 636e6542 72616d68     te only.Benchmar
 80067b0:	6d202c6b 20737361 63736572 75646568     k, mass reschedu
 80067c0:	202c656c 68742035 64616572 00000073     le, 5 threads...
 80067d0:	636e6542 72616d68 72202c6b 646e756f     Benchmark, round
 80067e0:	626f7220 63206e69 65746e6f 73207478      robin context s
 80067f0:	63746977 676e6968 00000000 636e6542     witching....Benc
 8006800:	72616d68 49202c6b 51204f2f 65756575     hmark, I/O Queue
 8006810:	68742073 67756f72 74757068 00000000     s throughput....
 8006820:	636e6542 72616d68 76202c6b 75747269     Benchmark, virtu
 8006830:	74206c61 72656d69 65732073 65722f74     al timers set/re
 8006840:	00746573 636e6542 72616d68 73202c6b     set.Benchmark, s
 8006850:	70616d65 65726f68 61772073 732f7469     emaphores wait/s
 8006860:	616e6769 0000006c 636e6542 72616d68     ignal...Benchmar
 8006870:	6d202c6b 78657475 6c207365 2f6b636f     k, mutexes lock/
 8006880:	6f6c6e75 00006b63 636e6542 72616d68     unlock..Benchmar
 8006890:	52202c6b 66204d41 70746f6f 746e6972     k, RAM footprint
	...

080068b0 <testsem2.4600>:
 80068b0:	0800649c 080004d1 00000000 08001e51     .d..........Q...

080068c0 <patternsem.4594>:
 80068c0:	08006130 080068b0 08006a10 080060d0     0a...h...j...`..
	...

080068e0 <testdyn2.4652>:
 80068e0:	0800667c 08000551 00000000 08001221     |f..Q.......!...

080068f0 <testmbox1.4621>:
 80068f0:	08006598 08000471 00000000 08002c51     .e..q.......Q,..

08006900 <patternthd.4585>:
 8006900:	080069c0 08006010 08006000 08006940     .i...`...`..@i..
	...

08006920 <testbmk2.4667>:
 8006920:	0800671c 00000000 00000000 08002711     .g...........'..

08006930 <testbmk12.4677>:
 8006930:	08006868 08000451 00000000 080022f1     hh..Q........"..

08006940 <testthd4.4593>:
 8006940:	08006474 00000000 00000000 08002231     td..........1"..

08006950 <testbmk9.4674>:
 8006950:	080067fc 00000000 00000000 080028e1     .g...........(..

08006960 <testqueues1.4655>:
 8006960:	080066d4 08000381 00000000 08004ad1     .f...........J..

08006970 <testmsg1.4615>:
 8006970:	08006588 00000000 00000000 08001cf1     .e..............

08006980 <testbmk7.4672>:
 8006980:	080067a8 08000531 00000000 080024c1     .g..1........$..

08006990 <patternmbox.4620>:
 8006990:	080068f0 00000000 00000000 00000000     .h..............

080069a0 <patternqueues.4654>:
 80069a0:	08006960 080069e0 00000000 00000000     `i...i..........

080069b0 <testdyn3.4653>:
 80069b0:	080066ac 080010f1 00000000 080017c1     .f..............

080069c0 <testthd1.4586>:
 80069c0:	08006420 00000000 00000000 080040b1      d...........@..

080069d0 <testmtx8.4613>:
 80069d0:	08006574 08000311 00000000 08000601     te..............

080069e0 <testqueues2.4660>:
 80069e0:	080066ec 08000341 00000000 080042e1     .f..A........B..

080069f0 <testmtx5.4610>:
 80069f0:	08006534 080003f1 00000000 080049d1     4e...........I..

08006a00 <patternevt.4626>:
 8006a00:	08006a20 08006110 08006080 00000000      j...a...`......

08006a10 <testsem3.4601>:
 8006a10:	080064b0 080004b1 00000000 08000aa1     .d..............

08006a20 <testevt1.4627>:
 8006a20:	080065b8 08000f51 00000000 08002141     .e..Q.......A!..

08006a30 <patternbmk.4661>:
 8006a30:	08006180 08006920 08006020 080060a0     .a.. i.. `...`..
 8006a40:	08006a90 080060e0 08006980 08006a80     .j...`...i...j..
 8006a50:	08006950 08006030 08006120 08006930     Pi..0`.. a..0i..
 8006a60:	08006090 00000000 00000000 00000000     .`..............

08006a70 <testdyn1.4647>:
 8006a70:	08006650 080010c1 00000000 08000e11     Pf..............

08006a80 <testbmk8.4673>:
 8006a80:	080067d0 00000000 00000000 080023d1     .g...........#..

08006a90 <testbmk5.4670>:
 8006a90:	08006768 00000000 00000000 080025f1     hg...........%..

08006aa0 <vmt.7314.4740>:
 8006aa0:	08001ba1 08001a71 08001ae1 080019c1     ....q...........
 8006ab0:	08001ad1 080019b1 08001b91 08001a61     ............a...

08006ac0 <testmtx1.4604>:
 8006ac0:	080064f4 08000431 00000000 08003fc1     .d..1........?..

08006ad0 <testmtx4.4609>:
 8006ad0:	08006518 08000411 00000000 080014c1     .e..............
